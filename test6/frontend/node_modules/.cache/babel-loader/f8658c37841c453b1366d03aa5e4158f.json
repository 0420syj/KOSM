{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { polyfill } from 'react-lifecycles-compat';\nimport toArray from 'rc-util/es/Children/toArray';\nimport warning from 'fbjs/lib/warning';\nimport AnimateChild from './AnimateChild';\nimport { cloneProps, mergeChildren } from './util';\nvar defaultKey = 'rc_animate_' + Date.now();\nvar clonePropList = ['children'];\n/**\n * Default use `AnimateChild` as component.\n * Here can also pass customize `ChildComponent` for test usage.\n */\n\nexport function genAnimate(ChildComponent) {\n  var Animate = function (_React$Component) {\n    _inherits(Animate, _React$Component);\n\n    function Animate() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, Animate);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Animate.__proto__ || Object.getPrototypeOf(Animate)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n        appeared: true,\n        mergedChildren: []\n      }, _this.onChildLeaved = function (key) {\n        // Remove child which not exist anymore\n        if (!_this.hasChild(key)) {\n          var mergedChildren = _this.state.mergedChildren;\n\n          _this.setState({\n            mergedChildren: mergedChildren.filter(function (node) {\n              return node.key !== key;\n            })\n          });\n        }\n      }, _this.hasChild = function (key) {\n        var children = _this.props.children;\n        return toArray(children).some(function (node) {\n          return node && node.key === key;\n        });\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    } // [Legacy] Not sure usage\n    // commit: https://github.com/react-component/animate/commit/0a1cbfd647407498b10a8c6602a2dea80b42e324\n    // eslint-disable-line\n\n\n    _createClass(Animate, [{\n      key: 'componentDidMount',\n      value: function componentDidMount() {\n        // No need to re-render\n        this.state.appeared = false;\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _this2 = this;\n\n        var _state = this.state,\n            appeared = _state.appeared,\n            mergedChildren = _state.mergedChildren;\n        var _props = this.props,\n            Component = _props.component,\n            componentProps = _props.componentProps,\n            className = _props.className,\n            style = _props.style,\n            showProp = _props.showProp;\n        var $children = mergedChildren.map(function (node) {\n          if (mergedChildren.length > 1 && !node.key) {\n            warning(false, 'must set key for <rc-animate> children');\n            return null;\n          }\n\n          var show = true;\n\n          if (!_this2.hasChild(node.key)) {\n            show = false;\n          } else if (showProp) {\n            show = node.props[showProp];\n          }\n\n          var key = node.key || defaultKey;\n          return React.createElement(ChildComponent, _extends({}, _this2.props, {\n            appeared: appeared,\n            show: show,\n            className: node.props.className,\n            style: node.props.style,\n            key: key,\n            animateKey: node.key // Keep trans origin key\n            ,\n            onChildLeaved: _this2.onChildLeaved\n          }), node);\n        }); // Wrap with component\n\n        if (Component) {\n          var passedProps = this.props;\n\n          if (typeof Component === 'string') {\n            passedProps = _extends({\n              className: className,\n              style: style\n            }, componentProps);\n          }\n\n          return React.createElement(Component, passedProps, $children);\n        }\n\n        return $children[0] || null;\n      }\n    }], [{\n      key: 'getDerivedStateFromProps',\n      value: function getDerivedStateFromProps(nextProps, prevState) {\n        var _prevState$prevProps = prevState.prevProps,\n            prevProps = _prevState$prevProps === undefined ? {} : _prevState$prevProps;\n        var newState = {\n          prevProps: cloneProps(nextProps, clonePropList)\n        };\n        var showProp = nextProps.showProp;\n\n        function processState(propName, updater) {\n          if (prevProps[propName] !== nextProps[propName]) {\n            updater(nextProps[propName]);\n            return true;\n          }\n\n          return false;\n        }\n\n        processState('children', function (children) {\n          var currentChildren = toArray(children).filter(function (node) {\n            return node;\n          });\n          var prevChildren = prevState.mergedChildren.filter(function (node) {\n            // Remove prev child if not show anymore\n            if (currentChildren.every(function (_ref2) {\n              var key = _ref2.key;\n              return key !== node.key;\n            }) && showProp && !node.props[showProp]) {\n              return false;\n            }\n\n            return true;\n          }); // Merge prev children to keep the animation\n\n          newState.mergedChildren = mergeChildren(prevChildren, currentChildren);\n        });\n        return newState;\n      }\n    }]);\n\n    return Animate;\n  }(React.Component);\n\n  Animate.isAnimate = true;\n  Animate.propTypes = {\n    component: PropTypes.any,\n    componentProps: PropTypes.object,\n    animation: PropTypes.object,\n    transitionName: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    transitionEnter: PropTypes.bool,\n    transitionAppear: PropTypes.bool,\n    exclusive: PropTypes.bool,\n    transitionLeave: PropTypes.bool,\n    onEnd: PropTypes.func,\n    onEnter: PropTypes.func,\n    onLeave: PropTypes.func,\n    onAppear: PropTypes.func,\n    showProp: PropTypes.string,\n    children: PropTypes.node,\n    style: PropTypes.object,\n    className: PropTypes.string\n  };\n  Animate.defaultProps = {\n    animation: {},\n    component: 'span',\n    componentProps: {},\n    transitionEnter: true,\n    transitionLeave: true,\n    transitionAppear: false\n  };\n  polyfill(Animate);\n  return Animate;\n}\nexport default genAnimate(AnimateChild);","map":{"version":3,"sources":["C:/Users/user/Desktop/test6/frontend/node_modules/rc-tree-select/node_modules/rc-trigger/node_modules/rc-animate/es/Animate.js"],"names":["_extends","_classCallCheck","_createClass","_possibleConstructorReturn","_inherits","React","PropTypes","polyfill","toArray","warning","AnimateChild","cloneProps","mergeChildren","defaultKey","Date","now","clonePropList","genAnimate","ChildComponent","Animate","_React$Component","_ref","_temp","_this","_ret","_len","arguments","length","args","Array","_key","__proto__","Object","getPrototypeOf","call","apply","concat","state","appeared","mergedChildren","onChildLeaved","key","hasChild","setState","filter","node","children","props","some","value","componentDidMount","render","_this2","_state","_props","Component","component","componentProps","className","style","showProp","$children","map","show","createElement","animateKey","passedProps","getDerivedStateFromProps","nextProps","prevState","_prevState$prevProps","prevProps","undefined","newState","processState","propName","updater","currentChildren","prevChildren","every","_ref2","isAnimate","propTypes","any","object","animation","transitionName","oneOfType","string","transitionEnter","bool","transitionAppear","exclusive","transitionLeave","onEnd","func","onEnter","onLeave","onAppear","defaultProps"],"mappings":"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","sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { polyfill } from 'react-lifecycles-compat';\nimport toArray from 'rc-util/es/Children/toArray';\nimport warning from 'fbjs/lib/warning';\n\nimport AnimateChild from './AnimateChild';\nimport { cloneProps, mergeChildren } from './util';\n\nvar defaultKey = 'rc_animate_' + Date.now();\nvar clonePropList = ['children'];\n\n/**\n * Default use `AnimateChild` as component.\n * Here can also pass customize `ChildComponent` for test usage.\n */\nexport function genAnimate(ChildComponent) {\n  var Animate = function (_React$Component) {\n    _inherits(Animate, _React$Component);\n\n    function Animate() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, Animate);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Animate.__proto__ || Object.getPrototypeOf(Animate)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n        appeared: true,\n        mergedChildren: []\n      }, _this.onChildLeaved = function (key) {\n        // Remove child which not exist anymore\n        if (!_this.hasChild(key)) {\n          var mergedChildren = _this.state.mergedChildren;\n\n          _this.setState({\n            mergedChildren: mergedChildren.filter(function (node) {\n              return node.key !== key;\n            })\n          });\n        }\n      }, _this.hasChild = function (key) {\n        var children = _this.props.children;\n\n\n        return toArray(children).some(function (node) {\n          return node && node.key === key;\n        });\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n    // [Legacy] Not sure usage\n    // commit: https://github.com/react-component/animate/commit/0a1cbfd647407498b10a8c6602a2dea80b42e324\n    // eslint-disable-line\n\n    _createClass(Animate, [{\n      key: 'componentDidMount',\n      value: function componentDidMount() {\n        // No need to re-render\n        this.state.appeared = false;\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _this2 = this;\n\n        var _state = this.state,\n            appeared = _state.appeared,\n            mergedChildren = _state.mergedChildren;\n        var _props = this.props,\n            Component = _props.component,\n            componentProps = _props.componentProps,\n            className = _props.className,\n            style = _props.style,\n            showProp = _props.showProp;\n\n\n        var $children = mergedChildren.map(function (node) {\n          if (mergedChildren.length > 1 && !node.key) {\n            warning(false, 'must set key for <rc-animate> children');\n            return null;\n          }\n\n          var show = true;\n\n          if (!_this2.hasChild(node.key)) {\n            show = false;\n          } else if (showProp) {\n            show = node.props[showProp];\n          }\n\n          var key = node.key || defaultKey;\n\n          return React.createElement(\n            ChildComponent,\n            _extends({}, _this2.props, {\n              appeared: appeared,\n              show: show,\n              className: node.props.className,\n              style: node.props.style,\n              key: key,\n\n              animateKey: node.key // Keep trans origin key\n              , onChildLeaved: _this2.onChildLeaved\n            }),\n            node\n          );\n        });\n\n        // Wrap with component\n        if (Component) {\n          var passedProps = this.props;\n          if (typeof Component === 'string') {\n            passedProps = _extends({\n              className: className,\n              style: style\n            }, componentProps);\n          }\n\n          return React.createElement(\n            Component,\n            passedProps,\n            $children\n          );\n        }\n\n        return $children[0] || null;\n      }\n    }], [{\n      key: 'getDerivedStateFromProps',\n      value: function getDerivedStateFromProps(nextProps, prevState) {\n        var _prevState$prevProps = prevState.prevProps,\n            prevProps = _prevState$prevProps === undefined ? {} : _prevState$prevProps;\n\n        var newState = {\n          prevProps: cloneProps(nextProps, clonePropList)\n        };\n        var showProp = nextProps.showProp;\n\n\n        function processState(propName, updater) {\n          if (prevProps[propName] !== nextProps[propName]) {\n            updater(nextProps[propName]);\n            return true;\n          }\n          return false;\n        }\n\n        processState('children', function (children) {\n          var currentChildren = toArray(children).filter(function (node) {\n            return node;\n          });\n          var prevChildren = prevState.mergedChildren.filter(function (node) {\n            // Remove prev child if not show anymore\n            if (currentChildren.every(function (_ref2) {\n              var key = _ref2.key;\n              return key !== node.key;\n            }) && showProp && !node.props[showProp]) {\n              return false;\n            }\n            return true;\n          });\n\n          // Merge prev children to keep the animation\n          newState.mergedChildren = mergeChildren(prevChildren, currentChildren);\n        });\n\n        return newState;\n      }\n    }]);\n\n    return Animate;\n  }(React.Component);\n\n  Animate.isAnimate = true;\n  Animate.propTypes = {\n    component: PropTypes.any,\n    componentProps: PropTypes.object,\n    animation: PropTypes.object,\n    transitionName: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    transitionEnter: PropTypes.bool,\n    transitionAppear: PropTypes.bool,\n    exclusive: PropTypes.bool,\n    transitionLeave: PropTypes.bool,\n    onEnd: PropTypes.func,\n    onEnter: PropTypes.func,\n    onLeave: PropTypes.func,\n    onAppear: PropTypes.func,\n    showProp: PropTypes.string,\n    children: PropTypes.node,\n    style: PropTypes.object,\n    className: PropTypes.string\n  };\n  Animate.defaultProps = {\n    animation: {},\n    component: 'span',\n    componentProps: {},\n    transitionEnter: true,\n    transitionLeave: true,\n    transitionAppear: false\n  };\n\n\n  polyfill(Animate);\n\n  return Animate;\n}\n\nexport default genAnimate(AnimateChild);"]},"metadata":{},"sourceType":"module"}