{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { withConfigConsumer } from '../config-provider/context';\nimport StatisticNumber from './Number';\n\nvar Statistic = function Statistic(props) {\n  var prefixCls = props.prefixCls,\n      className = props.className,\n      style = props.style,\n      valueStyle = props.valueStyle,\n      _props$value = props.value,\n      value = _props$value === void 0 ? 0 : _props$value,\n      title = props.title,\n      valueRender = props.valueRender,\n      prefix = props.prefix,\n      suffix = props.suffix;\n  var valueNode = React.createElement(StatisticNumber, _extends({}, props, {\n    value: value\n  }));\n\n  if (valueRender) {\n    valueNode = valueRender(valueNode);\n  }\n\n  return React.createElement(\"div\", {\n    className: classNames(prefixCls, className),\n    style: style\n  }, title && React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-title\")\n  }, title), React.createElement(\"div\", {\n    style: valueStyle,\n    className: \"\".concat(prefixCls, \"-content\")\n  }, prefix && React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-content-prefix\")\n  }, prefix), valueNode, suffix && React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-content-suffix\")\n  }, suffix)));\n};\n\nStatistic.defaultProps = {\n  decimalSeparator: '.',\n  groupSeparator: ','\n};\nvar WrapperStatistic = withConfigConsumer({\n  prefixCls: 'statistic'\n})(Statistic);\nexport default WrapperStatistic;","map":{"version":3,"sources":["statistic/Statistic.jsx"],"names":["Statistic","prefixCls","className","style","valueStyle","value","title","valueRender","prefix","suffix","props","valueNode","classNames","decimalSeparator","groupSeparator","WrapperStatistic"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAA,UAAA,MAAA,YAAA;AACA,SAAA,kBAAA,QAAA,4BAAA;AACA,OAAA,eAAA,MAAA,UAAA;;AACA,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAAA,KAAA,EAAS;AAAA,MACfC,SADe,GAC6ES,KAD7E,CAAA,SAAA;AAAA,MACJR,SADI,GAC6EQ,KAD7E,CAAA,SAAA;AAAA,MACOP,KADP,GAC6EO,KAD7E,CAAA,KAAA;AAAA,MACcN,UADd,GAC6EM,KAD7E,CAAA,UAAA;AAAA,MAAA,YAAA,GAC6EA,KAD7E,CAAA,KAAA;AAAA,MAC0BL,KAD1B,GAAA,YAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,YAAA;AAAA,MACqCC,KADrC,GAC6EI,KAD7E,CAAA,KAAA;AAAA,MAC4CH,WAD5C,GAC6EG,KAD7E,CAAA,WAAA;AAAA,MACyDF,MADzD,GAC6EE,KAD7E,CAAA,MAAA;AAAA,MACiED,MADjE,GAC6EC,KAD7E,CAAA,MAAA;AAEvB,MAAIC,SAAS,GAAG,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAA4B,IAAA,KAAK,EAAEN;AAAnC,GAAA,CAAA,CAAhB;;AACA,MAAA,WAAA,EAAiB;AACbM,IAAAA,SAAS,GAAGJ,WAAW,CAAvBI,SAAuB,CAAvBA;AACH;;AACD,SAAQ,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAEC,UAAU,CAAA,SAAA,EAA1B,SAA0B,CAA1B;AAAkD,IAAA,KAAK,EAAET;AAAzD,GAAA,EACLG,KAAK,IAAI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,QAAA;AAAd,GAAA,EADJ,KACI,CADJ,EAEN,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,KAAK,EAAV,UAAA;AAAwB,IAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,UAAA;AAAjC,GAAA,EACGE,MAAM,IAAI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,iBAAA;AAAf,GAAA,EADb,MACa,CADb,EAAA,SAAA,EAGGC,MAAM,IAAI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,iBAAA;AAAf,GAAA,EALf,MAKe,CAHb,CAFM,CAAR;AANJ,CAAA;;AAeAT,SAAS,CAATA,YAAAA,GAAyB;AACrBa,EAAAA,gBAAgB,EADK,GAAA;AAErBC,EAAAA,cAAc,EAAE;AAFK,CAAzBd;AAIA,IAAMe,gBAAgB,GAAG,kBAAkB,CAAC;AACxCd,EAAAA,SAAS,EAAE;AAD6B,CAAD,CAAlB,CAAzB,SAAyB,CAAzB;AAGA,eAAA,gBAAA","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport { withConfigConsumer } from '../config-provider/context';\nimport StatisticNumber from './Number';\nconst Statistic = props => {\n    const { prefixCls, className, style, valueStyle, value = 0, title, valueRender, prefix, suffix, } = props;\n    let valueNode = <StatisticNumber {...props} value={value}/>;\n    if (valueRender) {\n        valueNode = valueRender(valueNode);\n    }\n    return (<div className={classNames(prefixCls, className)} style={style}>\n      {title && <div className={`${prefixCls}-title`}>{title}</div>}\n      <div style={valueStyle} className={`${prefixCls}-content`}>\n        {prefix && <span className={`${prefixCls}-content-prefix`}>{prefix}</span>}\n        {valueNode}\n        {suffix && <span className={`${prefixCls}-content-suffix`}>{suffix}</span>}\n      </div>\n    </div>);\n};\nStatistic.defaultProps = {\n    decimalSeparator: '.',\n    groupSeparator: ',',\n};\nconst WrapperStatistic = withConfigConsumer({\n    prefixCls: 'statistic',\n})(Statistic);\nexport default WrapperStatistic;\n"]},"metadata":{},"sourceType":"module"}