{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport classNames from 'classnames';\n\nvar Col = function Col(props) {\n  var _classNames;\n\n  var child = props.child,\n      bordered = props.bordered,\n      colon = props.colon,\n      type = props.type,\n      layout = props.layout;\n  var _child$props = child.props,\n      prefixCls = _child$props.prefixCls,\n      label = _child$props.label,\n      className = _child$props.className,\n      children = _child$props.children,\n      _child$props$span = _child$props.span,\n      span = _child$props$span === void 0 ? 1 : _child$props$span;\n  var labelProps = {\n    className: classNames(\"\".concat(prefixCls, \"-item-label\"), (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-item-colon\"), colon), _defineProperty(_classNames, \"\".concat(prefixCls, \"-item-no-label\"), !label), _classNames)),\n    key: 'label'\n  };\n\n  if (layout === 'vertical') {\n    labelProps.colSpan = span * 2 - 1;\n  }\n\n  if (bordered) {\n    if (type === 'label') {\n      return React.createElement(\"th\", labelProps, label);\n    }\n\n    return React.createElement(\"td\", {\n      className: classNames(\"\".concat(prefixCls, \"-item-content\"), className),\n      key: \"content\",\n      colSpan: span * 2 - 1\n    }, children);\n  }\n\n  if (layout === 'vertical') {\n    if (type === 'content') {\n      return React.createElement(\"td\", {\n        colSpan: span,\n        className: classNames(\"\".concat(prefixCls, \"-item\"), className)\n      }, React.createElement(\"span\", {\n        className: \"\".concat(prefixCls, \"-item-content\"),\n        key: \"content\"\n      }, children));\n    }\n\n    return React.createElement(\"td\", {\n      colSpan: span,\n      className: classNames(\"\".concat(prefixCls, \"-item\"), className)\n    }, React.createElement(\"span\", {\n      className: classNames(\"\".concat(prefixCls, \"-item-label\"), _defineProperty({}, \"\".concat(prefixCls, \"-item-colon\"), colon)),\n      key: \"label\"\n    }, label));\n  }\n\n  return React.createElement(\"td\", {\n    colSpan: span,\n    className: classNames(\"\".concat(prefixCls, \"-item\"), className)\n  }, React.createElement(\"span\", labelProps, label), React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-item-content\"),\n    key: \"content\"\n  }, children));\n};\n\nexport default Col;","map":{"version":3,"sources":["descriptions/Col.jsx"],"names":["Col","child","bordered","colon","type","layout","props","prefixCls","label","className","children","span","labelProps","classNames","key"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nconst Col = props => {\n    const { child, bordered, colon, type, layout } = props;\n    const { prefixCls, label, className, children, span = 1 } = child.props;\n    const labelProps = {\n        className: classNames(`${prefixCls}-item-label`, {\n            [`${prefixCls}-item-colon`]: colon,\n            [`${prefixCls}-item-no-label`]: !label,\n        }),\n        key: 'label',\n    };\n    if (layout === 'vertical') {\n        labelProps.colSpan = span * 2 - 1;\n    }\n    if (bordered) {\n        if (type === 'label') {\n            return <th {...labelProps}>{label}</th>;\n        }\n        return (<td className={classNames(`${prefixCls}-item-content`, className)} key=\"content\" colSpan={span * 2 - 1}>\n        {children}\n      </td>);\n    }\n    if (layout === 'vertical') {\n        if (type === 'content') {\n            return (<td colSpan={span} className={classNames(`${prefixCls}-item`, className)}>\n          <span className={`${prefixCls}-item-content`} key=\"content\">\n            {children}\n          </span>\n        </td>);\n        }\n        return (<td colSpan={span} className={classNames(`${prefixCls}-item`, className)}>\n        <span className={classNames(`${prefixCls}-item-label`, { [`${prefixCls}-item-colon`]: colon })} key=\"label\">\n          {label}\n        </span>\n      </td>);\n    }\n    return (<td colSpan={span} className={classNames(`${prefixCls}-item`, className)}>\n      <span {...labelProps}>{label}</span>\n      <span className={`${prefixCls}-item-content`} key=\"content\">\n        {children}\n      </span>\n    </td>);\n};\nexport default Col;\n"]},"metadata":{},"sourceType":"module"}