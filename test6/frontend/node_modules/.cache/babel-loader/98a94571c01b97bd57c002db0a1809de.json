{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport * as React from 'react';\nimport RcTree, { TreeNode } from 'rc-tree';\nimport classNames from 'classnames';\nimport DirectoryTree from './DirectoryTree';\nimport Icon from '../icon';\nimport { ConfigConsumer } from '../config-provider';\nimport collapseMotion from '../_util/motion';\n\nvar Tree =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Tree, _React$Component);\n\n  function Tree() {\n    var _this;\n\n    _classCallCheck(this, Tree);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Tree).apply(this, arguments));\n\n    _this.renderSwitcherIcon = function (prefixCls, switcherIcon, _ref) {\n      var isLeaf = _ref.isLeaf,\n          expanded = _ref.expanded,\n          loading = _ref.loading;\n      var showLine = _this.props.showLine;\n\n      if (loading) {\n        return React.createElement(Icon, {\n          type: \"loading\",\n          className: \"\".concat(prefixCls, \"-switcher-loading-icon\")\n        });\n      }\n\n      if (isLeaf) {\n        return showLine ? React.createElement(Icon, {\n          type: \"file\",\n          className: \"\".concat(prefixCls, \"-switcher-line-icon\")\n        }) : null;\n      }\n\n      var switcherCls = \"\".concat(prefixCls, \"-switcher-icon\");\n\n      if (switcherIcon) {\n        return React.cloneElement(switcherIcon, {\n          className: classNames(switcherIcon.props.className || '', switcherCls)\n        });\n      }\n\n      return showLine ? React.createElement(Icon, {\n        type: expanded ? 'minus-square' : 'plus-square',\n        className: \"\".concat(prefixCls, \"-switcher-line-icon\"),\n        theme: \"outlined\"\n      }) : React.createElement(Icon, {\n        type: \"caret-down\",\n        className: switcherCls,\n        theme: \"filled\"\n      });\n    };\n\n    _this.setTreeRef = function (node) {\n      _this.tree = node;\n    };\n\n    _this.renderTree = function (_ref2) {\n      var _classNames;\n\n      var getPrefixCls = _ref2.getPrefixCls;\n\n      var _assertThisInitialize = _assertThisInitialized(_this),\n          props = _assertThisInitialize.props;\n\n      var customizePrefixCls = props.prefixCls,\n          className = props.className,\n          showIcon = props.showIcon,\n          _switcherIcon = props.switcherIcon,\n          blockNode = props.blockNode,\n          children = props.children;\n      var checkable = props.checkable;\n      var prefixCls = getPrefixCls('tree', customizePrefixCls);\n      return React.createElement(RcTree, _extends({\n        ref: _this.setTreeRef\n      }, props, {\n        prefixCls: prefixCls,\n        className: classNames(className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-icon-hide\"), !showIcon), _defineProperty(_classNames, \"\".concat(prefixCls, \"-block-node\"), blockNode), _classNames)),\n        checkable: checkable ? React.createElement(\"span\", {\n          className: \"\".concat(prefixCls, \"-checkbox-inner\")\n        }) : checkable,\n        switcherIcon: function switcherIcon(nodeProps) {\n          return _this.renderSwitcherIcon(prefixCls, _switcherIcon, nodeProps);\n        }\n      }), children);\n    };\n\n    return _this;\n  }\n\n  _createClass(Tree, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ConfigConsumer, null, this.renderTree);\n    }\n  }]);\n\n  return Tree;\n}(React.Component);\n\nexport { Tree as default };\nTree.TreeNode = TreeNode;\nTree.DirectoryTree = DirectoryTree;\nTree.defaultProps = {\n  checkable: false,\n  showIcon: false,\n  motion: _extends(_extends({}, collapseMotion), {\n    motionAppear: false\n  }),\n  blockNode: false\n};","map":{"version":3,"sources":["tree/Tree.jsx"],"names":["Tree","React","Component","isLeaf","expanded","loading","showLine","switcherCls","className","classNames","switcherIcon","getPrefixCls","props","customizePrefixCls","showIcon","blockNode","children","checkable","prefixCls","setTreeRef","motion","motionAppear"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport RcTree, { TreeNode } from 'rc-tree';\nimport classNames from 'classnames';\nimport DirectoryTree from './DirectoryTree';\nimport Icon from '../icon';\nimport { ConfigConsumer } from '../config-provider';\nimport collapseMotion from '../_util/motion';\nexport default class Tree extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.renderSwitcherIcon = (prefixCls, switcherIcon, { isLeaf, expanded, loading }) => {\n            const { showLine } = this.props;\n            if (loading) {\n                return <Icon type=\"loading\" className={`${prefixCls}-switcher-loading-icon`}/>;\n            }\n            if (isLeaf) {\n                return showLine ? <Icon type=\"file\" className={`${prefixCls}-switcher-line-icon`}/> : null;\n            }\n            const switcherCls = `${prefixCls}-switcher-icon`;\n            if (switcherIcon) {\n                return React.cloneElement(switcherIcon, {\n                    className: classNames(switcherIcon.props.className || '', switcherCls),\n                });\n            }\n            return showLine ? (<Icon type={expanded ? 'minus-square' : 'plus-square'} className={`${prefixCls}-switcher-line-icon`} theme=\"outlined\"/>) : (<Icon type=\"caret-down\" className={switcherCls} theme=\"filled\"/>);\n        };\n        this.setTreeRef = (node) => {\n            this.tree = node;\n        };\n        this.renderTree = ({ getPrefixCls }) => {\n            const { props } = this;\n            const { prefixCls: customizePrefixCls, className, showIcon, switcherIcon, blockNode, children, } = props;\n            const { checkable } = props;\n            const prefixCls = getPrefixCls('tree', customizePrefixCls);\n            return (<RcTree ref={this.setTreeRef} {...props} prefixCls={prefixCls} className={classNames(className, {\n                [`${prefixCls}-icon-hide`]: !showIcon,\n                [`${prefixCls}-block-node`]: blockNode,\n            })} checkable={checkable ? <span className={`${prefixCls}-checkbox-inner`}/> : checkable} switcherIcon={(nodeProps) => this.renderSwitcherIcon(prefixCls, switcherIcon, nodeProps)}>\n        {children}\n      </RcTree>);\n        };\n    }\n    render() {\n        return <ConfigConsumer>{this.renderTree}</ConfigConsumer>;\n    }\n}\nTree.TreeNode = TreeNode;\nTree.DirectoryTree = DirectoryTree;\nTree.defaultProps = {\n    checkable: false,\n    showIcon: false,\n    motion: Object.assign(Object.assign({}, collapseMotion), { motionAppear: false }),\n    blockNode: false,\n};\n"]},"metadata":{},"sourceType":"module"}