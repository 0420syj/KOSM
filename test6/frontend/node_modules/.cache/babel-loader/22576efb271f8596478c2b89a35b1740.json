{"ast":null,"code":"import { API_BASE_URL, ACCESS_TOKEN } from '../constants';\n\nconst request = options => {\n  const headers = new Headers({\n    'Content-Type': 'application/json'\n  });\n\n  if (localStorage.getItem(ACCESS_TOKEN)) {\n    headers.append('Authorization', 'Bearer ' + localStorage.getItem(ACCESS_TOKEN));\n  }\n\n  const defaults = {\n    headers: headers\n  };\n  options = Object.assign({}, defaults, options);\n  return fetch(options.url, options).then(response => response.json().then(json => {\n    if (!response.ok) {\n      return Promise.reject(json);\n    }\n\n    return json;\n  }));\n};\n\nconst deleteRequest = options => {\n  const headers = new Headers();\n\n  if (localStorage.getItem(ACCESS_TOKEN)) {\n    headers.append('Authorization', 'Bearer ' + localStorage.getItem(ACCESS_TOKEN));\n  }\n\n  const defaults = {\n    headers: headers\n  };\n  options = Object.assign({}, defaults, options);\n  return fetch(options.url, options);\n};\n\nexport function login(loginRequest) {\n  return request({\n    url: API_BASE_URL + \"/api/auth/signin\",\n    method: 'POST',\n    body: JSON.stringify(loginRequest)\n  });\n}\nexport function signup(signupRequest) {\n  return request({\n    url: API_BASE_URL + \"/api/auth/signup\",\n    method: 'POST',\n    body: JSON.stringify(signupRequest)\n  });\n}\nexport function checkUsernameAvailability(username) {\n  return request({\n    url: API_BASE_URL + \"/user/checkUsernameAvailability?username=\" + username,\n    method: 'GET'\n  });\n}\nexport function checkEmailAvailability(email) {\n  return request({\n    url: API_BASE_URL + \"/user/checkEmailAvailability?email=\" + email,\n    method: 'GET'\n  });\n}\nexport function getCurrentUser() {\n  if (!localStorage.getItem(ACCESS_TOKEN)) {\n    return Promise.reject(\"No access token set.\");\n  }\n\n  return request({\n    url: API_BASE_URL + \"/api/user/me\",\n    method: 'GET'\n  });\n}\nexport function getUserProfile(username) {\n  return request({\n    url: API_BASE_URL + \"/api/users/\" + username,\n    method: 'GET'\n  });\n}\nexport function uploadComment(id, username, comment) {\n  const formData = new FormData();\n  formData.append('user', username);\n  formData.append('comment', comment);\n  return request({\n    url: API_BASE_URL + \"/saveComment/\" + id,\n    method: 'POST',\n    body: formData\n  });\n}\nexport function getComment(id) {\n  return request({\n    url: API_BASE_URL + \"/getComment/\" + id,\n    method: 'GET'\n  });\n}\nexport function deleteComment(id) {\n  return deleteRequest({\n    url: API_BASE_URL + \"/deleteComment/\" + id,\n    method: 'DELETE'\n  });\n}\nexport function fetchRate(id, user) {\n  return request({\n    url: API_BASE_URL + \"/fetchRate/\" + id + \"/\" + user,\n    method: 'GET'\n  });\n}\nexport function getAvgRate(id) {\n  return request({\n    url: API_BASE_URL + \"/getAvgRate/\" + id,\n    method: 'GET'\n  });\n}","map":{"version":3,"sources":["C:/Users/Son/Desktop/test6/test6/frontend/src/util/APIUtils.js"],"names":["API_BASE_URL","ACCESS_TOKEN","request","options","headers","Headers","localStorage","getItem","append","defaults","Object","assign","fetch","url","then","response","json","ok","Promise","reject","deleteRequest","login","loginRequest","method","body","JSON","stringify","signup","signupRequest","checkUsernameAvailability","username","checkEmailAvailability","email","getCurrentUser","getUserProfile","uploadComment","id","comment","formData","FormData","getComment","deleteComment","fetchRate","user","getAvgRate"],"mappings":"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","sourcesContent":["import { API_BASE_URL, ACCESS_TOKEN } from '../constants';\r\n\r\nconst request = (options) => {\r\n    const headers = new Headers({\r\n        'Content-Type' : 'application/json',\r\n    })\r\n\r\n    if(localStorage.getItem(ACCESS_TOKEN)) {\r\n        headers.append('Authorization', 'Bearer ' + localStorage.getItem(ACCESS_TOKEN))\r\n    }\r\n\r\n    const defaults = {headers: headers};\r\n    options = Object.assign({}, defaults, options);\r\n\r\n    return fetch(options.url, options)\r\n    .then(response => \r\n        response.json().then(json => {\r\n            if(!response.ok) {\r\n                return Promise.reject(json);\r\n            }\r\n            return json;\r\n        })\r\n    );\r\n};\r\n\r\n\r\nconst deleteRequest = (options) => {\r\n    const headers = new Headers()\r\n\r\n    if(localStorage.getItem(ACCESS_TOKEN)) {\r\n        headers.append('Authorization', 'Bearer ' + localStorage.getItem(ACCESS_TOKEN))\r\n    }\r\n\r\n    const defaults = {headers: headers};\r\n    options = Object.assign({}, defaults, options);\r\n\r\n    return fetch(options.url, options)\r\n}\r\n\r\n\r\nexport function login(loginRequest) {\r\n    return request({\r\n        url: API_BASE_URL + \"/api/auth/signin\",\r\n        method: 'POST',\r\n        body: JSON.stringify(loginRequest)\r\n    });\r\n}\r\n\r\nexport function signup(signupRequest) {\r\n    return request({\r\n        url: API_BASE_URL + \"/api/auth/signup\",\r\n        method: 'POST',\r\n        body: JSON.stringify(signupRequest)\r\n    });\r\n}\r\n\r\n\r\nexport function checkUsernameAvailability(username) {\r\n    return request({\r\n        url: API_BASE_URL + \"/user/checkUsernameAvailability?username=\" + username,\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function checkEmailAvailability(email) {\r\n    return request({\r\n        url: API_BASE_URL + \"/user/checkEmailAvailability?email=\" + email,\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\n\r\nexport function getCurrentUser() {\r\n    if(!localStorage.getItem(ACCESS_TOKEN)) {\r\n        return Promise.reject(\"No access token set.\");\r\n    }\r\n    return request({\r\n        url: API_BASE_URL + \"/api/user/me\",\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function getUserProfile(username) {\r\n    return request({\r\n        url: API_BASE_URL + \"/api/users/\" + username,\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function uploadComment(id, username, comment){\r\n    const formData = new FormData();\r\n    formData.append('user', username);\r\n    formData.append('comment', comment);\r\n    return request({\r\n        url: API_BASE_URL + \"/saveComment/\" + id,\r\n        method: 'POST',\r\n        body: formData\r\n    });\r\n}\r\n\r\nexport function getComment(id){\r\n    return request({\r\n        url : API_BASE_URL + \"/getComment/\" + id,\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function deleteComment(id) {\r\n    return deleteRequest({\r\n        url: API_BASE_URL + \"/deleteComment/\" + id,\r\n        method: 'DELETE'\r\n    });\r\n}\r\n\r\nexport function fetchRate(id, user){\r\n    return request({\r\n        url : API_BASE_URL + \"/fetchRate/\" + id + \"/\" + user,\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function getAvgRate(id){\r\n    return request({\r\n        url : API_BASE_URL + \"/getAvgRate/\" + id,\r\n        method: 'GET'\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}