{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { polyfill } from 'react-lifecycles-compat';\nimport Menu, { SubMenu, Item as MenuItem } from 'rc-menu';\nimport closest from 'dom-closest';\nimport classNames from 'classnames';\nimport shallowequal from 'shallowequal';\nimport Dropdown from '../dropdown';\nimport Icon from '../icon';\nimport Checkbox from '../checkbox';\nimport Radio from '../radio';\nimport FilterDropdownMenuWrapper from './FilterDropdownMenuWrapper';\nimport { generateValueMaps } from './util';\n\nfunction stopPropagation(e) {\n  e.stopPropagation();\n\n  if (e.nativeEvent.stopImmediatePropagation) {\n    e.nativeEvent.stopImmediatePropagation();\n  }\n}\n\nvar FilterMenu =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FilterMenu, _React$Component);\n\n  function FilterMenu(props) {\n    var _this;\n\n    _classCallCheck(this, FilterMenu);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FilterMenu).call(this, props));\n\n    _this.setNeverShown = function (column) {\n      var rootNode = ReactDOM.findDOMNode(_assertThisInitialized(_this));\n      var filterBelongToScrollBody = !!closest(rootNode, \".ant-table-scroll\");\n\n      if (filterBelongToScrollBody) {\n        // When fixed column have filters, there will be two dropdown menus\n        // Filter dropdown menu inside scroll body should never be shown\n        // To fix https://github.com/ant-design/ant-design/issues/5010 and\n        // https://github.com/ant-design/ant-design/issues/7909\n        _this.neverShown = !!column.fixed;\n      }\n    };\n\n    _this.setSelectedKeys = function (_ref) {\n      var selectedKeys = _ref.selectedKeys;\n\n      _this.setState({\n        selectedKeys: selectedKeys\n      });\n    };\n\n    _this.handleClearFilters = function () {\n      _this.setState({\n        selectedKeys: []\n      }, _this.handleConfirm);\n    };\n\n    _this.handleConfirm = function () {\n      _this.setVisible(false); // Call `setSelectedKeys` & `confirm` in the same time will make filter data not up to date\n      // https://github.com/ant-design/ant-design/issues/12284\n\n\n      _this.setState({}, _this.confirmFilter);\n    };\n\n    _this.onVisibleChange = function (visible) {\n      _this.setVisible(visible);\n\n      var column = _this.props.column; // https://github.com/ant-design/ant-design/issues/17833\n\n      if (!visible && !(column.filterDropdown instanceof Function)) {\n        _this.confirmFilter();\n      }\n    };\n\n    _this.handleMenuItemClick = function (info) {\n      var selectedKeys = _this.state.selectedKeys;\n\n      if (!info.keyPath || info.keyPath.length <= 1) {\n        return;\n      }\n\n      var keyPathOfSelectedItem = _this.state.keyPathOfSelectedItem;\n\n      if (selectedKeys && selectedKeys.indexOf(info.key) >= 0) {\n        // deselect SubMenu child\n        delete keyPathOfSelectedItem[info.key];\n      } else {\n        // select SubMenu child\n        keyPathOfSelectedItem[info.key] = info.keyPath;\n      }\n\n      _this.setState({\n        keyPathOfSelectedItem: keyPathOfSelectedItem\n      });\n    };\n\n    _this.renderFilterIcon = function () {\n      var _classNames;\n\n      var _this$props = _this.props,\n          column = _this$props.column,\n          locale = _this$props.locale,\n          prefixCls = _this$props.prefixCls,\n          selectedKeys = _this$props.selectedKeys;\n      var filtered = selectedKeys && selectedKeys.length > 0;\n      var filterIcon = column.filterIcon;\n\n      if (typeof filterIcon === 'function') {\n        filterIcon = filterIcon(filtered);\n      }\n\n      var dropdownIconClass = classNames((_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-selected\"), filtered), _defineProperty(_classNames, \"\".concat(prefixCls, \"-open\"), _this.getDropdownVisible()), _classNames));\n\n      if (!filterIcon) {\n        return React.createElement(Icon, {\n          title: locale.filterTitle,\n          type: \"filter\",\n          theme: \"filled\",\n          className: dropdownIconClass,\n          onClick: stopPropagation\n        });\n      }\n\n      if (React.isValidElement(filterIcon)) {\n        return React.cloneElement(filterIcon, {\n          title: filterIcon.props.title || locale.filterTitle,\n          className: classNames(\"\".concat(prefixCls, \"-icon\"), dropdownIconClass, filterIcon.props.className),\n          onClick: stopPropagation\n        });\n      }\n\n      return React.createElement(\"span\", {\n        className: classNames(\"\".concat(prefixCls, \"-icon\"), dropdownIconClass)\n      }, filterIcon);\n    };\n\n    var visible = 'filterDropdownVisible' in props.column ? props.column.filterDropdownVisible : false;\n    _this.state = {\n      selectedKeys: props.selectedKeys,\n      valueKeys: generateValueMaps(props.column.filters),\n      keyPathOfSelectedItem: {},\n      visible: visible,\n      prevProps: props\n    };\n    return _this;\n  }\n\n  _createClass(FilterMenu, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var column = this.props.column;\n      this.setNeverShown(column);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var column = this.props.column;\n      this.setNeverShown(column);\n    }\n  }, {\n    key: \"getDropdownVisible\",\n    value: function getDropdownVisible() {\n      return this.neverShown ? false : this.state.visible;\n    }\n  }, {\n    key: \"setVisible\",\n    value: function setVisible(visible) {\n      var column = this.props.column;\n\n      if (!('filterDropdownVisible' in column)) {\n        this.setState({\n          visible: visible\n        });\n      }\n\n      if (column.onFilterDropdownVisibleChange) {\n        column.onFilterDropdownVisibleChange(visible);\n      }\n    }\n  }, {\n    key: \"hasSubMenu\",\n    value: function hasSubMenu() {\n      var _this$props$column$fi = this.props.column.filters,\n          filters = _this$props$column$fi === void 0 ? [] : _this$props$column$fi;\n      return filters.some(function (item) {\n        return !!(item.children && item.children.length > 0);\n      });\n    }\n  }, {\n    key: \"confirmFilter\",\n    value: function confirmFilter() {\n      var _this$props2 = this.props,\n          column = _this$props2.column,\n          propSelectedKeys = _this$props2.selectedKeys,\n          confirmFilter = _this$props2.confirmFilter;\n      var _this$state = this.state,\n          selectedKeys = _this$state.selectedKeys,\n          valueKeys = _this$state.valueKeys;\n      var filterDropdown = column.filterDropdown;\n\n      if (!shallowequal(selectedKeys, propSelectedKeys)) {\n        confirmFilter(column, filterDropdown ? selectedKeys : selectedKeys.map(function (key) {\n          return valueKeys[key];\n        }).filter(function (key) {\n          return key !== undefined;\n        }));\n      }\n    }\n  }, {\n    key: \"renderMenus\",\n    value: function renderMenus(items) {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          dropdownPrefixCls = _this$props3.dropdownPrefixCls,\n          prefixCls = _this$props3.prefixCls;\n      return items.map(function (item) {\n        if (item.children && item.children.length > 0) {\n          var keyPathOfSelectedItem = _this2.state.keyPathOfSelectedItem;\n          var containSelected = Object.keys(keyPathOfSelectedItem).some(function (key) {\n            return keyPathOfSelectedItem[key].indexOf(item.value) >= 0;\n          });\n          var subMenuCls = classNames(\"\".concat(prefixCls, \"-dropdown-submenu\"), _defineProperty({}, \"\".concat(dropdownPrefixCls, \"-submenu-contain-selected\"), containSelected));\n          return React.createElement(SubMenu, {\n            title: item.text,\n            popupClassName: subMenuCls,\n            key: item.value.toString()\n          }, _this2.renderMenus(item.children));\n        }\n\n        return _this2.renderMenuItem(item);\n      });\n    }\n  }, {\n    key: \"renderMenuItem\",\n    value: function renderMenuItem(item) {\n      var column = this.props.column;\n      var selectedKeys = this.state.selectedKeys;\n      var multiple = 'filterMultiple' in column ? column.filterMultiple : true; // We still need trade key as string since Menu render need string\n\n      var internalSelectedKeys = (selectedKeys || []).map(function (key) {\n        return key.toString();\n      });\n      var input = multiple ? React.createElement(Checkbox, {\n        checked: internalSelectedKeys.indexOf(item.value.toString()) >= 0\n      }) : React.createElement(Radio, {\n        checked: internalSelectedKeys.indexOf(item.value.toString()) >= 0\n      });\n      return React.createElement(MenuItem, {\n        key: item.value\n      }, input, React.createElement(\"span\", null, item.text));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var originSelectedKeys = this.state.selectedKeys;\n      var _this$props4 = this.props,\n          column = _this$props4.column,\n          locale = _this$props4.locale,\n          prefixCls = _this$props4.prefixCls,\n          dropdownPrefixCls = _this$props4.dropdownPrefixCls,\n          getPopupContainer = _this$props4.getPopupContainer; // default multiple selection in filter dropdown\n\n      var multiple = 'filterMultiple' in column ? column.filterMultiple : true;\n      var dropdownMenuClass = classNames(_defineProperty({}, \"\".concat(dropdownPrefixCls, \"-menu-without-submenu\"), !this.hasSubMenu()));\n      var filterDropdown = column.filterDropdown;\n\n      if (filterDropdown instanceof Function) {\n        filterDropdown = filterDropdown({\n          prefixCls: \"\".concat(dropdownPrefixCls, \"-custom\"),\n          setSelectedKeys: function setSelectedKeys(selectedKeys) {\n            return _this3.setSelectedKeys({\n              selectedKeys: selectedKeys\n            });\n          },\n          selectedKeys: originSelectedKeys,\n          confirm: this.handleConfirm,\n          clearFilters: this.handleClearFilters,\n          filters: column.filters,\n          visible: this.getDropdownVisible()\n        });\n      }\n\n      var menus = filterDropdown ? React.createElement(FilterDropdownMenuWrapper, {\n        className: \"\".concat(prefixCls, \"-dropdown\")\n      }, filterDropdown) : React.createElement(FilterDropdownMenuWrapper, {\n        className: \"\".concat(prefixCls, \"-dropdown\")\n      }, React.createElement(Menu, {\n        multiple: multiple,\n        onClick: this.handleMenuItemClick,\n        prefixCls: \"\".concat(dropdownPrefixCls, \"-menu\"),\n        className: dropdownMenuClass,\n        onSelect: this.setSelectedKeys,\n        onDeselect: this.setSelectedKeys,\n        selectedKeys: originSelectedKeys && originSelectedKeys.map(function (val) {\n          return val.toString();\n        }),\n        getPopupContainer: getPopupContainer\n      }, this.renderMenus(column.filters)), React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-dropdown-btns\")\n      }, React.createElement(\"a\", {\n        className: \"\".concat(prefixCls, \"-dropdown-link confirm\"),\n        onClick: this.handleConfirm\n      }, locale.filterConfirm), React.createElement(\"a\", {\n        className: \"\".concat(prefixCls, \"-dropdown-link clear\"),\n        onClick: this.handleClearFilters\n      }, locale.filterReset)));\n      return React.createElement(Dropdown, {\n        trigger: ['click'],\n        placement: \"bottomRight\",\n        overlay: menus,\n        visible: this.getDropdownVisible(),\n        onVisibleChange: this.onVisibleChange,\n        getPopupContainer: getPopupContainer,\n        forceRender: true\n      }, this.renderFilterIcon());\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var column = nextProps.column;\n      var prevProps = prevState.prevProps;\n      var newState = {\n        prevProps: nextProps\n      };\n      /**\n       * if the state is visible the component should ignore updates on selectedKeys prop to avoid\n       * that the user selection is lost\n       * this happens frequently when a table is connected on some sort of realtime data\n       * Fixes https://github.com/ant-design/ant-design/issues/10289 and\n       * https://github.com/ant-design/ant-design/issues/10209\n       */\n\n      if ('selectedKeys' in nextProps && !shallowequal(prevProps.selectedKeys, nextProps.selectedKeys)) {\n        newState.selectedKeys = nextProps.selectedKeys;\n      }\n\n      if (!shallowequal((prevProps.column || {}).filters, (nextProps.column || {}).filters)) {\n        newState.valueKeys = generateValueMaps(nextProps.column.filters);\n      }\n\n      if ('filterDropdownVisible' in column) {\n        newState.visible = column.filterDropdownVisible;\n      }\n\n      return newState;\n    }\n  }]);\n\n  return FilterMenu;\n}(React.Component);\n\nFilterMenu.defaultProps = {\n  column: {}\n};\npolyfill(FilterMenu);\nexport default FilterMenu;","map":{"version":3,"sources":["table/filterDropdown.jsx"],"names":["Item","e","FilterMenu","React","Component","rootNode","ReactDOM","filterBelongToScrollBody","closest","column","selectedKeys","info","keyPathOfSelectedItem","locale","prefixCls","filtered","filterIcon","dropdownIconClass","classNames","stopPropagation","title","className","onClick","visible","props","valueKeys","generateValueMaps","prevProps","nextProps","prevState","newState","shallowequal","filters","item","propSelectedKeys","confirmFilter","filterDropdown","key","items","dropdownPrefixCls","containSelected","subMenuCls","multiple","internalSelectedKeys","input","value","originSelectedKeys","getPopupContainer","dropdownMenuClass","setSelectedKeys","confirm","clearFilters","menus","val","handleConfirm","handleClearFilters","polyfill"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { polyfill } from 'react-lifecycles-compat';\nimport Menu, { SubMenu, Item as MenuItem } from 'rc-menu';\nimport closest from 'dom-closest';\nimport classNames from 'classnames';\nimport shallowequal from 'shallowequal';\nimport Dropdown from '../dropdown';\nimport Icon from '../icon';\nimport Checkbox from '../checkbox';\nimport Radio from '../radio';\nimport FilterDropdownMenuWrapper from './FilterDropdownMenuWrapper';\nimport { generateValueMaps } from './util';\nfunction stopPropagation(e) {\n    e.stopPropagation();\n    if (e.nativeEvent.stopImmediatePropagation) {\n        e.nativeEvent.stopImmediatePropagation();\n    }\n}\nclass FilterMenu extends React.Component {\n    constructor(props) {\n        super(props);\n        this.setNeverShown = (column) => {\n            const rootNode = ReactDOM.findDOMNode(this);\n            const filterBelongToScrollBody = !!closest(rootNode, `.ant-table-scroll`);\n            if (filterBelongToScrollBody) {\n                // When fixed column have filters, there will be two dropdown menus\n                // Filter dropdown menu inside scroll body should never be shown\n                // To fix https://github.com/ant-design/ant-design/issues/5010 and\n                // https://github.com/ant-design/ant-design/issues/7909\n                this.neverShown = !!column.fixed;\n            }\n        };\n        this.setSelectedKeys = ({ selectedKeys }) => {\n            this.setState({ selectedKeys: selectedKeys });\n        };\n        this.handleClearFilters = () => {\n            this.setState({\n                selectedKeys: [],\n            }, this.handleConfirm);\n        };\n        this.handleConfirm = () => {\n            this.setVisible(false);\n            // Call `setSelectedKeys` & `confirm` in the same time will make filter data not up to date\n            // https://github.com/ant-design/ant-design/issues/12284\n            this.setState({}, this.confirmFilter);\n        };\n        this.onVisibleChange = (visible) => {\n            this.setVisible(visible);\n            const { column } = this.props;\n            // https://github.com/ant-design/ant-design/issues/17833\n            if (!visible && !(column.filterDropdown instanceof Function)) {\n                this.confirmFilter();\n            }\n        };\n        this.handleMenuItemClick = (info) => {\n            const { selectedKeys } = this.state;\n            if (!info.keyPath || info.keyPath.length <= 1) {\n                return;\n            }\n            const { keyPathOfSelectedItem } = this.state;\n            if (selectedKeys && selectedKeys.indexOf(info.key) >= 0) {\n                // deselect SubMenu child\n                delete keyPathOfSelectedItem[info.key];\n            }\n            else {\n                // select SubMenu child\n                keyPathOfSelectedItem[info.key] = info.keyPath;\n            }\n            this.setState({ keyPathOfSelectedItem });\n        };\n        this.renderFilterIcon = () => {\n            const { column, locale, prefixCls, selectedKeys } = this.props;\n            const filtered = selectedKeys && selectedKeys.length > 0;\n            let filterIcon = column.filterIcon;\n            if (typeof filterIcon === 'function') {\n                filterIcon = filterIcon(filtered);\n            }\n            const dropdownIconClass = classNames({\n                [`${prefixCls}-selected`]: filtered,\n                [`${prefixCls}-open`]: this.getDropdownVisible(),\n            });\n            if (!filterIcon) {\n                return (<Icon title={locale.filterTitle} type=\"filter\" theme=\"filled\" className={dropdownIconClass} onClick={stopPropagation}/>);\n            }\n            if (React.isValidElement(filterIcon)) {\n                return React.cloneElement(filterIcon, {\n                    title: filterIcon.props.title || locale.filterTitle,\n                    className: classNames(`${prefixCls}-icon`, dropdownIconClass, filterIcon.props.className),\n                    onClick: stopPropagation,\n                });\n            }\n            return <span className={classNames(`${prefixCls}-icon`, dropdownIconClass)}>{filterIcon}</span>;\n        };\n        const visible = 'filterDropdownVisible' in props.column ? props.column.filterDropdownVisible : false;\n        this.state = {\n            selectedKeys: props.selectedKeys,\n            valueKeys: generateValueMaps(props.column.filters),\n            keyPathOfSelectedItem: {},\n            visible,\n            prevProps: props,\n        };\n    }\n    static getDerivedStateFromProps(nextProps, prevState) {\n        const { column } = nextProps;\n        const { prevProps } = prevState;\n        const newState = {\n            prevProps: nextProps,\n        };\n        /**\n         * if the state is visible the component should ignore updates on selectedKeys prop to avoid\n         * that the user selection is lost\n         * this happens frequently when a table is connected on some sort of realtime data\n         * Fixes https://github.com/ant-design/ant-design/issues/10289 and\n         * https://github.com/ant-design/ant-design/issues/10209\n         */\n        if ('selectedKeys' in nextProps &&\n            !shallowequal(prevProps.selectedKeys, nextProps.selectedKeys)) {\n            newState.selectedKeys = nextProps.selectedKeys;\n        }\n        if (!shallowequal((prevProps.column || {}).filters, (nextProps.column || {}).filters)) {\n            newState.valueKeys = generateValueMaps(nextProps.column.filters);\n        }\n        if ('filterDropdownVisible' in column) {\n            newState.visible = column.filterDropdownVisible;\n        }\n        return newState;\n    }\n    componentDidMount() {\n        const { column } = this.props;\n        this.setNeverShown(column);\n    }\n    componentDidUpdate() {\n        const { column } = this.props;\n        this.setNeverShown(column);\n    }\n    getDropdownVisible() {\n        return this.neverShown ? false : this.state.visible;\n    }\n    setVisible(visible) {\n        const { column } = this.props;\n        if (!('filterDropdownVisible' in column)) {\n            this.setState({ visible });\n        }\n        if (column.onFilterDropdownVisibleChange) {\n            column.onFilterDropdownVisibleChange(visible);\n        }\n    }\n    hasSubMenu() {\n        const { column: { filters = [] }, } = this.props;\n        return filters.some(item => !!(item.children && item.children.length > 0));\n    }\n    confirmFilter() {\n        const { column, selectedKeys: propSelectedKeys, confirmFilter } = this.props;\n        const { selectedKeys, valueKeys } = this.state;\n        const { filterDropdown } = column;\n        if (!shallowequal(selectedKeys, propSelectedKeys)) {\n            confirmFilter(column, filterDropdown\n                ? selectedKeys\n                : selectedKeys.map(key => valueKeys[key]).filter(key => key !== undefined));\n        }\n    }\n    renderMenus(items) {\n        const { dropdownPrefixCls, prefixCls } = this.props;\n        return items.map(item => {\n            if (item.children && item.children.length > 0) {\n                const { keyPathOfSelectedItem } = this.state;\n                const containSelected = Object.keys(keyPathOfSelectedItem).some(key => keyPathOfSelectedItem[key].indexOf(item.value) >= 0);\n                const subMenuCls = classNames(`${prefixCls}-dropdown-submenu`, {\n                    [`${dropdownPrefixCls}-submenu-contain-selected`]: containSelected,\n                });\n                return (<SubMenu title={item.text} popupClassName={subMenuCls} key={item.value.toString()}>\n            {this.renderMenus(item.children)}\n          </SubMenu>);\n            }\n            return this.renderMenuItem(item);\n        });\n    }\n    renderMenuItem(item) {\n        const { column } = this.props;\n        const { selectedKeys } = this.state;\n        const multiple = 'filterMultiple' in column ? column.filterMultiple : true;\n        // We still need trade key as string since Menu render need string\n        const internalSelectedKeys = (selectedKeys || []).map(key => key.toString());\n        const input = multiple ? (<Checkbox checked={internalSelectedKeys.indexOf(item.value.toString()) >= 0}/>) : (<Radio checked={internalSelectedKeys.indexOf(item.value.toString()) >= 0}/>);\n        return (<MenuItem key={item.value}>\n        {input}\n        <span>{item.text}</span>\n      </MenuItem>);\n    }\n    render() {\n        const { selectedKeys: originSelectedKeys } = this.state;\n        const { column, locale, prefixCls, dropdownPrefixCls, getPopupContainer } = this.props;\n        // default multiple selection in filter dropdown\n        const multiple = 'filterMultiple' in column ? column.filterMultiple : true;\n        const dropdownMenuClass = classNames({\n            [`${dropdownPrefixCls}-menu-without-submenu`]: !this.hasSubMenu(),\n        });\n        let { filterDropdown } = column;\n        if (filterDropdown instanceof Function) {\n            filterDropdown = filterDropdown({\n                prefixCls: `${dropdownPrefixCls}-custom`,\n                setSelectedKeys: (selectedKeys) => this.setSelectedKeys({ selectedKeys }),\n                selectedKeys: originSelectedKeys,\n                confirm: this.handleConfirm,\n                clearFilters: this.handleClearFilters,\n                filters: column.filters,\n                visible: this.getDropdownVisible(),\n            });\n        }\n        const menus = filterDropdown ? (<FilterDropdownMenuWrapper className={`${prefixCls}-dropdown`}>\n        {filterDropdown}\n      </FilterDropdownMenuWrapper>) : (<FilterDropdownMenuWrapper className={`${prefixCls}-dropdown`}>\n        <Menu multiple={multiple} onClick={this.handleMenuItemClick} prefixCls={`${dropdownPrefixCls}-menu`} className={dropdownMenuClass} onSelect={this.setSelectedKeys} onDeselect={this.setSelectedKeys} selectedKeys={originSelectedKeys && originSelectedKeys.map(val => val.toString())} getPopupContainer={getPopupContainer}>\n          {this.renderMenus(column.filters)}\n        </Menu>\n        <div className={`${prefixCls}-dropdown-btns`}>\n          <a className={`${prefixCls}-dropdown-link confirm`} onClick={this.handleConfirm}>\n            {locale.filterConfirm}\n          </a>\n          <a className={`${prefixCls}-dropdown-link clear`} onClick={this.handleClearFilters}>\n            {locale.filterReset}\n          </a>\n        </div>\n      </FilterDropdownMenuWrapper>);\n        return (<Dropdown trigger={['click']} placement=\"bottomRight\" overlay={menus} visible={this.getDropdownVisible()} onVisibleChange={this.onVisibleChange} getPopupContainer={getPopupContainer} forceRender>\n        {this.renderFilterIcon()}\n      </Dropdown>);\n    }\n}\nFilterMenu.defaultProps = {\n    column: {},\n};\npolyfill(FilterMenu);\nexport default FilterMenu;\n"]},"metadata":{},"sourceType":"module"}