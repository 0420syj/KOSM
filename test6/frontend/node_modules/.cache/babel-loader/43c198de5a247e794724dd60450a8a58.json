{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Notification from 'rc-notification';\nimport Icon from '../icon';\nvar defaultDuration = 3;\nvar defaultTop;\nvar messageInstance;\nvar key = 1;\nvar prefixCls = 'ant-message';\nvar transitionName = 'move-up';\nvar getContainer;\nvar maxCount;\n\nfunction getMessageInstance(callback) {\n  if (messageInstance) {\n    callback(messageInstance);\n    return;\n  }\n\n  Notification.newInstance({\n    prefixCls: prefixCls,\n    transitionName: transitionName,\n    style: {\n      top: defaultTop\n    },\n    getContainer: getContainer,\n    maxCount: maxCount\n  }, function (instance) {\n    if (messageInstance) {\n      callback(messageInstance);\n      return;\n    }\n\n    messageInstance = instance;\n    callback(instance);\n  });\n}\n\nfunction notice(args) {\n  var duration = args.duration !== undefined ? args.duration : defaultDuration;\n  var iconType = {\n    info: 'info-circle',\n    success: 'check-circle',\n    error: 'close-circle',\n    warning: 'exclamation-circle',\n    loading: 'loading'\n  }[args.type];\n  var target = args.key || key++;\n  var closePromise = new Promise(function (resolve) {\n    var callback = function callback() {\n      if (typeof args.onClose === 'function') {\n        args.onClose();\n      }\n\n      return resolve(true);\n    };\n\n    getMessageInstance(function (instance) {\n      var iconNode = React.createElement(Icon, {\n        type: iconType,\n        theme: iconType === 'loading' ? 'outlined' : 'filled'\n      });\n      var switchIconNode = iconType ? iconNode : '';\n      instance.notice({\n        key: target,\n        duration: duration,\n        style: {},\n        content: React.createElement(\"div\", {\n          className: \"\".concat(prefixCls, \"-custom-content\").concat(args.type ? \" \".concat(prefixCls, \"-\").concat(args.type) : '')\n        }, args.icon ? args.icon : switchIconNode, React.createElement(\"span\", null, args.content)),\n        onClose: callback\n      });\n    });\n  });\n\n  var result = function result() {\n    if (messageInstance) {\n      messageInstance.removeNotice(target);\n    }\n  };\n\n  result.then = function (filled, rejected) {\n    return closePromise.then(filled, rejected);\n  };\n\n  result.promise = closePromise;\n  return result;\n}\n\nfunction isArgsProps(content) {\n  return Object.prototype.toString.call(content) === '[object Object]' && !!content.content;\n}\n\nvar api = {\n  open: notice,\n  config: function config(options) {\n    if (options.top !== undefined) {\n      defaultTop = options.top;\n      messageInstance = null; // delete messageInstance for new defaultTop\n    }\n\n    if (options.duration !== undefined) {\n      defaultDuration = options.duration;\n    }\n\n    if (options.prefixCls !== undefined) {\n      prefixCls = options.prefixCls;\n    }\n\n    if (options.getContainer !== undefined) {\n      getContainer = options.getContainer;\n    }\n\n    if (options.transitionName !== undefined) {\n      transitionName = options.transitionName;\n      messageInstance = null; // delete messageInstance for new transitionName\n    }\n\n    if (options.maxCount !== undefined) {\n      maxCount = options.maxCount;\n      messageInstance = null;\n    }\n  },\n  destroy: function destroy() {\n    if (messageInstance) {\n      messageInstance.destroy();\n      messageInstance = null;\n    }\n  }\n};\n['success', 'info', 'warning', 'error', 'loading'].forEach(function (type) {\n  api[type] = function (content, duration, onClose) {\n    if (isArgsProps(content)) {\n      return api.open(_extends(_extends({}, content), {\n        type: type\n      }));\n    }\n\n    if (typeof duration === 'function') {\n      onClose = duration;\n      duration = undefined;\n    }\n\n    return api.open({\n      content: content,\n      duration: duration,\n      type: type,\n      onClose: onClose\n    });\n  };\n});\napi.warn = api.warning;\nexport default api;","map":{"version":3,"sources":["message/index.jsx"],"names":["defaultDuration","key","prefixCls","transitionName","callback","Notification","style","top","defaultTop","getContainer","maxCount","messageInstance","duration","args","iconType","info","success","error","warning","loading","target","closePromise","resolve","getMessageInstance","iconNode","switchIconNode","instance","content","onClose","result","Object","api","open","config","options","destroy","isArgsProps","type"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAA,YAAA,MAAA,iBAAA;AACA,OAAA,IAAA,MAAA,SAAA;AACA,IAAIA,eAAe,GAAnB,CAAA;AACA,IAAA,UAAA;AACA,IAAA,eAAA;AACA,IAAIC,GAAG,GAAP,CAAA;AACA,IAAIC,SAAS,GAAb,aAAA;AACA,IAAIC,cAAc,GAAlB,SAAA;AACA,IAAA,YAAA;AACA,IAAA,QAAA;;AACA,SAAA,kBAAA,CAAA,QAAA,EAAsC;AAClC,MAAA,eAAA,EAAqB;AACjBC,IAAAA,QAAQ,CAARA,eAAQ,CAARA;AACA;AACH;;AACDC,EAAAA,YAAY,CAAZA,WAAAA,CAAyB;AACrBH,IAAAA,SAAS,EADY,SAAA;AAErBC,IAAAA,cAAc,EAFO,cAAA;AAGrBG,IAAAA,KAAK,EAAE;AAAEC,MAAAA,GAAG,EAAEC;AAAP,KAHc;AAIrBC,IAAAA,YAAY,EAJS,YAAA;AAKrBC,IAAAA,QAAQ,EAARA;AALqB,GAAzBL,EAMG,UAAA,QAAA,EAAc;AACb,QAAA,eAAA,EAAqB;AACjBD,MAAAA,QAAQ,CAARA,eAAQ,CAARA;AACA;AACH;;AACDO,IAAAA,eAAe,GAAfA,QAAAA;AACAP,IAAAA,QAAQ,CAARA,QAAQ,CAARA;AAZJC,GAAAA;AAcH;;AACD,SAAA,MAAA,CAAA,IAAA,EAAsB;AAClB,MAAMO,QAAQ,GAAGC,IAAI,CAAJA,QAAAA,KAAAA,SAAAA,GAA8BA,IAAI,CAAlCA,QAAAA,GAAjB,eAAA;AACA,MAAMC,QAAQ,GAAG;AACbC,IAAAA,IAAI,EADS,aAAA;AAEbC,IAAAA,OAAO,EAFM,cAAA;AAGbC,IAAAA,KAAK,EAHQ,cAAA;AAIbC,IAAAA,OAAO,EAJM,oBAAA;AAKbC,IAAAA,OAAO,EAAE;AALI,IAMfN,IAAI,CANN,IAAiB,CAAjB;AAOA,MAAMO,MAAM,GAAGP,IAAI,CAAJA,GAAAA,IAAYZ,GAA3B,EAAA;AACA,MAAMoB,YAAY,GAAG,IAAA,OAAA,CAAY,UAAA,OAAA,EAAW;AACxC,QAAMjB,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACnB,UAAI,OAAOS,IAAI,CAAX,OAAA,KAAJ,UAAA,EAAwC;AACpCA,QAAAA,IAAI,CAAJA,OAAAA;AACH;;AACD,aAAOS,OAAO,CAAd,IAAc,CAAd;AAJJ,KAAA;;AAMAC,IAAAA,kBAAkB,CAAC,UAAA,QAAA,EAAY;AAC3B,UAAMC,QAAQ,GAAI,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,QAAA,IAAI,EAAV,QAAA;AAAsB,QAAA,KAAK,EAAEV,QAAQ,KAARA,SAAAA,GAAAA,UAAAA,GAAsC;AAAnE,OAAA,CAAlB;AACA,UAAMW,cAAc,GAAGX,QAAQ,GAAA,QAAA,GAA/B,EAAA;AACAY,MAAAA,QAAQ,CAARA,MAAAA,CAAgB;AACZzB,QAAAA,GAAG,EADS,MAAA;AAEZW,QAAAA,QAAQ,EAFI,QAAA;AAGZN,QAAAA,KAAK,EAHO,EAAA;AAIZqB,QAAAA,OAAO,EAAG,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,UAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,iBAAA,EAAA,MAAA,CAAgCd,IAAI,CAAJA,IAAAA,GAAAA,IAAAA,MAAAA,CAAAA,SAAAA,EAAAA,GAAAA,EAAAA,MAAAA,CAA6BA,IAAI,CAAjCA,IAAAA,CAAAA,GAAhC,EAAA;AAAd,SAAA,EACbA,IAAI,CAAJA,IAAAA,GAAYA,IAAI,CAAhBA,IAAAA,GADa,cAAA,EAEd,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,IAAA,EAAOA,IAAI,CANK,OAMhB,CAFc,CAJE;AAQZe,QAAAA,OAAO,EAAExB;AARG,OAAhBsB;AAHJH,KAAkB,CAAlBA;AAPJ,GAAqB,CAArB;;AAsBA,MAAMM,MAAM,GAAG,SAATA,MAAS,GAAM;AACjB,QAAA,eAAA,EAAqB;AACjBlB,MAAAA,eAAe,CAAfA,YAAAA,CAAAA,MAAAA;AACH;AAHL,GAAA;;AAKAkB,EAAAA,MAAM,CAANA,IAAAA,GAAc,UAAA,MAAA,EAAA,QAAA,EAAA;AAAA,WAAsBR,YAAY,CAAZA,IAAAA,CAAAA,MAAAA,EAAtB,QAAsBA,CAAtB;AAAdQ,GAAAA;;AACAA,EAAAA,MAAM,CAANA,OAAAA,GAAAA,YAAAA;AACA,SAAA,MAAA;AACH;;AACD,SAAA,WAAA,CAAA,OAAA,EAA8B;AAC1B,SAAQC,MAAM,CAANA,SAAAA,CAAAA,QAAAA,CAAAA,IAAAA,CAAAA,OAAAA,MAAAA,iBAAAA,IACJ,CAAC,CAACH,OAAO,CADb,OAAA;AAEH;;AACD,IAAMI,GAAG,GAAG;AACRC,EAAAA,IAAI,EADI,MAAA;AAERC,EAAAA,MAFQ,EAAA,SAAA,MAAA,CAAA,OAAA,EAEQ;AACZ,QAAIC,OAAO,CAAPA,GAAAA,KAAJ,SAAA,EAA+B;AAC3B1B,MAAAA,UAAU,GAAG0B,OAAO,CAApB1B,GAAAA;AACAG,MAAAA,eAAe,GAFY,IAE3BA,CAF2B,CAEH;AAC3B;;AACD,QAAIuB,OAAO,CAAPA,QAAAA,KAAJ,SAAA,EAAoC;AAChClC,MAAAA,eAAe,GAAGkC,OAAO,CAAzBlC,QAAAA;AACH;;AACD,QAAIkC,OAAO,CAAPA,SAAAA,KAAJ,SAAA,EAAqC;AACjChC,MAAAA,SAAS,GAAGgC,OAAO,CAAnBhC,SAAAA;AACH;;AACD,QAAIgC,OAAO,CAAPA,YAAAA,KAAJ,SAAA,EAAwC;AACpCzB,MAAAA,YAAY,GAAGyB,OAAO,CAAtBzB,YAAAA;AACH;;AACD,QAAIyB,OAAO,CAAPA,cAAAA,KAAJ,SAAA,EAA0C;AACtC/B,MAAAA,cAAc,GAAG+B,OAAO,CAAxB/B,cAAAA;AACAQ,MAAAA,eAAe,GAFuB,IAEtCA,CAFsC,CAEd;AAC3B;;AACD,QAAIuB,OAAO,CAAPA,QAAAA,KAAJ,SAAA,EAAoC;AAChCxB,MAAAA,QAAQ,GAAGwB,OAAO,CAAlBxB,QAAAA;AACAC,MAAAA,eAAe,GAAfA,IAAAA;AACH;AAvBG,GAAA;AAyBRwB,EAAAA,OAzBQ,EAAA,SAAA,OAAA,GAyBE;AACN,QAAA,eAAA,EAAqB;AACjBxB,MAAAA,eAAe,CAAfA,OAAAA;AACAA,MAAAA,eAAe,GAAfA,IAAAA;AACH;AACJ;AA9BO,CAAZ;AAgCA,CAAA,SAAA,EAAA,MAAA,EAAA,SAAA,EAAA,OAAA,EAAA,SAAA,EAAA,OAAA,CAA2D,UAAA,IAAA,EAAQ;AAC/DoB,EAAAA,GAAG,CAAHA,IAAG,CAAHA,GAAY,UAAA,OAAA,EAAA,QAAA,EAAA,OAAA,EAAgC;AACxC,QAAIK,WAAW,CAAf,OAAe,CAAf,EAA0B;AACtB,aAAO,GAAG,CAAH,IAAA,CAAS,QAAA,CAAc,QAAA,CAAA,EAAA,EAAd,OAAc,CAAd,EAA0C;AAAEC,QAAAA,IAAI,EAAJA;AAAF,OAA1C,CAAT,CAAP;AACH;;AACD,QAAI,OAAA,QAAA,KAAJ,UAAA,EAAoC;AAChCT,MAAAA,OAAO,GAAPA,QAAAA;AACAhB,MAAAA,QAAQ,GAARA,SAAAA;AACH;;AACD,WAAO,GAAG,CAAH,IAAA,CAAS;AAAEe,MAAAA,OAAO,EAAT,OAAA;AAAWf,MAAAA,QAAQ,EAAnB,QAAA;AAAqByB,MAAAA,IAAI,EAAzB,IAAA;AAA2BT,MAAAA,OAAO,EAAPA;AAA3B,KAAT,CAAP;AARJG,GAAAA;AADJ,CAAA;AAYAA,GAAG,CAAHA,IAAAA,GAAWA,GAAG,CAAdA,OAAAA;AACA,eAAA,GAAA","sourcesContent":["import * as React from 'react';\nimport Notification from 'rc-notification';\nimport Icon from '../icon';\nlet defaultDuration = 3;\nlet defaultTop;\nlet messageInstance;\nlet key = 1;\nlet prefixCls = 'ant-message';\nlet transitionName = 'move-up';\nlet getContainer;\nlet maxCount;\nfunction getMessageInstance(callback) {\n    if (messageInstance) {\n        callback(messageInstance);\n        return;\n    }\n    Notification.newInstance({\n        prefixCls,\n        transitionName,\n        style: { top: defaultTop },\n        getContainer,\n        maxCount,\n    }, (instance) => {\n        if (messageInstance) {\n            callback(messageInstance);\n            return;\n        }\n        messageInstance = instance;\n        callback(instance);\n    });\n}\nfunction notice(args) {\n    const duration = args.duration !== undefined ? args.duration : defaultDuration;\n    const iconType = {\n        info: 'info-circle',\n        success: 'check-circle',\n        error: 'close-circle',\n        warning: 'exclamation-circle',\n        loading: 'loading',\n    }[args.type];\n    const target = args.key || key++;\n    const closePromise = new Promise(resolve => {\n        const callback = () => {\n            if (typeof args.onClose === 'function') {\n                args.onClose();\n            }\n            return resolve(true);\n        };\n        getMessageInstance(instance => {\n            const iconNode = (<Icon type={iconType} theme={iconType === 'loading' ? 'outlined' : 'filled'}/>);\n            const switchIconNode = iconType ? iconNode : '';\n            instance.notice({\n                key: target,\n                duration,\n                style: {},\n                content: (<div className={`${prefixCls}-custom-content${args.type ? ` ${prefixCls}-${args.type}` : ''}`}>\n            {args.icon ? args.icon : switchIconNode}\n            <span>{args.content}</span>\n          </div>),\n                onClose: callback,\n            });\n        });\n    });\n    const result = () => {\n        if (messageInstance) {\n            messageInstance.removeNotice(target);\n        }\n    };\n    result.then = (filled, rejected) => closePromise.then(filled, rejected);\n    result.promise = closePromise;\n    return result;\n}\nfunction isArgsProps(content) {\n    return (Object.prototype.toString.call(content) === '[object Object]' &&\n        !!content.content);\n}\nconst api = {\n    open: notice,\n    config(options) {\n        if (options.top !== undefined) {\n            defaultTop = options.top;\n            messageInstance = null; // delete messageInstance for new defaultTop\n        }\n        if (options.duration !== undefined) {\n            defaultDuration = options.duration;\n        }\n        if (options.prefixCls !== undefined) {\n            prefixCls = options.prefixCls;\n        }\n        if (options.getContainer !== undefined) {\n            getContainer = options.getContainer;\n        }\n        if (options.transitionName !== undefined) {\n            transitionName = options.transitionName;\n            messageInstance = null; // delete messageInstance for new transitionName\n        }\n        if (options.maxCount !== undefined) {\n            maxCount = options.maxCount;\n            messageInstance = null;\n        }\n    },\n    destroy() {\n        if (messageInstance) {\n            messageInstance.destroy();\n            messageInstance = null;\n        }\n    },\n};\n['success', 'info', 'warning', 'error', 'loading'].forEach(type => {\n    api[type] = (content, duration, onClose) => {\n        if (isArgsProps(content)) {\n            return api.open(Object.assign(Object.assign({}, content), { type }));\n        }\n        if (typeof duration === 'function') {\n            onClose = duration;\n            duration = undefined;\n        }\n        return api.open({ content, duration, type, onClose });\n    };\n});\napi.warn = api.warning;\nexport default api;\n"]},"metadata":{},"sourceType":"module"}