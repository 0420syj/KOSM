{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport Icon from '../icon';\nimport { ConfigConsumer } from '../config-provider';\nimport { tuple } from '../_util/type';\nimport Line from './Line';\nimport Circle from './Circle';\nimport { validProgress } from './utils';\nvar ProgressTypes = tuple('line', 'circle', 'dashboard');\nvar ProgressStatuses = tuple('normal', 'exception', 'active', 'success');\n\nvar Progress =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Progress, _React$Component);\n\n  function Progress() {\n    var _this;\n\n    _classCallCheck(this, Progress);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Progress).apply(this, arguments));\n\n    _this.renderProgress = function (_ref) {\n      var _classNames;\n\n      var getPrefixCls = _ref.getPrefixCls;\n\n      var _assertThisInitialize = _assertThisInitialized(_this),\n          props = _assertThisInitialize.props;\n\n      var customizePrefixCls = props.prefixCls,\n          className = props.className,\n          size = props.size,\n          type = props.type,\n          showInfo = props.showInfo,\n          restProps = __rest(props, [\"prefixCls\", \"className\", \"size\", \"type\", \"showInfo\"]);\n\n      var prefixCls = getPrefixCls('progress', customizePrefixCls);\n\n      var progressStatus = _this.getProgressStatus();\n\n      var progressInfo = _this.renderProcessInfo(prefixCls, progressStatus);\n\n      var progress; // Render progress shape\n\n      if (type === 'line') {\n        progress = React.createElement(Line, _extends({}, _this.props, {\n          prefixCls: prefixCls\n        }), progressInfo);\n      } else if (type === 'circle' || type === 'dashboard') {\n        progress = React.createElement(Circle, _extends({}, _this.props, {\n          prefixCls: prefixCls,\n          progressStatus: progressStatus\n        }), progressInfo);\n      }\n\n      var classString = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-\").concat(type === 'dashboard' && 'circle' || type), true), _defineProperty(_classNames, \"\".concat(prefixCls, \"-status-\").concat(progressStatus), true), _defineProperty(_classNames, \"\".concat(prefixCls, \"-show-info\"), showInfo), _defineProperty(_classNames, \"\".concat(prefixCls, \"-\").concat(size), size), _classNames), className);\n      return React.createElement(\"div\", _extends({}, omit(restProps, ['status', 'format', 'trailColor', 'successPercent', 'strokeWidth', 'width', 'gapDegree', 'gapPosition', 'strokeColor', 'strokeLinecap', 'percent']), {\n        className: classString\n      }), progress);\n    };\n\n    return _this;\n  }\n\n  _createClass(Progress, [{\n    key: \"getPercentNumber\",\n    value: function getPercentNumber() {\n      var _this$props = this.props,\n          successPercent = _this$props.successPercent,\n          _this$props$percent = _this$props.percent,\n          percent = _this$props$percent === void 0 ? 0 : _this$props$percent;\n      return parseInt(successPercent !== undefined ? successPercent.toString() : percent.toString(), 10);\n    }\n  }, {\n    key: \"getProgressStatus\",\n    value: function getProgressStatus() {\n      var status = this.props.status;\n\n      if (ProgressStatuses.indexOf(status) < 0 && this.getPercentNumber() >= 100) {\n        return 'success';\n      }\n\n      return status || 'normal';\n    }\n  }, {\n    key: \"renderProcessInfo\",\n    value: function renderProcessInfo(prefixCls, progressStatus) {\n      var _this$props2 = this.props,\n          showInfo = _this$props2.showInfo,\n          format = _this$props2.format,\n          type = _this$props2.type,\n          percent = _this$props2.percent,\n          successPercent = _this$props2.successPercent;\n      if (!showInfo) return null;\n      var text;\n\n      var textFormatter = format || function (percentNumber) {\n        return \"\".concat(percentNumber, \"%\");\n      };\n\n      var iconType = type === 'circle' || type === 'dashboard' ? '' : '-circle';\n\n      if (format || progressStatus !== 'exception' && progressStatus !== 'success') {\n        text = textFormatter(validProgress(percent), validProgress(successPercent));\n      } else if (progressStatus === 'exception') {\n        text = React.createElement(Icon, {\n          type: \"close\".concat(iconType),\n          theme: type === 'line' ? 'filled' : 'outlined'\n        });\n      } else if (progressStatus === 'success') {\n        text = React.createElement(Icon, {\n          type: \"check\".concat(iconType),\n          theme: type === 'line' ? 'filled' : 'outlined'\n        });\n      }\n\n      return React.createElement(\"span\", {\n        className: \"\".concat(prefixCls, \"-text\"),\n        title: typeof text === 'string' ? text : undefined\n      }, text);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ConfigConsumer, null, this.renderProgress);\n    }\n  }]);\n\n  return Progress;\n}(React.Component);\n\nexport { Progress as default };\nProgress.defaultProps = {\n  type: 'line',\n  percent: 0,\n  showInfo: true,\n  trailColor: '#f3f3f3',\n  size: 'default',\n  gapDegree: 0,\n  strokeLinecap: 'round'\n};\nProgress.propTypes = {\n  status: PropTypes.oneOf(ProgressStatuses),\n  type: PropTypes.oneOf(ProgressTypes),\n  showInfo: PropTypes.bool,\n  percent: PropTypes.number,\n  width: PropTypes.number,\n  strokeWidth: PropTypes.number,\n  strokeLinecap: PropTypes.oneOf(['round', 'square']),\n  strokeColor: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  trailColor: PropTypes.string,\n  format: PropTypes.func,\n  gapDegree: PropTypes.number\n};","map":{"version":3,"sources":["progress/progress.jsx"],"names":["__rest","t","Object","e","s","i","p","ProgressTypes","tuple","ProgressStatuses","Progress","React","Component","getPrefixCls","props","customizePrefixCls","className","size","type","showInfo","restProps","prefixCls","progressStatus","progressInfo","progress","classString","classNames","omit","successPercent","percent","parseInt","status","format","textFormatter","iconType","text","validProgress","undefined","trailColor","gapDegree","strokeLinecap","PropTypes","width","strokeWidth","strokeColor","number"],"mappings":"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","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport Icon from '../icon';\nimport { ConfigConsumer } from '../config-provider';\nimport { tuple } from '../_util/type';\nimport Line from './Line';\nimport Circle from './Circle';\nimport { validProgress } from './utils';\nconst ProgressTypes = tuple('line', 'circle', 'dashboard');\nconst ProgressStatuses = tuple('normal', 'exception', 'active', 'success');\nexport default class Progress extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.renderProgress = ({ getPrefixCls }) => {\n            const { props } = this;\n            const { prefixCls: customizePrefixCls, className, size, type, showInfo } = props, restProps = __rest(props, [\"prefixCls\", \"className\", \"size\", \"type\", \"showInfo\"]);\n            const prefixCls = getPrefixCls('progress', customizePrefixCls);\n            const progressStatus = this.getProgressStatus();\n            const progressInfo = this.renderProcessInfo(prefixCls, progressStatus);\n            let progress;\n            // Render progress shape\n            if (type === 'line') {\n                progress = (<Line {...this.props} prefixCls={prefixCls}>\n          {progressInfo}\n        </Line>);\n            }\n            else if (type === 'circle' || type === 'dashboard') {\n                progress = (<Circle {...this.props} prefixCls={prefixCls} progressStatus={progressStatus}>\n          {progressInfo}\n        </Circle>);\n            }\n            const classString = classNames(prefixCls, {\n                [`${prefixCls}-${(type === 'dashboard' && 'circle') || type}`]: true,\n                [`${prefixCls}-status-${progressStatus}`]: true,\n                [`${prefixCls}-show-info`]: showInfo,\n                [`${prefixCls}-${size}`]: size,\n            }, className);\n            return (<div {...omit(restProps, [\n                'status',\n                'format',\n                'trailColor',\n                'successPercent',\n                'strokeWidth',\n                'width',\n                'gapDegree',\n                'gapPosition',\n                'strokeColor',\n                'strokeLinecap',\n                'percent',\n            ])} className={classString}>\n        {progress}\n      </div>);\n        };\n    }\n    getPercentNumber() {\n        const { successPercent, percent = 0 } = this.props;\n        return parseInt(successPercent !== undefined ? successPercent.toString() : percent.toString(), 10);\n    }\n    getProgressStatus() {\n        const { status } = this.props;\n        if (ProgressStatuses.indexOf(status) < 0 && this.getPercentNumber() >= 100) {\n            return 'success';\n        }\n        return status || 'normal';\n    }\n    renderProcessInfo(prefixCls, progressStatus) {\n        const { showInfo, format, type, percent, successPercent } = this.props;\n        if (!showInfo)\n            return null;\n        let text;\n        const textFormatter = format || (percentNumber => `${percentNumber}%`);\n        const iconType = type === 'circle' || type === 'dashboard' ? '' : '-circle';\n        if (format || (progressStatus !== 'exception' && progressStatus !== 'success')) {\n            text = textFormatter(validProgress(percent), validProgress(successPercent));\n        }\n        else if (progressStatus === 'exception') {\n            text = <Icon type={`close${iconType}`} theme={type === 'line' ? 'filled' : 'outlined'}/>;\n        }\n        else if (progressStatus === 'success') {\n            text = <Icon type={`check${iconType}`} theme={type === 'line' ? 'filled' : 'outlined'}/>;\n        }\n        return (<span className={`${prefixCls}-text`} title={typeof text === 'string' ? text : undefined}>\n        {text}\n      </span>);\n    }\n    render() {\n        return <ConfigConsumer>{this.renderProgress}</ConfigConsumer>;\n    }\n}\nProgress.defaultProps = {\n    type: 'line',\n    percent: 0,\n    showInfo: true,\n    trailColor: '#f3f3f3',\n    size: 'default',\n    gapDegree: 0,\n    strokeLinecap: 'round',\n};\nProgress.propTypes = {\n    status: PropTypes.oneOf(ProgressStatuses),\n    type: PropTypes.oneOf(ProgressTypes),\n    showInfo: PropTypes.bool,\n    percent: PropTypes.number,\n    width: PropTypes.number,\n    strokeWidth: PropTypes.number,\n    strokeLinecap: PropTypes.oneOf(['round', 'square']),\n    strokeColor: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    trailColor: PropTypes.string,\n    format: PropTypes.func,\n    gapDegree: PropTypes.number,\n};\n"]},"metadata":{},"sourceType":"module"}