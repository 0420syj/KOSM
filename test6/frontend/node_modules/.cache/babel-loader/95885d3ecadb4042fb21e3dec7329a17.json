{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nexport function flatArray() {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var childrenName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'children';\n  var result = [];\n\n  var loop = function loop(array) {\n    array.forEach(function (item) {\n      if (item[childrenName]) {\n        var newItem = _extends({}, item);\n\n        delete newItem[childrenName];\n        result.push(newItem);\n\n        if (item[childrenName].length > 0) {\n          loop(item[childrenName]);\n        }\n      } else {\n        result.push(item);\n      }\n    });\n  };\n\n  loop(data);\n  return result;\n}\nexport function treeMap(tree, mapper) {\n  var childrenName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'children';\n  return tree.map(function (node, index) {\n    var extra = {};\n\n    if (node[childrenName]) {\n      extra[childrenName] = treeMap(node[childrenName], mapper, childrenName);\n    }\n\n    return _extends(_extends({}, mapper(node, index)), extra);\n  });\n}\nexport function flatFilter(tree, callback) {\n  return tree.reduce(function (acc, node) {\n    if (callback(node)) {\n      acc.push(node);\n    }\n\n    if (node.children) {\n      var children = flatFilter(node.children, callback);\n      acc.push.apply(acc, _toConsumableArray(children));\n    }\n\n    return acc;\n  }, []);\n}\nexport function normalizeColumns(elements) {\n  var columns = [];\n  React.Children.forEach(elements, function (element) {\n    if (!React.isValidElement(element)) {\n      return;\n    }\n\n    var column = _extends({}, element.props);\n\n    if (element.key) {\n      column.key = element.key;\n    }\n\n    if (element.type && element.type.__ANT_TABLE_COLUMN_GROUP) {\n      column.children = normalizeColumns(column.children);\n    }\n\n    columns.push(column);\n  });\n  return columns;\n}\nexport function generateValueMaps(items) {\n  var maps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  (items || []).forEach(function (_ref) {\n    var value = _ref.value,\n        children = _ref.children;\n    maps[value.toString()] = value;\n    generateValueMaps(children, maps);\n  });\n  return maps;\n}","map":{"version":3,"sources":["table/util.jsx"],"names":["data","childrenName","result","loop","array","item","newItem","extra","node","treeMap","mapper","callback","acc","children","flatFilter","columns","React","column","element","normalizeColumns","maps","items","value","generateValueMaps"],"mappings":"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","sourcesContent":["import * as React from 'react';\nexport function flatArray(data = [], childrenName = 'children') {\n    const result = [];\n    const loop = (array) => {\n        array.forEach(item => {\n            if (item[childrenName]) {\n                const newItem = Object.assign({}, item);\n                delete newItem[childrenName];\n                result.push(newItem);\n                if (item[childrenName].length > 0) {\n                    loop(item[childrenName]);\n                }\n            }\n            else {\n                result.push(item);\n            }\n        });\n    };\n    loop(data);\n    return result;\n}\nexport function treeMap(tree, mapper, childrenName = 'children') {\n    return tree.map((node, index) => {\n        const extra = {};\n        if (node[childrenName]) {\n            extra[childrenName] = treeMap(node[childrenName], mapper, childrenName);\n        }\n        return Object.assign(Object.assign({}, mapper(node, index)), extra);\n    });\n}\nexport function flatFilter(tree, callback) {\n    return tree.reduce((acc, node) => {\n        if (callback(node)) {\n            acc.push(node);\n        }\n        if (node.children) {\n            const children = flatFilter(node.children, callback);\n            acc.push(...children);\n        }\n        return acc;\n    }, []);\n}\nexport function normalizeColumns(elements) {\n    const columns = [];\n    React.Children.forEach(elements, element => {\n        if (!React.isValidElement(element)) {\n            return;\n        }\n        const column = Object.assign({}, element.props);\n        if (element.key) {\n            column.key = element.key;\n        }\n        if (element.type && element.type.__ANT_TABLE_COLUMN_GROUP) {\n            column.children = normalizeColumns(column.children);\n        }\n        columns.push(column);\n    });\n    return columns;\n}\nexport function generateValueMaps(items, maps = {}) {\n    (items || []).forEach(({ value, children }) => {\n        maps[value.toString()] = value;\n        generateValueMaps(children, maps);\n    });\n    return maps;\n}\n"]},"metadata":{},"sourceType":"module"}