{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Son\\\\Desktop\\\\test6\\\\test6\\\\frontend\\\\src\\\\signup\\\\SignUp.js\";\nimport React, { Component, useState } from 'react';\nimport { signup, checkUsernameAvailability, checkEmailAvailability } from '../util/APIUtils';\nimport './SignUp.scss';\nimport axios from 'axios';\nimport { Form, Input, Button, notification } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { NAME_MIN_LENGTH, NAME_MAX_LENGTH, USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH, EMAIL_MAX_LENGTH, PASSWORD_MIN_LENGTH, PASSWORD_MAX_LENGTH } from '../constants';\n\nclass Signup extends Component {\n  constructor(props) {\n    super(props);\n\n    this.validateName = name => {\n      if (name.length < NAME_MIN_LENGTH) {\n        return {\n          validateStatus: 'error',\n          errorMsg: `너무 짧습니다. 최소 ${NAME_MIN_LENGTH} 글자 이상 입력해주세요.`\n        };\n      } else if (name.length > NAME_MAX_LENGTH) {\n        return {\n          validationStatus: 'error',\n          errorMsg: `너무 깁니다. 최대 ${NAME_MAX_LENGTH} 글자 이하로 입력해주세요.`\n        };\n      } else {\n        return {\n          validateStatus: 'success',\n          errorMsg: null\n        };\n      }\n    };\n\n    this.validateEmail = email => {\n      if (!email) {\n        return {\n          validateStatus: 'error',\n          errorMsg: 'Email는 비워둘 수 없습니다.'\n        };\n      }\n\n      const EMAIL_REGEX = RegExp('[^@ ]+@[^@ ]+\\\\.[^@ ]+');\n\n      if (!EMAIL_REGEX.test(email)) {\n        return {\n          validateStatus: 'error',\n          errorMsg: '유효한 Email이 아닙니다.'\n        };\n      }\n\n      if (email.length > EMAIL_MAX_LENGTH) {\n        return {\n          validateStatus: 'error',\n          errorMsg: `너무 깁니다. 최대 (Maximum ${EMAIL_MAX_LENGTH} 이하로 입력해주세요.`\n        };\n      }\n\n      return {\n        validateStatus: null,\n        errorMsg: null\n      };\n    };\n\n    this.validateUsername = username => {\n      if (username.length < USERNAME_MIN_LENGTH) {\n        return {\n          validateStatus: 'error',\n          errorMsg: `너무 짧습니다. 최소 ${USERNAME_MIN_LENGTH} 글자 이상 입력해주세요.`\n        };\n      } else if (username.length > USERNAME_MAX_LENGTH) {\n        return {\n          validationStatus: 'error',\n          errorMsg: `너무 깁니다. 최대 ${USERNAME_MAX_LENGTH} 글자 이하로 입력해주세요.`\n        };\n      } else {\n        return {\n          validateStatus: null,\n          errorMsg: null\n        };\n      }\n    };\n\n    this.validatePassword = password => {\n      if (password.length < PASSWORD_MIN_LENGTH) {\n        return {\n          validateStatus: 'error',\n          errorMsg: `너무 짧습니다. 최소 ${PASSWORD_MIN_LENGTH} 글자 이상 입력해주세요.`\n        };\n      } else if (password.length > PASSWORD_MAX_LENGTH) {\n        return {\n          validationStatus: 'error',\n          errorMsg: `너무 깁니다. 최대 ${PASSWORD_MAX_LENGTH} 글자 이하로 입력해주세요.`\n        };\n      } else {\n        return {\n          validateStatus: 'success',\n          errorMsg: null\n        };\n      }\n    };\n\n    this.state = {\n      name: {\n        value: ''\n      },\n      username: {\n        value: ''\n      },\n      email: {\n        value: ''\n      },\n      password: {\n        value: ''\n      }\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.validateUsernameAvailability = this.validateUsernameAvailability.bind(this);\n    this.validateEmailAvailability = this.validateEmailAvailability.bind(this); //this.isFormInvalid = this.isFormInvalid.bind(this);\n  }\n\n  handleInputChange(event, validationFun) {\n    const target = event.target;\n    const inputName = target.name;\n    const inputValue = target.value;\n    this.setState({\n      [inputName]: {\n        value: inputValue,\n        ...validationFun(inputValue)\n      }\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const signupRequest = {\n      email: this.state.email.value,\n      username: this.state.username.value,\n      password: this.state.password.value\n    };\n    /*\r\n    axios.post(\"http://localhost:5000/api/auth/signup\", {\r\n        \"username\": userInfo.username,\r\n        \"email\": userInfo.email,\r\n        \"password\": userInfo.password\r\n    })*/\n\n    signup(signupRequest).then(res => {\n      notification.success({\n        message: 'Cheeze Toon',\n        description: \"성공적으로 회원가입되었습니다. 로그인을 해주세요.\"\n      });\n      this.props.history.push(\"/login\");\n    }, error => {\n      notification.error({\n        message: 'Cheeze Toon',\n        description: error.message || '다시 시도해주세요.'\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"signUpScreen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"signUpContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"signUpTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"\\uD68C\\uC6D0\\uAC00\\uC785\"), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      className: \"signUpForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"signUpFormContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"signUpSubTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"\\uC774\\uB984\"), React.createElement(\"input\", {\n      onChange: event => this.handleInputChange(event, this.validateName),\n      type: \"text\",\n      name: \"name\",\n      className: \"signUpSubInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"signUpFormContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"signUpSubTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"\\uB2C9\\uB124\\uC784\"), React.createElement(\"input\", {\n      onChange: event => this.handleInputChange(event, this.validateName),\n      type: \"text\",\n      name: \"username\",\n      className: \"signUpSubInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"signUpFormContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"signUpSubTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"\\uC774\\uBA54\\uC77C\"), React.createElement(\"input\", {\n      onChange: event => this.handleInputChange(event, this.validateName),\n      type: \"text\",\n      name: \"email\",\n      className: \"signUpSubInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"signUpFormContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"signUpSubTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"\\uBE44\\uBC00\\uBC88\\uD638\"), React.createElement(\"input\", {\n      onChange: event => this.handleInputChange(event, this.validateName),\n      type: \"password\",\n      name: \"password\",\n      className: \"signUpSubInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"signUpButtonContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"signUpButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"\\uD68C\\uC6D0\\uAC00\\uC785\")))));\n  } // Validation Functions\n\n\n  validateUsernameAvailability() {\n    // First check for client side errors in username\n    const usernameValue = this.state.username.value;\n    const usernameValidation = this.validateUsername(usernameValue);\n\n    if (usernameValidation.validateStatus === 'error') {\n      this.setState({\n        username: {\n          value: usernameValue,\n          ...usernameValidation\n        }\n      });\n      return;\n    }\n\n    this.setState({\n      username: {\n        value: usernameValue,\n        validateStatus: 'validating',\n        errorMsg: null\n      }\n    });\n    checkUsernameAvailability(usernameValue).then(response => {\n      if (response.available) {\n        this.setState({\n          username: {\n            value: usernameValue,\n            validateStatus: 'success',\n            errorMsg: null\n          }\n        });\n      } else {\n        this.setState({\n          username: {\n            value: usernameValue,\n            validateStatus: 'error',\n            errorMsg: '이미 존재하는 Username 입니다.'\n          }\n        });\n      }\n    }).catch(error => {\n      // Marking validateStatus as success, Form will be recchecked at server\n      this.setState({\n        username: {\n          value: usernameValue,\n          validateStatus: 'success',\n          errorMsg: null\n        }\n      });\n    });\n  }\n\n  validateEmailAvailability() {\n    // First check for client side errors in email\n    const emailValue = this.state.email.value;\n    const emailValidation = this.validateEmail(emailValue);\n\n    if (emailValidation.validateStatus === 'error') {\n      this.setState({\n        email: {\n          value: emailValue,\n          ...emailValidation\n        }\n      });\n      return;\n    }\n\n    this.setState({\n      email: {\n        value: emailValue,\n        validateStatus: 'validating',\n        errorMsg: null\n      }\n    });\n    checkEmailAvailability(emailValue).then(response => {\n      if (response.available) {\n        this.setState({\n          email: {\n            value: emailValue,\n            validateStatus: 'success',\n            errorMsg: null\n          }\n        });\n      } else {\n        this.setState({\n          email: {\n            value: emailValue,\n            validateStatus: 'error',\n            errorMsg: '이미 존재하는 Email 입니다. '\n          }\n        });\n      }\n    }).catch(error => {\n      // Marking validateStatus as success, Form will be recchecked at server\n      this.setState({\n        email: {\n          value: emailValue,\n          validateStatus: 'success',\n          errorMsg: null\n        }\n      });\n    });\n  }\n\n}\n\nexport default Signup;","map":{"version":3,"sources":["C:/Users/Son/Desktop/test6/test6/frontend/src/signup/SignUp.js"],"names":["React","Component","useState","signup","checkUsernameAvailability","checkEmailAvailability","axios","Form","Input","Button","notification","Link","NAME_MIN_LENGTH","NAME_MAX_LENGTH","USERNAME_MIN_LENGTH","USERNAME_MAX_LENGTH","EMAIL_MAX_LENGTH","PASSWORD_MIN_LENGTH","PASSWORD_MAX_LENGTH","Signup","constructor","props","validateName","name","length","validateStatus","errorMsg","validationStatus","validateEmail","email","EMAIL_REGEX","RegExp","test","validateUsername","username","validatePassword","password","state","value","handleInputChange","bind","handleSubmit","validateUsernameAvailability","validateEmailAvailability","event","validationFun","target","inputName","inputValue","setState","e","preventDefault","signupRequest","then","res","success","message","description","history","push","error","render","usernameValue","usernameValidation","response","available","catch","emailValue","emailValidation"],"mappings":"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","sourcesContent":["import React, {Component, useState} from 'react';\r\nimport { signup, checkUsernameAvailability, checkEmailAvailability } from '../util/APIUtils';\r\nimport './SignUp.scss';\r\nimport axios from 'axios';\r\nimport { Form, Input, Button, notification } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\nimport { \r\n    NAME_MIN_LENGTH, NAME_MAX_LENGTH, \r\n    USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH,\r\n    EMAIL_MAX_LENGTH,\r\n    PASSWORD_MIN_LENGTH, PASSWORD_MAX_LENGTH\r\n} from '../constants';\r\n\r\nclass Signup extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: {\r\n                value: ''\r\n            },\r\n            username: {\r\n                value: ''\r\n            },\r\n            email: {\r\n                value: ''\r\n            },\r\n            password: {\r\n                value: ''\r\n            }\r\n        }\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.validateUsernameAvailability = this.validateUsernameAvailability.bind(this);\r\n        this.validateEmailAvailability = this.validateEmailAvailability.bind(this);\r\n        //this.isFormInvalid = this.isFormInvalid.bind(this);\r\n    }\r\n\r\n    handleInputChange(event, validationFun) {\r\n        const target = event.target;\r\n        const inputName = target.name;        \r\n        const inputValue = target.value;\r\n\r\n        this.setState({\r\n            [inputName] : {\r\n                value: inputValue,\r\n                ...validationFun(inputValue)\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        const signupRequest = {\r\n            email: this.state.email.value,\r\n            username: this.state.username.value,\r\n            password: this.state.password.value\r\n        };\r\n        /*\r\n        axios.post(\"http://localhost:5000/api/auth/signup\", {\r\n            \"username\": userInfo.username,\r\n            \"email\": userInfo.email,\r\n            \"password\": userInfo.password\r\n        })*/\r\n        signup(signupRequest)\r\n            .then(res => {\r\n                notification.success({\r\n                    message: 'Cheeze Toon',\r\n                    description: \"성공적으로 회원가입되었습니다. 로그인을 해주세요.\",\r\n                });          \r\n                this.props.history.push(\"/login\");  \r\n            },(error) => {\r\n                notification.error({\r\n                    message: 'Cheeze Toon',\r\n                    description: error.message || '다시 시도해주세요.'\r\n                });\r\n            });\r\n    }\r\n    render(){\r\n    return (\r\n        <div className='signUpScreen'>\r\n            <div className='signUpContainer'>\r\n                <div className='signUpTitle'>회원가입</div>\r\n                <form onSubmit={this.handleSubmit} className='signUpForm'>\r\n                    <div className='signUpFormContainer'>\r\n                        <div className='signUpSubTitle'>이름</div>\r\n                        <input onChange={(event) => this.handleInputChange(event, this.validateName)} type='text' name='name' className='signUpSubInput'/>\r\n                    </div>\r\n                    <div className='signUpFormContainer'>\r\n                        <div className='signUpSubTitle'>닉네임</div>\r\n                        <input  onChange={(event) => this.handleInputChange(event, this.validateName)} type='text' name='username' className='signUpSubInput'/>\r\n                    </div>\r\n                    <div className='signUpFormContainer'>\r\n                        <div className='signUpSubTitle'>이메일</div>\r\n                        <input  onChange={(event) => this.handleInputChange(event, this.validateName)} type='text' name='email' className='signUpSubInput'/>\r\n                    </div>\r\n                    <div className='signUpFormContainer'>\r\n                        <div className='signUpSubTitle'>비밀번호</div>\r\n                        <input  onChange={(event) => this.handleInputChange(event, this.validateName)} type='password' name='password' className='signUpSubInput'/>\r\n                    </div>\r\n                    <div className='signUpButtonContainer'>\r\n                        <button type='submit' className='signUpButton'>회원가입</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n    }\r\n\r\n     // Validation Functions\r\n\r\n     validateName = (name) => {\r\n        if(name.length < NAME_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `너무 짧습니다. 최소 ${NAME_MIN_LENGTH} 글자 이상 입력해주세요.`\r\n            }\r\n        } else if (name.length > NAME_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `너무 깁니다. 최대 ${NAME_MAX_LENGTH} 글자 이하로 입력해주세요.`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: 'success',\r\n                errorMsg: null,\r\n              };            \r\n        }\r\n    }\r\n\r\n    validateEmail = (email) => {\r\n        if(!email) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: 'Email는 비워둘 수 없습니다.'                \r\n            }\r\n        }\r\n\r\n        const EMAIL_REGEX = RegExp('[^@ ]+@[^@ ]+\\\\.[^@ ]+');\r\n        if(!EMAIL_REGEX.test(email)) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: '유효한 Email이 아닙니다.'\r\n            }\r\n        }\r\n\r\n        if(email.length > EMAIL_MAX_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `너무 깁니다. 최대 (Maximum ${EMAIL_MAX_LENGTH} 이하로 입력해주세요.`\r\n            }\r\n        }\r\n\r\n        return {\r\n            validateStatus: null,\r\n            errorMsg: null\r\n        }\r\n    }\r\n\r\n    validateUsername = (username) => {\r\n        if(username.length < USERNAME_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `너무 짧습니다. 최소 ${USERNAME_MIN_LENGTH} 글자 이상 입력해주세요.`\r\n            }\r\n        } else if (username.length > USERNAME_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `너무 깁니다. 최대 ${USERNAME_MAX_LENGTH} 글자 이하로 입력해주세요.`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: null,\r\n                errorMsg: null\r\n            }\r\n        }\r\n    }\r\n\r\n    validateUsernameAvailability() {\r\n        // First check for client side errors in username\r\n        const usernameValue = this.state.username.value;\r\n        const usernameValidation = this.validateUsername(usernameValue);\r\n\r\n        if(usernameValidation.validateStatus === 'error') {\r\n            this.setState({\r\n                username: {\r\n                    value: usernameValue,\r\n                    ...usernameValidation\r\n                }\r\n            });\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            username: {\r\n                value: usernameValue,\r\n                validateStatus: 'validating',\r\n                errorMsg: null\r\n            }\r\n        });\r\n\r\n        checkUsernameAvailability(usernameValue)\r\n        .then(response => {\r\n            if(response.available) {\r\n                this.setState({\r\n                    username: {\r\n                        value: usernameValue,\r\n                        validateStatus: 'success',\r\n                        errorMsg: null\r\n                    }\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    username: {\r\n                        value: usernameValue,\r\n                        validateStatus: 'error',\r\n                        errorMsg: '이미 존재하는 Username 입니다.'\r\n                    }\r\n                });\r\n            }\r\n        }).catch(error => {\r\n            // Marking validateStatus as success, Form will be recchecked at server\r\n            this.setState({\r\n                username: {\r\n                    value: usernameValue,\r\n                    validateStatus: 'success',\r\n                    errorMsg: null\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    validateEmailAvailability() {\r\n        // First check for client side errors in email\r\n        const emailValue = this.state.email.value;\r\n        const emailValidation = this.validateEmail(emailValue);\r\n\r\n        if(emailValidation.validateStatus === 'error') {\r\n            this.setState({\r\n                email: {\r\n                    value: emailValue,\r\n                    ...emailValidation\r\n                }\r\n            });    \r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            email: {\r\n                value: emailValue,\r\n                validateStatus: 'validating',\r\n                errorMsg: null\r\n            }\r\n        });\r\n\r\n        checkEmailAvailability(emailValue)\r\n        .then(response => {\r\n            if(response.available) {\r\n                this.setState({\r\n                    email: {\r\n                        value: emailValue,\r\n                        validateStatus: 'success',\r\n                        errorMsg: null\r\n                    }\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    email: {\r\n                        value: emailValue,\r\n                        validateStatus: 'error',\r\n                        errorMsg: '이미 존재하는 Email 입니다. '\r\n                    }\r\n                });\r\n            }\r\n        }).catch(error => {\r\n            // Marking validateStatus as success, Form will be recchecked at server\r\n            this.setState({\r\n                email: {\r\n                    value: emailValue,\r\n                    validateStatus: 'success',\r\n                    errorMsg: null\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    validatePassword = (password) => {\r\n        if(password.length < PASSWORD_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `너무 짧습니다. 최소 ${PASSWORD_MIN_LENGTH} 글자 이상 입력해주세요.`\r\n            }\r\n        } else if (password.length > PASSWORD_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `너무 깁니다. 최대 ${PASSWORD_MAX_LENGTH} 글자 이하로 입력해주세요.`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: 'success',\r\n                errorMsg: null,\r\n            };            \r\n        }\r\n    }\r\n\r\n}\r\nexport default Signup;"]},"metadata":{},"sourceType":"module"}