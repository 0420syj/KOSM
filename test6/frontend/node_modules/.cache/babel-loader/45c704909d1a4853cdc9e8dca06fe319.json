{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nexport default function createStore(initialState) {\n  var state = initialState;\n  var listeners = [];\n\n  function setState(partial) {\n    state = _extends(_extends({}, state), partial);\n\n    for (var i = 0; i < listeners.length; i++) {\n      listeners[i]();\n    }\n  }\n\n  function getState() {\n    return state;\n  }\n\n  function subscribe(listener) {\n    listeners.push(listener);\n    return function unsubscribe() {\n      var index = listeners.indexOf(listener);\n      listeners.splice(index, 1);\n    };\n  }\n\n  return {\n    setState: setState,\n    getState: getState,\n    subscribe: subscribe\n  };\n}","map":{"version":3,"sources":["table/createStore.jsx"],"names":["state","listeners","i","index","setState","getState","subscribe"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,eAAe,SAAA,WAAA,CAAA,YAAA,EAAmC;AAC9C,MAAIA,KAAK,GAAT,YAAA;AACA,MAAMC,SAAS,GAAf,EAAA;;AACA,WAAA,QAAA,CAAA,OAAA,EAA2B;AACvBD,IAAAA,KAAK,GAAG,QAAA,CAAc,QAAA,CAAA,EAAA,EAAd,KAAc,CAAd,EAARA,OAAQ,CAARA;;AACA,SAAK,IAAIE,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGD,SAAS,CAA7B,MAAA,EAAsCC,CAAtC,EAAA,EAA2C;AACvCD,MAAAA,SAAS,CAATA,CAAS,CAATA;AACH;AACJ;;AACD,WAAA,QAAA,GAAoB;AAChB,WAAA,KAAA;AACH;;AACD,WAAA,SAAA,CAAA,QAAA,EAA6B;AACzBA,IAAAA,SAAS,CAATA,IAAAA,CAAAA,QAAAA;AACA,WAAO,SAAA,WAAA,GAAuB;AAC1B,UAAME,KAAK,GAAGF,SAAS,CAATA,OAAAA,CAAd,QAAcA,CAAd;AACAA,MAAAA,SAAS,CAATA,MAAAA,CAAAA,KAAAA,EAAAA,CAAAA;AAFJ,KAAA;AAIH;;AACD,SAAO;AACHG,IAAAA,QAAQ,EADL,QAAA;AAEHC,IAAAA,QAAQ,EAFL,QAAA;AAGHC,IAAAA,SAAS,EAATA;AAHG,GAAP;AAKH","sourcesContent":["export default function createStore(initialState) {\n    let state = initialState;\n    const listeners = [];\n    function setState(partial) {\n        state = Object.assign(Object.assign({}, state), partial);\n        for (let i = 0; i < listeners.length; i++) {\n            listeners[i]();\n        }\n    }\n    function getState() {\n        return state;\n    }\n    function subscribe(listener) {\n        listeners.push(listener);\n        return function unsubscribe() {\n            const index = listeners.indexOf(listener);\n            listeners.splice(index, 1);\n        };\n    }\n    return {\n        setState,\n        getState,\n        subscribe,\n    };\n}\n"]},"metadata":{},"sourceType":"module"}