{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport * as React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport Animate from 'rc-animate';\nimport raf from '../_util/raf';\nimport { tuple } from '../_util/type';\nimport ListItem from './ListItem';\nexport var OmitProps = tuple('handleFilter', 'handleSelect', 'handleSelectAll', 'handleClear', 'body', 'checkedKeys');\n\nvar ListBody =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ListBody, _React$Component);\n\n  function ListBody() {\n    var _this;\n\n    _classCallCheck(this, ListBody);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ListBody).apply(this, arguments));\n    _this.state = {\n      mounted: false\n    };\n\n    _this.onItemSelect = function (item) {\n      var _this$props = _this.props,\n          onItemSelect = _this$props.onItemSelect,\n          selectedKeys = _this$props.selectedKeys;\n      var checked = selectedKeys.indexOf(item.key) >= 0;\n      onItemSelect(item.key, !checked);\n    };\n\n    return _this;\n  }\n\n  _createClass(ListBody, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.mountId = raf(function () {\n        _this2.setState({\n          mounted: true\n        });\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props2 = this.props,\n          filteredRenderItems = _this$props2.filteredRenderItems,\n          lazy = _this$props2.lazy;\n\n      if (prevProps.filteredRenderItems.length !== filteredRenderItems.length && lazy !== false) {\n        // TODO: Replace this with ref when react 15 support removed.\n        var container = findDOMNode(this);\n        raf.cancel(this.lazyId);\n        this.lazyId = raf(function () {\n          if (container) {\n            var scrollEvent = new Event('scroll', {\n              bubbles: true\n            });\n            container.dispatchEvent(scrollEvent);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      raf.cancel(this.mountId);\n      raf.cancel(this.lazyId);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var mounted = this.state.mounted;\n      var _this$props3 = this.props,\n          prefixCls = _this$props3.prefixCls,\n          onScroll = _this$props3.onScroll,\n          filteredRenderItems = _this$props3.filteredRenderItems,\n          lazy = _this$props3.lazy,\n          selectedKeys = _this$props3.selectedKeys,\n          globalDisabled = _this$props3.disabled;\n      return React.createElement(Animate, {\n        component: \"ul\",\n        componentProps: {\n          onScroll: onScroll\n        },\n        className: \"\".concat(prefixCls, \"-content\"),\n        transitionName: mounted ? \"\".concat(prefixCls, \"-content-item-highlight\") : '',\n        transitionLeave: false\n      }, filteredRenderItems.map(function (_ref) {\n        var renderedEl = _ref.renderedEl,\n            renderedText = _ref.renderedText,\n            item = _ref.item;\n        var disabled = item.disabled;\n        var checked = selectedKeys.indexOf(item.key) >= 0;\n        return React.createElement(ListItem, {\n          disabled: globalDisabled || disabled,\n          key: item.key,\n          item: item,\n          lazy: lazy,\n          renderedText: renderedText,\n          renderedEl: renderedEl,\n          checked: checked,\n          prefixCls: prefixCls,\n          onClick: _this3.onItemSelect\n        });\n      }));\n    }\n  }]);\n\n  return ListBody;\n}(React.Component);\n\nvar ListBodyWrapper = function ListBodyWrapper(props) {\n  return React.createElement(ListBody, props);\n};\n\nexport default ListBodyWrapper;","map":{"version":3,"sources":["transfer/renderListBody.jsx"],"names":["OmitProps","tuple","ListBody","React","Component","mounted","onItemSelect","selectedKeys","checked","item","raf","prevProps","filteredRenderItems","lazy","container","findDOMNode","scrollEvent","bubbles","prefixCls","onScroll","globalDisabled","renderedEl","renderedText","disabled","ListBodyWrapper"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,WAAA,QAAA,WAAA;AACA,OAAA,OAAA,MAAA,YAAA;AACA,OAAA,GAAA,MAAA,cAAA;AACA,SAAA,KAAA,QAAA,eAAA;AACA,OAAA,QAAA,MAAA,YAAA;AACA,OAAO,IAAMA,SAAS,GAAGC,KAAK,CAAA,cAAA,EAAA,cAAA,EAAA,iBAAA,EAAA,aAAA,EAAA,MAAA,EAAvB,aAAuB,CAAvB;;IACDC,Q;;;;;AACF,WAAA,QAAA,GAAc;AAAA,QAAA,KAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,CAAA;;AACV,IAAA,KAAA,GAAA,0BAAA,CAAA,IAAA,EAAA,eAAA,CAAA,QAAA,CAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;AACA,IAAA,KAAA,CAAA,KAAA,GAAa;AACTG,MAAAA,OAAO,EAAE;AADA,KAAb;;AAGA,IAAA,KAAA,CAAA,YAAA,GAAoB,UAAA,IAAA,EAAU;AAAA,UAAA,WAAA,GACa,KAAA,CADb,KAAA;AAAA,UAClBC,YADkB,GAAA,WAAA,CAAA,YAAA;AAAA,UACJC,YADI,GAAA,WAAA,CAAA,YAAA;AAE1B,UAAMC,OAAO,GAAGD,YAAY,CAAZA,OAAAA,CAAqBE,IAAI,CAAzBF,GAAAA,KAAhB,CAAA;AACAD,MAAAA,YAAY,CAACG,IAAI,CAAL,GAAA,EAAW,CAAvBH,OAAY,CAAZA;AAHJ,KAAA;;AALU,WAAA,KAAA;AAUb;;;;wCACmB;AAAA,UAAA,MAAA,GAAA,IAAA;;AAChB,WAAA,OAAA,GAAeI,GAAG,CAAC,YAAM;AACrB,QAAA,MAAI,CAAJ,QAAA,CAAc;AAAEL,UAAAA,OAAO,EAAE;AAAX,SAAd;AADJ,OAAkB,CAAlB;AAGH;;;uCACkBM,S,EAAW;AAAA,UAAA,YAAA,GACY,KADZ,KAAA;AAAA,UAClBC,mBADkB,GAAA,YAAA,CAAA,mBAAA;AAAA,UACGC,IADH,GAAA,YAAA,CAAA,IAAA;;AAE1B,UAAIF,SAAS,CAATA,mBAAAA,CAAAA,MAAAA,KAAyCC,mBAAmB,CAA5DD,MAAAA,IAAuEE,IAAI,KAA/E,KAAA,EAA2F;AACvF;AACA,YAAMC,SAAS,GAAGC,WAAW,CAA7B,IAA6B,CAA7B;AACAL,QAAAA,GAAG,CAAHA,MAAAA,CAAW,KAAXA,MAAAA;AACA,aAAA,MAAA,GAAcA,GAAG,CAAC,YAAM;AACpB,cAAA,SAAA,EAAe;AACX,gBAAMM,WAAW,GAAG,IAAA,KAAA,CAAA,QAAA,EAAoB;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAApB,CAApB;AACAH,YAAAA,SAAS,CAATA,aAAAA,CAAAA,WAAAA;AACH;AAJL,SAAiB,CAAjB;AAMH;AACJ;;;2CACsB;AACnBJ,MAAAA,GAAG,CAAHA,MAAAA,CAAW,KAAXA,OAAAA;AACAA,MAAAA,GAAG,CAAHA,MAAAA,CAAW,KAAXA,MAAAA;AACH;;;6BACQ;AAAA,UAAA,MAAA,GAAA,IAAA;;AAAA,UACGL,OADH,GACe,KADf,KACe,CADf,OAAA;AAAA,UAAA,YAAA,GAE+F,KAF/F,KAAA;AAAA,UAEGa,SAFH,GAAA,YAAA,CAAA,SAAA;AAAA,UAEcC,QAFd,GAAA,YAAA,CAAA,QAAA;AAAA,UAEwBP,mBAFxB,GAAA,YAAA,CAAA,mBAAA;AAAA,UAE6CC,IAF7C,GAAA,YAAA,CAAA,IAAA;AAAA,UAEmDN,YAFnD,GAAA,YAAA,CAAA,YAAA;AAAA,UAE2Ea,cAF3E,GAAA,YAAA,CAAA,QAAA;AAGL,aAAQ,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;AAAS,QAAA,SAAS,EAAlB,IAAA;AAAwB,QAAA,cAAc,EAAE;AAAED,UAAAA,QAAQ,EAARA;AAAF,SAAxC;AAAsD,QAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAA/D,UAA+D,CAA/D;AAAyF,QAAA,cAAc,EAAEd,OAAO,GAAA,GAAA,MAAA,CAAA,SAAA,EAAA,yBAAA,CAAA,GAAhH,EAAA;AAA+J,QAAA,eAAe,EAAE;AAAhL,OAAA,EACP,mBAAmB,CAAnB,GAAA,CAAwB,UAAA,IAAA,EAAwC;AAAA,YAArCgB,UAAqC,GAAA,IAAA,CAArCA,UAAqC;AAAA,YAAzBC,YAAyB,GAAA,IAAA,CAAzBA,YAAyB;AAAA,YAAXb,IAAW,GAAA,IAAA,CAAXA,IAAW;AAAA,YACrDc,QADqD,GACxCd,IADwC,CAAA,QAAA;AAE7D,YAAMD,OAAO,GAAGD,YAAY,CAAZA,OAAAA,CAAqBE,IAAI,CAAzBF,GAAAA,KAAhB,CAAA;AACA,eAAQ,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AAAU,UAAA,QAAQ,EAAEa,cAAc,IAAlC,QAAA;AAAgD,UAAA,GAAG,EAAEX,IAAI,CAAzD,GAAA;AAA+D,UAAA,IAAI,EAAnE,IAAA;AAA2E,UAAA,IAAI,EAA/E,IAAA;AAAuF,UAAA,YAAY,EAAnG,YAAA;AAAmH,UAAA,UAAU,EAA7H,UAAA;AAA2I,UAAA,OAAO,EAAlJ,OAAA;AAA6J,UAAA,SAAS,EAAtK,SAAA;AAAmL,UAAA,OAAO,EAAE,MAAI,CAACH;AAAjM,SAAA,CAAR;AAJJ,OACC,CADO,CAAR;AAOH;;;;EA7CkBH,KAAK,CAACC,S;;AA+C7B,IAAMoB,eAAe,GAAG,SAAlBA,eAAkB,CAAA,KAAA,EAAA;AAAA,SAAW,KAAA,CAAA,aAAA,CAAA,QAAA,EAAX,KAAW,CAAX;AAAxB,CAAA;;AACA,eAAA,eAAA","sourcesContent":["import * as React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport Animate from 'rc-animate';\nimport raf from '../_util/raf';\nimport { tuple } from '../_util/type';\nimport ListItem from './ListItem';\nexport const OmitProps = tuple('handleFilter', 'handleSelect', 'handleSelectAll', 'handleClear', 'body', 'checkedKeys');\nclass ListBody extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            mounted: false,\n        };\n        this.onItemSelect = (item) => {\n            const { onItemSelect, selectedKeys } = this.props;\n            const checked = selectedKeys.indexOf(item.key) >= 0;\n            onItemSelect(item.key, !checked);\n        };\n    }\n    componentDidMount() {\n        this.mountId = raf(() => {\n            this.setState({ mounted: true });\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { filteredRenderItems, lazy } = this.props;\n        if (prevProps.filteredRenderItems.length !== filteredRenderItems.length && lazy !== false) {\n            // TODO: Replace this with ref when react 15 support removed.\n            const container = findDOMNode(this);\n            raf.cancel(this.lazyId);\n            this.lazyId = raf(() => {\n                if (container) {\n                    const scrollEvent = new Event('scroll', { bubbles: true });\n                    container.dispatchEvent(scrollEvent);\n                }\n            });\n        }\n    }\n    componentWillUnmount() {\n        raf.cancel(this.mountId);\n        raf.cancel(this.lazyId);\n    }\n    render() {\n        const { mounted } = this.state;\n        const { prefixCls, onScroll, filteredRenderItems, lazy, selectedKeys, disabled: globalDisabled, } = this.props;\n        return (<Animate component=\"ul\" componentProps={{ onScroll }} className={`${prefixCls}-content`} transitionName={mounted ? `${prefixCls}-content-item-highlight` : ''} transitionLeave={false}>\n        {filteredRenderItems.map(({ renderedEl, renderedText, item }) => {\n            const { disabled } = item;\n            const checked = selectedKeys.indexOf(item.key) >= 0;\n            return (<ListItem disabled={globalDisabled || disabled} key={item.key} item={item} lazy={lazy} renderedText={renderedText} renderedEl={renderedEl} checked={checked} prefixCls={prefixCls} onClick={this.onItemSelect}/>);\n        })}\n      </Animate>);\n    }\n}\nconst ListBodyWrapper = (props) => <ListBody {...props}/>;\nexport default ListBodyWrapper;\n"]},"metadata":{},"sourceType":"module"}