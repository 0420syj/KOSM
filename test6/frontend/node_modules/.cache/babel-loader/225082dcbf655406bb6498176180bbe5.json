{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport * as React from 'react';\nimport { Option, OptGroup } from 'rc-select';\nimport classNames from 'classnames';\nimport InputElement from './InputElement';\nimport Input from '../input';\nimport Select from '../select';\nimport { ConfigConsumer } from '../config-provider';\n\nfunction isSelectOptionOrSelectOptGroup(child) {\n  return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);\n}\n\nvar AutoComplete =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AutoComplete, _React$Component);\n\n  function AutoComplete() {\n    var _this;\n\n    _classCallCheck(this, AutoComplete);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AutoComplete).apply(this, arguments));\n\n    _this.saveSelect = function (node) {\n      _this.select = node;\n    };\n\n    _this.getInputElement = function () {\n      var children = _this.props.children;\n      var element = children && React.isValidElement(children) && children.type !== Option ? React.Children.only(_this.props.children) : React.createElement(Input, null);\n\n      var elementProps = _extends({}, element.props); // https://github.com/ant-design/ant-design/pull/7742\n\n\n      delete elementProps.children;\n      return React.createElement(InputElement, elementProps, element);\n    };\n\n    _this.renderAutoComplete = function (_ref) {\n      var _classNames;\n\n      var getPrefixCls = _ref.getPrefixCls;\n      var _this$props = _this.props,\n          customizePrefixCls = _this$props.prefixCls,\n          size = _this$props.size,\n          _this$props$className = _this$props.className,\n          className = _this$props$className === void 0 ? '' : _this$props$className,\n          notFoundContent = _this$props.notFoundContent,\n          optionLabelProp = _this$props.optionLabelProp,\n          dataSource = _this$props.dataSource,\n          children = _this$props.children;\n      var prefixCls = getPrefixCls('select', customizePrefixCls);\n      var cls = classNames((_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-lg\"), size === 'large'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-sm\"), size === 'small'), _defineProperty(_classNames, className, !!className), _defineProperty(_classNames, \"\".concat(prefixCls, \"-show-search\"), true), _defineProperty(_classNames, \"\".concat(prefixCls, \"-auto-complete\"), true), _classNames));\n      var options;\n      var childArray = React.Children.toArray(children);\n\n      if (childArray.length && isSelectOptionOrSelectOptGroup(childArray[0])) {\n        options = children;\n      } else {\n        options = dataSource ? dataSource.map(function (item) {\n          if (React.isValidElement(item)) {\n            return item;\n          }\n\n          switch (_typeof(item)) {\n            case 'string':\n              return React.createElement(Option, {\n                key: item\n              }, item);\n\n            case 'object':\n              return React.createElement(Option, {\n                key: item.value\n              }, item.text);\n\n            default:\n              throw new Error('AutoComplete[dataSource] only supports type `string[] | Object[]`.');\n          }\n        }) : [];\n      }\n\n      return React.createElement(Select, _extends({}, _this.props, {\n        className: cls,\n        mode: Select.SECRET_COMBOBOX_MODE_DO_NOT_USE,\n        optionLabelProp: optionLabelProp,\n        getInputElement: _this.getInputElement,\n        notFoundContent: notFoundContent,\n        ref: _this.saveSelect\n      }), options);\n    };\n\n    return _this;\n  }\n\n  _createClass(AutoComplete, [{\n    key: \"focus\",\n    value: function focus() {\n      this.select.focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.select.blur();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ConfigConsumer, null, this.renderAutoComplete);\n    }\n  }]);\n\n  return AutoComplete;\n}(React.Component);\n\nexport { AutoComplete as default };\nAutoComplete.Option = Option;\nAutoComplete.OptGroup = OptGroup;\nAutoComplete.defaultProps = {\n  transitionName: 'slide-up',\n  optionLabelProp: 'children',\n  choiceTransitionName: 'zoom',\n  showSearch: false,\n  filterOption: false\n};","map":{"version":3,"sources":["auto-complete/index.jsx"],"names":["child","AutoComplete","React","Component","children","element","elementProps","getPrefixCls","customizePrefixCls","size","className","notFoundContent","optionLabelProp","dataSource","prefixCls","cls","classNames","childArray","isSelectOptionOrSelectOptGroup","options","item","value","Select","saveSelect","transitionName","choiceTransitionName","showSearch","filterOption"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Option, OptGroup } from 'rc-select';\nimport classNames from 'classnames';\nimport InputElement from './InputElement';\nimport Input from '../input';\nimport Select from '../select';\nimport { ConfigConsumer } from '../config-provider';\nfunction isSelectOptionOrSelectOptGroup(child) {\n    return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);\n}\nexport default class AutoComplete extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.saveSelect = (node) => {\n            this.select = node;\n        };\n        this.getInputElement = () => {\n            const { children } = this.props;\n            const element = children && React.isValidElement(children) && children.type !== Option ? (React.Children.only(this.props.children)) : (<Input />);\n            const elementProps = Object.assign({}, element.props);\n            // https://github.com/ant-design/ant-design/pull/7742\n            delete elementProps.children;\n            return <InputElement {...elementProps}>{element}</InputElement>;\n        };\n        this.renderAutoComplete = ({ getPrefixCls }) => {\n            const { prefixCls: customizePrefixCls, size, className = '', notFoundContent, optionLabelProp, dataSource, children, } = this.props;\n            const prefixCls = getPrefixCls('select', customizePrefixCls);\n            const cls = classNames({\n                [`${prefixCls}-lg`]: size === 'large',\n                [`${prefixCls}-sm`]: size === 'small',\n                [className]: !!className,\n                [`${prefixCls}-show-search`]: true,\n                [`${prefixCls}-auto-complete`]: true,\n            });\n            let options;\n            const childArray = React.Children.toArray(children);\n            if (childArray.length && isSelectOptionOrSelectOptGroup(childArray[0])) {\n                options = children;\n            }\n            else {\n                options = dataSource\n                    ? dataSource.map(item => {\n                        if (React.isValidElement(item)) {\n                            return item;\n                        }\n                        switch (typeof item) {\n                            case 'string':\n                                return <Option key={item}>{item}</Option>;\n                            case 'object':\n                                return (<Option key={item.value}>\n                    {item.text}\n                  </Option>);\n                            default:\n                                throw new Error('AutoComplete[dataSource] only supports type `string[] | Object[]`.');\n                        }\n                    })\n                    : [];\n            }\n            return (<Select {...this.props} className={cls} mode={Select.SECRET_COMBOBOX_MODE_DO_NOT_USE} optionLabelProp={optionLabelProp} getInputElement={this.getInputElement} notFoundContent={notFoundContent} ref={this.saveSelect}>\n        {options}\n      </Select>);\n        };\n    }\n    focus() {\n        this.select.focus();\n    }\n    blur() {\n        this.select.blur();\n    }\n    render() {\n        return <ConfigConsumer>{this.renderAutoComplete}</ConfigConsumer>;\n    }\n}\nAutoComplete.Option = Option;\nAutoComplete.OptGroup = OptGroup;\nAutoComplete.defaultProps = {\n    transitionName: 'slide-up',\n    optionLabelProp: 'children',\n    choiceTransitionName: 'zoom',\n    showSearch: false,\n    filterOption: false,\n};\n"]},"metadata":{},"sourceType":"module"}