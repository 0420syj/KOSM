{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { polyfill } from 'react-lifecycles-compat';\nimport Checkbox from '../checkbox';\nimport Dropdown from '../dropdown';\nimport Menu from '../menu';\nimport Icon from '../icon';\n\nfunction checkSelection(_ref) {\n  var store = _ref.store,\n      getCheckboxPropsByItem = _ref.getCheckboxPropsByItem,\n      getRecordKey = _ref.getRecordKey,\n      data = _ref.data,\n      type = _ref.type,\n      byDefaultChecked = _ref.byDefaultChecked;\n  return byDefaultChecked ? data[type](function (item, i) {\n    return getCheckboxPropsByItem(item, i).defaultChecked;\n  }) : data[type](function (item, i) {\n    return store.getState().selectedRowKeys.indexOf(getRecordKey(item, i)) >= 0;\n  });\n}\n\nfunction getIndeterminateState(props) {\n  var store = props.store,\n      data = props.data;\n\n  if (!data.length) {\n    return false;\n  }\n\n  var someCheckedNotByDefaultChecked = checkSelection(_extends(_extends({}, props), {\n    data: data,\n    type: 'some',\n    byDefaultChecked: false\n  })) && !checkSelection(_extends(_extends({}, props), {\n    data: data,\n    type: 'every',\n    byDefaultChecked: false\n  }));\n  var someCheckedByDefaultChecked = checkSelection(_extends(_extends({}, props), {\n    data: data,\n    type: 'some',\n    byDefaultChecked: true\n  })) && !checkSelection(_extends(_extends({}, props), {\n    data: data,\n    type: 'every',\n    byDefaultChecked: true\n  }));\n\n  if (store.getState().selectionDirty) {\n    return someCheckedNotByDefaultChecked;\n  }\n\n  return someCheckedNotByDefaultChecked || someCheckedByDefaultChecked;\n}\n\nfunction getCheckState(props) {\n  var store = props.store,\n      data = props.data;\n\n  if (!data.length) {\n    return false;\n  }\n\n  if (store.getState().selectionDirty) {\n    return checkSelection(_extends(_extends({}, props), {\n      data: data,\n      type: 'every',\n      byDefaultChecked: false\n    }));\n  }\n\n  return checkSelection(_extends(_extends({}, props), {\n    data: data,\n    type: 'every',\n    byDefaultChecked: false\n  })) || checkSelection(_extends(_extends({}, props), {\n    data: data,\n    type: 'every',\n    byDefaultChecked: true\n  }));\n}\n\nvar SelectionCheckboxAll =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SelectionCheckboxAll, _React$Component);\n\n  function SelectionCheckboxAll(props) {\n    var _this;\n\n    _classCallCheck(this, SelectionCheckboxAll);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SelectionCheckboxAll).call(this, props));\n    _this.state = {\n      checked: false,\n      indeterminate: false\n    };\n\n    _this.handleSelectAllChange = function (e) {\n      var checked = e.target.checked;\n\n      _this.props.onSelect(checked ? 'all' : 'removeAll', 0, null);\n    };\n\n    _this.defaultSelections = props.hideDefaultSelections ? [] : [{\n      key: 'all',\n      text: props.locale.selectAll\n    }, {\n      key: 'invert',\n      text: props.locale.selectInvert\n    }];\n    return _this;\n  }\n\n  _createClass(SelectionCheckboxAll, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.subscribe();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.unsubscribe) {\n        this.unsubscribe();\n      }\n    }\n  }, {\n    key: \"setCheckState\",\n    value: function setCheckState(props) {\n      var checked = getCheckState(props);\n      var indeterminate = getIndeterminateState(props);\n      this.setState(function (prevState) {\n        var newState = {};\n\n        if (indeterminate !== prevState.indeterminate) {\n          newState.indeterminate = indeterminate;\n        }\n\n        if (checked !== prevState.checked) {\n          newState.checked = checked;\n        }\n\n        return newState;\n      });\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe() {\n      var _this2 = this;\n\n      var store = this.props.store;\n      this.unsubscribe = store.subscribe(function () {\n        _this2.setCheckState(_this2.props);\n      });\n    }\n  }, {\n    key: \"renderMenus\",\n    value: function renderMenus(selections) {\n      var _this3 = this;\n\n      return selections.map(function (selection, index) {\n        return React.createElement(Menu.Item, {\n          key: selection.key || index\n        }, React.createElement(\"div\", {\n          onClick: function onClick() {\n            _this3.props.onSelect(selection.key, index, selection.onSelect);\n          }\n        }, selection.text));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          prefixCls = _this$props.prefixCls,\n          selections = _this$props.selections,\n          getPopupContainer = _this$props.getPopupContainer;\n      var _this$state = this.state,\n          checked = _this$state.checked,\n          indeterminate = _this$state.indeterminate;\n      var selectionPrefixCls = \"\".concat(prefixCls, \"-selection\");\n      var customSelections = null;\n\n      if (selections) {\n        var newSelections = Array.isArray(selections) ? this.defaultSelections.concat(selections) : this.defaultSelections;\n        var menu = React.createElement(Menu, {\n          className: \"\".concat(selectionPrefixCls, \"-menu\"),\n          selectedKeys: []\n        }, this.renderMenus(newSelections));\n        customSelections = newSelections.length > 0 ? React.createElement(Dropdown, {\n          overlay: menu,\n          getPopupContainer: getPopupContainer\n        }, React.createElement(\"div\", {\n          className: \"\".concat(selectionPrefixCls, \"-down\")\n        }, React.createElement(Icon, {\n          type: \"down\"\n        }))) : null;\n      }\n\n      return React.createElement(\"div\", {\n        className: selectionPrefixCls\n      }, React.createElement(Checkbox, {\n        className: classNames(_defineProperty({}, \"\".concat(selectionPrefixCls, \"-select-all-custom\"), customSelections)),\n        checked: checked,\n        indeterminate: indeterminate,\n        disabled: disabled,\n        onChange: this.handleSelectAllChange\n      }), customSelections);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      var checked = getCheckState(props);\n      var indeterminate = getIndeterminateState(props);\n      var newState = {};\n\n      if (indeterminate !== state.indeterminate) {\n        newState.indeterminate = indeterminate;\n      }\n\n      if (checked !== state.checked) {\n        newState.checked = checked;\n      }\n\n      return newState;\n    }\n  }]);\n\n  return SelectionCheckboxAll;\n}(React.Component);\n\npolyfill(SelectionCheckboxAll);\nexport default SelectionCheckboxAll;","map":{"version":3,"sources":["table/SelectionCheckboxAll.jsx"],"names":["store","getCheckboxPropsByItem","getRecordKey","data","type","byDefaultChecked","props","someCheckedNotByDefaultChecked","checkSelection","someCheckedByDefaultChecked","SelectionCheckboxAll","React","Component","checked","indeterminate","e","key","text","selectAll","selectInvert","state","getCheckState","getIndeterminateState","newState","prevState","selections","selection","index","disabled","prefixCls","getPopupContainer","selectionPrefixCls","customSelections","newSelections","Array","menu","classNames","handleSelectAllChange","polyfill"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport { polyfill } from 'react-lifecycles-compat';\nimport Checkbox from '../checkbox';\nimport Dropdown from '../dropdown';\nimport Menu from '../menu';\nimport Icon from '../icon';\nfunction checkSelection({ store, getCheckboxPropsByItem, getRecordKey, data, type, byDefaultChecked, }) {\n    return byDefaultChecked\n        ? data[type]((item, i) => getCheckboxPropsByItem(item, i).defaultChecked)\n        : data[type]((item, i) => store.getState().selectedRowKeys.indexOf(getRecordKey(item, i)) >= 0);\n}\nfunction getIndeterminateState(props) {\n    const { store, data } = props;\n    if (!data.length) {\n        return false;\n    }\n    const someCheckedNotByDefaultChecked = checkSelection(Object.assign(Object.assign({}, props), { data, type: 'some', byDefaultChecked: false })) &&\n        !checkSelection(Object.assign(Object.assign({}, props), { data, type: 'every', byDefaultChecked: false }));\n    const someCheckedByDefaultChecked = checkSelection(Object.assign(Object.assign({}, props), { data, type: 'some', byDefaultChecked: true })) &&\n        !checkSelection(Object.assign(Object.assign({}, props), { data, type: 'every', byDefaultChecked: true }));\n    if (store.getState().selectionDirty) {\n        return someCheckedNotByDefaultChecked;\n    }\n    return someCheckedNotByDefaultChecked || someCheckedByDefaultChecked;\n}\nfunction getCheckState(props) {\n    const { store, data } = props;\n    if (!data.length) {\n        return false;\n    }\n    if (store.getState().selectionDirty) {\n        return checkSelection(Object.assign(Object.assign({}, props), { data, type: 'every', byDefaultChecked: false }));\n    }\n    return (checkSelection(Object.assign(Object.assign({}, props), { data, type: 'every', byDefaultChecked: false })) ||\n        checkSelection(Object.assign(Object.assign({}, props), { data, type: 'every', byDefaultChecked: true })));\n}\nclass SelectionCheckboxAll extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            checked: false,\n            indeterminate: false,\n        };\n        this.handleSelectAllChange = (e) => {\n            const { checked } = e.target;\n            this.props.onSelect(checked ? 'all' : 'removeAll', 0, null);\n        };\n        this.defaultSelections = props.hideDefaultSelections\n            ? []\n            : [\n                {\n                    key: 'all',\n                    text: props.locale.selectAll,\n                },\n                {\n                    key: 'invert',\n                    text: props.locale.selectInvert,\n                },\n            ];\n    }\n    static getDerivedStateFromProps(props, state) {\n        const checked = getCheckState(props);\n        const indeterminate = getIndeterminateState(props);\n        const newState = {};\n        if (indeterminate !== state.indeterminate) {\n            newState.indeterminate = indeterminate;\n        }\n        if (checked !== state.checked) {\n            newState.checked = checked;\n        }\n        return newState;\n    }\n    componentDidMount() {\n        this.subscribe();\n    }\n    componentWillUnmount() {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n        }\n    }\n    setCheckState(props) {\n        const checked = getCheckState(props);\n        const indeterminate = getIndeterminateState(props);\n        this.setState(prevState => {\n            const newState = {};\n            if (indeterminate !== prevState.indeterminate) {\n                newState.indeterminate = indeterminate;\n            }\n            if (checked !== prevState.checked) {\n                newState.checked = checked;\n            }\n            return newState;\n        });\n    }\n    subscribe() {\n        const { store } = this.props;\n        this.unsubscribe = store.subscribe(() => {\n            this.setCheckState(this.props);\n        });\n    }\n    renderMenus(selections) {\n        return selections.map((selection, index) => {\n            return (<Menu.Item key={selection.key || index}>\n          <div onClick={() => {\n                this.props.onSelect(selection.key, index, selection.onSelect);\n            }}>\n            {selection.text}\n          </div>\n        </Menu.Item>);\n        });\n    }\n    render() {\n        const { disabled, prefixCls, selections, getPopupContainer } = this.props;\n        const { checked, indeterminate } = this.state;\n        const selectionPrefixCls = `${prefixCls}-selection`;\n        let customSelections = null;\n        if (selections) {\n            const newSelections = Array.isArray(selections)\n                ? this.defaultSelections.concat(selections)\n                : this.defaultSelections;\n            const menu = (<Menu className={`${selectionPrefixCls}-menu`} selectedKeys={[]}>\n          {this.renderMenus(newSelections)}\n        </Menu>);\n            customSelections =\n                newSelections.length > 0 ? (<Dropdown overlay={menu} getPopupContainer={getPopupContainer}>\n            <div className={`${selectionPrefixCls}-down`}>\n              <Icon type=\"down\"/>\n            </div>\n          </Dropdown>) : null;\n        }\n        return (<div className={selectionPrefixCls}>\n        <Checkbox className={classNames({ [`${selectionPrefixCls}-select-all-custom`]: customSelections })} checked={checked} indeterminate={indeterminate} disabled={disabled} onChange={this.handleSelectAllChange}/>\n        {customSelections}\n      </div>);\n    }\n}\npolyfill(SelectionCheckboxAll);\nexport default SelectionCheckboxAll;\n"]},"metadata":{},"sourceType":"module"}