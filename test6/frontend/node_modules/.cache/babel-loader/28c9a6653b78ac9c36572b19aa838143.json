{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport RcTreeSelect, { TreeNode, SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from 'rc-tree-select';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport { ConfigConsumer } from '../config-provider';\nimport warning from '../_util/warning';\nimport { cloneElement } from '../_util/reactNode';\nimport Icon from '../icon';\n\nvar TreeSelect =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TreeSelect, _React$Component);\n\n  function TreeSelect(props) {\n    var _this;\n\n    _classCallCheck(this, TreeSelect);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TreeSelect).call(this, props));\n\n    _this.saveTreeSelect = function (node) {\n      _this.rcTreeSelect = node;\n    };\n\n    _this.renderSwitcherIcon = function (prefixCls, _ref) {\n      var isLeaf = _ref.isLeaf,\n          loading = _ref.loading;\n\n      if (loading) {\n        return React.createElement(Icon, {\n          type: \"loading\",\n          className: \"\".concat(prefixCls, \"-switcher-loading-icon\")\n        });\n      }\n\n      if (isLeaf) {\n        return null;\n      }\n\n      return React.createElement(Icon, {\n        type: \"caret-down\",\n        className: \"\".concat(prefixCls, \"-switcher-icon\")\n      });\n    };\n\n    _this.renderTreeSelect = function (_ref2) {\n      var _classNames;\n\n      var getContextPopupContainer = _ref2.getPopupContainer,\n          getPrefixCls = _ref2.getPrefixCls,\n          renderEmpty = _ref2.renderEmpty;\n\n      var _a = _this.props,\n          customizePrefixCls = _a.prefixCls,\n          className = _a.className,\n          size = _a.size,\n          notFoundContent = _a.notFoundContent,\n          dropdownStyle = _a.dropdownStyle,\n          dropdownClassName = _a.dropdownClassName,\n          suffixIcon = _a.suffixIcon,\n          removeIcon = _a.removeIcon,\n          clearIcon = _a.clearIcon,\n          getPopupContainer = _a.getPopupContainer,\n          restProps = __rest(_a, [\"prefixCls\", \"className\", \"size\", \"notFoundContent\", \"dropdownStyle\", \"dropdownClassName\", \"suffixIcon\", \"removeIcon\", \"clearIcon\", \"getPopupContainer\"]);\n\n      var rest = omit(restProps, ['inputIcon', 'removeIcon', 'clearIcon', 'switcherIcon']);\n      var prefixCls = getPrefixCls('select', customizePrefixCls);\n      var cls = classNames((_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-lg\"), size === 'large'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-sm\"), size === 'small'), _classNames), className); // showSearch: single - false, multiple - true\n\n      var showSearch = restProps.showSearch;\n\n      if (!('showSearch' in restProps)) {\n        showSearch = !!(restProps.multiple || restProps.treeCheckable);\n      }\n\n      var checkable = rest.treeCheckable;\n\n      if (checkable) {\n        checkable = React.createElement(\"span\", {\n          className: \"\".concat(prefixCls, \"-tree-checkbox-inner\")\n        });\n      }\n\n      var inputIcon = suffixIcon ? cloneElement(suffixIcon) : React.createElement(Icon, {\n        type: \"down\",\n        className: \"\".concat(prefixCls, \"-arrow-icon\")\n      });\n      var finalRemoveIcon = removeIcon ? cloneElement(removeIcon) : React.createElement(Icon, {\n        type: \"close\",\n        className: \"\".concat(prefixCls, \"-remove-icon\")\n      });\n      var finalClearIcon = clearIcon ? cloneElement(clearIcon) : React.createElement(Icon, {\n        type: \"close-circle\",\n        theme: \"filled\",\n        className: \"\".concat(prefixCls, \"-clear-icon\")\n      });\n      return React.createElement(RcTreeSelect, _extends({\n        switcherIcon: function switcherIcon(nodeProps) {\n          return _this.renderSwitcherIcon(prefixCls, nodeProps);\n        },\n        inputIcon: inputIcon,\n        removeIcon: finalRemoveIcon,\n        clearIcon: finalClearIcon\n      }, rest, {\n        showSearch: showSearch,\n        getPopupContainer: getPopupContainer || getContextPopupContainer,\n        dropdownClassName: classNames(dropdownClassName, \"\".concat(prefixCls, \"-tree-dropdown\")),\n        prefixCls: prefixCls,\n        className: cls,\n        dropdownStyle: _extends({\n          maxHeight: '100vh',\n          overflow: 'auto'\n        }, dropdownStyle),\n        treeCheckable: checkable,\n        notFoundContent: notFoundContent || renderEmpty('Select'),\n        ref: _this.saveTreeSelect\n      }));\n    };\n\n    warning(props.multiple !== false || !props.treeCheckable, 'TreeSelect', '`multiple` will alway be `true` when `treeCheckable` is true');\n    return _this;\n  }\n\n  _createClass(TreeSelect, [{\n    key: \"focus\",\n    value: function focus() {\n      this.rcTreeSelect.focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.rcTreeSelect.blur();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ConfigConsumer, null, this.renderTreeSelect);\n    }\n  }]);\n\n  return TreeSelect;\n}(React.Component);\n\nexport { TreeSelect as default };\nTreeSelect.TreeNode = TreeNode;\nTreeSelect.SHOW_ALL = SHOW_ALL;\nTreeSelect.SHOW_PARENT = SHOW_PARENT;\nTreeSelect.SHOW_CHILD = SHOW_CHILD;\nTreeSelect.defaultProps = {\n  transitionName: 'slide-up',\n  choiceTransitionName: 'zoom'\n};","map":{"version":3,"sources":["tree-select/index.jsx"],"names":["__rest","t","Object","e","s","i","p","TreeSelect","React","Component","isLeaf","loading","getPopupContainer","getContextPopupContainer","getPrefixCls","renderEmpty","customizePrefixCls","className","size","notFoundContent","dropdownStyle","dropdownClassName","suffixIcon","removeIcon","clearIcon","_a","restProps","rest","omit","prefixCls","cls","classNames","showSearch","checkable","inputIcon","cloneElement","finalRemoveIcon","finalClearIcon","maxHeight","overflow","saveTreeSelect","warning","props","transitionName","choiceTransitionName"],"mappings":"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","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport RcTreeSelect, { TreeNode, SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from 'rc-tree-select';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport { ConfigConsumer } from '../config-provider';\nimport warning from '../_util/warning';\nimport { cloneElement } from '../_util/reactNode';\nimport Icon from '../icon';\nexport default class TreeSelect extends React.Component {\n    constructor(props) {\n        super(props);\n        this.saveTreeSelect = (node) => {\n            this.rcTreeSelect = node;\n        };\n        this.renderSwitcherIcon = (prefixCls, { isLeaf, loading }) => {\n            if (loading) {\n                return <Icon type=\"loading\" className={`${prefixCls}-switcher-loading-icon`}/>;\n            }\n            if (isLeaf) {\n                return null;\n            }\n            return <Icon type=\"caret-down\" className={`${prefixCls}-switcher-icon`}/>;\n        };\n        this.renderTreeSelect = ({ getPopupContainer: getContextPopupContainer, getPrefixCls, renderEmpty, }) => {\n            const _a = this.props, { prefixCls: customizePrefixCls, className, size, notFoundContent, dropdownStyle, dropdownClassName, suffixIcon, removeIcon, clearIcon, getPopupContainer } = _a, restProps = __rest(_a, [\"prefixCls\", \"className\", \"size\", \"notFoundContent\", \"dropdownStyle\", \"dropdownClassName\", \"suffixIcon\", \"removeIcon\", \"clearIcon\", \"getPopupContainer\"]);\n            const rest = omit(restProps, ['inputIcon', 'removeIcon', 'clearIcon', 'switcherIcon']);\n            const prefixCls = getPrefixCls('select', customizePrefixCls);\n            const cls = classNames({\n                [`${prefixCls}-lg`]: size === 'large',\n                [`${prefixCls}-sm`]: size === 'small',\n            }, className);\n            // showSearch: single - false, multiple - true\n            let { showSearch } = restProps;\n            if (!('showSearch' in restProps)) {\n                showSearch = !!(restProps.multiple || restProps.treeCheckable);\n            }\n            let checkable = rest.treeCheckable;\n            if (checkable) {\n                checkable = <span className={`${prefixCls}-tree-checkbox-inner`}/>;\n            }\n            const inputIcon = suffixIcon ? (cloneElement(suffixIcon)) : (<Icon type=\"down\" className={`${prefixCls}-arrow-icon`}/>);\n            const finalRemoveIcon = removeIcon ? (cloneElement(removeIcon)) : (<Icon type=\"close\" className={`${prefixCls}-remove-icon`}/>);\n            const finalClearIcon = clearIcon ? (cloneElement(clearIcon)) : (<Icon type=\"close-circle\" theme=\"filled\" className={`${prefixCls}-clear-icon`}/>);\n            return (<RcTreeSelect switcherIcon={(nodeProps) => this.renderSwitcherIcon(prefixCls, nodeProps)} inputIcon={inputIcon} removeIcon={finalRemoveIcon} clearIcon={finalClearIcon} {...rest} showSearch={showSearch} getPopupContainer={getPopupContainer || getContextPopupContainer} dropdownClassName={classNames(dropdownClassName, `${prefixCls}-tree-dropdown`)} prefixCls={prefixCls} className={cls} dropdownStyle={Object.assign({ maxHeight: '100vh', overflow: 'auto' }, dropdownStyle)} treeCheckable={checkable} notFoundContent={notFoundContent || renderEmpty('Select')} ref={this.saveTreeSelect}/>);\n        };\n        warning(props.multiple !== false || !props.treeCheckable, 'TreeSelect', '`multiple` will alway be `true` when `treeCheckable` is true');\n    }\n    focus() {\n        this.rcTreeSelect.focus();\n    }\n    blur() {\n        this.rcTreeSelect.blur();\n    }\n    render() {\n        return <ConfigConsumer>{this.renderTreeSelect}</ConfigConsumer>;\n    }\n}\nTreeSelect.TreeNode = TreeNode;\nTreeSelect.SHOW_ALL = SHOW_ALL;\nTreeSelect.SHOW_PARENT = SHOW_PARENT;\nTreeSelect.SHOW_CHILD = SHOW_CHILD;\nTreeSelect.defaultProps = {\n    transitionName: 'slide-up',\n    choiceTransitionName: 'zoom',\n};\n"]},"metadata":{},"sourceType":"module"}