{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport * as PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Animate from 'rc-animate';\nimport omit from 'omit.js';\nimport Row from '../grid/row';\nimport Col from '../grid/col';\nimport Icon from '../icon';\nimport { ConfigConsumer } from '../config-provider';\nimport warning from '../_util/warning';\nimport { tuple } from '../_util/type';\nimport { FIELD_META_PROP, FIELD_DATA_PROP } from './constants';\nimport FormContext from './context';\nvar ValidateStatuses = tuple('success', 'warning', 'error', 'validating', '');\nvar FormLabelAligns = tuple('left', 'right');\n\nfunction intersperseSpace(list) {\n  return list.reduce(function (current, item) {\n    return [].concat(_toConsumableArray(current), [' ', item]);\n  }, []).slice(1);\n}\n\nvar FormItem =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FormItem, _React$Component);\n\n  function FormItem() {\n    var _this;\n\n    _classCallCheck(this, FormItem);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FormItem).apply(this, arguments));\n    _this.helpShow = false; // Resolve duplicated ids bug between different forms\n    // https://github.com/ant-design/ant-design/issues/7351\n\n    _this.onLabelClick = function () {\n      var id = _this.props.id || _this.getId();\n\n      if (!id) {\n        return;\n      }\n\n      var formItemNode = ReactDOM.findDOMNode(_assertThisInitialized(_this));\n      var control = formItemNode.querySelector(\"[id=\\\"\".concat(id, \"\\\"]\"));\n\n      if (control && control.focus) {\n        control.focus();\n      }\n    };\n\n    _this.onHelpAnimEnd = function (_key, helpShow) {\n      _this.helpShow = helpShow;\n\n      if (!helpShow) {\n        _this.setState({});\n      }\n    };\n\n    _this.renderFormItem = function (_ref) {\n      var _itemClassName;\n\n      var getPrefixCls = _ref.getPrefixCls;\n\n      var _a = _this.props,\n          customizePrefixCls = _a.prefixCls,\n          style = _a.style,\n          className = _a.className,\n          restProps = __rest(_a, [\"prefixCls\", \"style\", \"className\"]);\n\n      var prefixCls = getPrefixCls('form', customizePrefixCls);\n\n      var children = _this.renderChildren(prefixCls);\n\n      var itemClassName = (_itemClassName = {}, _defineProperty(_itemClassName, \"\".concat(prefixCls, \"-item\"), true), _defineProperty(_itemClassName, \"\".concat(prefixCls, \"-item-with-help\"), _this.helpShow), _defineProperty(_itemClassName, \"\".concat(className), !!className), _itemClassName);\n      return React.createElement(Row, _extends({\n        className: classNames(itemClassName),\n        style: style\n      }, omit(restProps, ['id', 'htmlFor', 'label', 'labelAlign', 'labelCol', 'wrapperCol', 'help', 'extra', 'validateStatus', 'hasFeedback', 'required', 'colon']), {\n        key: \"row\"\n      }), children);\n    };\n\n    return _this;\n  }\n\n  _createClass(FormItem, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          help = _this$props.help,\n          validateStatus = _this$props.validateStatus,\n          id = _this$props.id;\n      warning(this.getControls(children, true).length <= 1 || help !== undefined || validateStatus !== undefined, 'Form.Item', 'Cannot generate `validateStatus` and `help` automatically, ' + 'while there are more than one `getFieldDecorator` in it.');\n      warning(!id, 'Form.Item', '`id` is deprecated for its label `htmlFor`. Please use `htmlFor` directly.');\n    }\n  }, {\n    key: \"getHelpMessage\",\n    value: function getHelpMessage() {\n      var help = this.props.help;\n\n      if (help === undefined && this.getOnlyControl()) {\n        var _this$getField = this.getField(),\n            errors = _this$getField.errors;\n\n        if (errors) {\n          return intersperseSpace(errors.map(function (e, index) {\n            var node = null;\n\n            if (React.isValidElement(e)) {\n              node = e;\n            } else if (React.isValidElement(e.message)) {\n              node = e.message;\n            } // eslint-disable-next-line react/no-array-index-key\n\n\n            return node ? React.cloneElement(node, {\n              key: index\n            }) : e.message;\n          }));\n        }\n\n        return '';\n      }\n\n      return help;\n    }\n  }, {\n    key: \"getControls\",\n    value: function getControls(children, recursively) {\n      var controls = [];\n      var childrenArray = React.Children.toArray(children);\n\n      for (var i = 0; i < childrenArray.length; i++) {\n        if (!recursively && controls.length > 0) {\n          break;\n        }\n\n        var child = childrenArray[i];\n\n        if (child.type && (child.type === FormItem || child.type.displayName === 'FormItem')) {\n          continue;\n        }\n\n        if (!child.props) {\n          continue;\n        }\n\n        if (FIELD_META_PROP in child.props) {\n          // And means FIELD_DATA_PROP in child.props, too.\n          controls.push(child);\n        } else if (child.props.children) {\n          controls = controls.concat(this.getControls(child.props.children, recursively));\n        }\n      }\n\n      return controls;\n    }\n  }, {\n    key: \"getOnlyControl\",\n    value: function getOnlyControl() {\n      var child = this.getControls(this.props.children, false)[0];\n      return child !== undefined ? child : null;\n    }\n  }, {\n    key: \"getChildProp\",\n    value: function getChildProp(prop) {\n      var child = this.getOnlyControl();\n      return child && child.props && child.props[prop];\n    }\n  }, {\n    key: \"getId\",\n    value: function getId() {\n      return this.getChildProp('id');\n    }\n  }, {\n    key: \"getMeta\",\n    value: function getMeta() {\n      return this.getChildProp(FIELD_META_PROP);\n    }\n  }, {\n    key: \"getField\",\n    value: function getField() {\n      return this.getChildProp(FIELD_DATA_PROP);\n    }\n  }, {\n    key: \"getValidateStatus\",\n    value: function getValidateStatus() {\n      var onlyControl = this.getOnlyControl();\n\n      if (!onlyControl) {\n        return '';\n      }\n\n      var field = this.getField();\n\n      if (field.validating) {\n        return 'validating';\n      }\n\n      if (field.errors) {\n        return 'error';\n      }\n\n      var fieldValue = 'value' in field ? field.value : this.getMeta().initialValue;\n\n      if (fieldValue !== undefined && fieldValue !== null && fieldValue !== '') {\n        return 'success';\n      }\n\n      return '';\n    }\n  }, {\n    key: \"isRequired\",\n    value: function isRequired() {\n      var required = this.props.required;\n\n      if (required !== undefined) {\n        return required;\n      }\n\n      if (this.getOnlyControl()) {\n        var meta = this.getMeta() || {};\n        var validate = meta.validate || [];\n        return validate.filter(function (item) {\n          return !!item.rules;\n        }).some(function (item) {\n          return item.rules.some(function (rule) {\n            return rule.required;\n          });\n        });\n      }\n\n      return false;\n    }\n  }, {\n    key: \"renderHelp\",\n    value: function renderHelp(prefixCls) {\n      var help = this.getHelpMessage();\n      var children = help ? React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-explain\"),\n        key: \"help\"\n      }, help) : null;\n\n      if (children) {\n        this.helpShow = !!children;\n      }\n\n      return React.createElement(Animate, {\n        transitionName: \"show-help\",\n        component: \"\",\n        transitionAppear: true,\n        key: \"help\",\n        onEnd: this.onHelpAnimEnd\n      }, children);\n    }\n  }, {\n    key: \"renderExtra\",\n    value: function renderExtra(prefixCls) {\n      var extra = this.props.extra;\n      return extra ? React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-extra\")\n      }, extra) : null;\n    }\n  }, {\n    key: \"renderValidateWrapper\",\n    value: function renderValidateWrapper(prefixCls, c1, c2, c3) {\n      var props = this.props;\n      var onlyControl = this.getOnlyControl;\n      var validateStatus = props.validateStatus === undefined && onlyControl ? this.getValidateStatus() : props.validateStatus;\n      var classes = \"\".concat(prefixCls, \"-item-control\");\n\n      if (validateStatus) {\n        classes = classNames(\"\".concat(prefixCls, \"-item-control\"), {\n          'has-feedback': props.hasFeedback || validateStatus === 'validating',\n          'has-success': validateStatus === 'success',\n          'has-warning': validateStatus === 'warning',\n          'has-error': validateStatus === 'error',\n          'is-validating': validateStatus === 'validating'\n        });\n      }\n\n      var iconType = '';\n\n      switch (validateStatus) {\n        case 'success':\n          iconType = 'check-circle';\n          break;\n\n        case 'warning':\n          iconType = 'exclamation-circle';\n          break;\n\n        case 'error':\n          iconType = 'close-circle';\n          break;\n\n        case 'validating':\n          iconType = 'loading';\n          break;\n\n        default:\n          iconType = '';\n          break;\n      }\n\n      var icon = props.hasFeedback && iconType ? React.createElement(\"span\", {\n        className: \"\".concat(prefixCls, \"-item-children-icon\")\n      }, React.createElement(Icon, {\n        type: iconType,\n        theme: iconType === 'loading' ? 'outlined' : 'filled'\n      })) : null;\n      return React.createElement(\"div\", {\n        className: classes\n      }, React.createElement(\"span\", {\n        className: \"\".concat(prefixCls, \"-item-children\")\n      }, c1, icon), c2, c3);\n    }\n  }, {\n    key: \"renderWrapper\",\n    value: function renderWrapper(prefixCls, children) {\n      var _this2 = this;\n\n      return React.createElement(FormContext.Consumer, {\n        key: \"wrapper\"\n      }, function (_ref2) {\n        var contextWrapperCol = _ref2.wrapperCol,\n            vertical = _ref2.vertical;\n        var wrapperCol = _this2.props.wrapperCol;\n        var mergedWrapperCol = ('wrapperCol' in _this2.props ? wrapperCol : contextWrapperCol) || {};\n        var className = classNames(\"\".concat(prefixCls, \"-item-control-wrapper\"), mergedWrapperCol.className); // No pass FormContext since it's useless\n\n        return React.createElement(FormContext.Provider, {\n          value: {\n            vertical: vertical\n          }\n        }, React.createElement(Col, _extends({}, mergedWrapperCol, {\n          className: className\n        }), children));\n      });\n    }\n  }, {\n    key: \"renderLabel\",\n    value: function renderLabel(prefixCls) {\n      var _this3 = this;\n\n      return React.createElement(FormContext.Consumer, {\n        key: \"label\"\n      }, function (_ref3) {\n        var _classNames;\n\n        var vertical = _ref3.vertical,\n            contextLabelAlign = _ref3.labelAlign,\n            contextLabelCol = _ref3.labelCol,\n            contextColon = _ref3.colon;\n        var _this3$props = _this3.props,\n            label = _this3$props.label,\n            labelCol = _this3$props.labelCol,\n            labelAlign = _this3$props.labelAlign,\n            colon = _this3$props.colon,\n            id = _this3$props.id,\n            htmlFor = _this3$props.htmlFor;\n\n        var required = _this3.isRequired();\n\n        var mergedLabelCol = ('labelCol' in _this3.props ? labelCol : contextLabelCol) || {};\n        var mergedLabelAlign = 'labelAlign' in _this3.props ? labelAlign : contextLabelAlign;\n        var labelClsBasic = \"\".concat(prefixCls, \"-item-label\");\n        var labelColClassName = classNames(labelClsBasic, mergedLabelAlign === 'left' && \"\".concat(labelClsBasic, \"-left\"), mergedLabelCol.className);\n        var labelChildren = label; // Keep label is original where there should have no colon\n\n        var computedColon = colon === true || contextColon !== false && colon !== false;\n        var haveColon = computedColon && !vertical; // Remove duplicated user input colon\n\n        if (haveColon && typeof label === 'string' && label.trim() !== '') {\n          labelChildren = label.replace(/[：:]\\s*$/, '');\n        }\n\n        var labelClassName = classNames((_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-item-required\"), required), _defineProperty(_classNames, \"\".concat(prefixCls, \"-item-no-colon\"), !computedColon), _classNames));\n        return label ? React.createElement(Col, _extends({}, mergedLabelCol, {\n          className: labelColClassName\n        }), React.createElement(\"label\", {\n          htmlFor: htmlFor || id || _this3.getId(),\n          className: labelClassName,\n          title: typeof label === 'string' ? label : '',\n          onClick: _this3.onLabelClick\n        }, labelChildren)) : null;\n      });\n    }\n  }, {\n    key: \"renderChildren\",\n    value: function renderChildren(prefixCls) {\n      var children = this.props.children;\n      return [this.renderLabel(prefixCls), this.renderWrapper(prefixCls, this.renderValidateWrapper(prefixCls, children, this.renderHelp(prefixCls), this.renderExtra(prefixCls)))];\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ConfigConsumer, null, this.renderFormItem);\n    }\n  }]);\n\n  return FormItem;\n}(React.Component);\n\nexport { FormItem as default };\nFormItem.defaultProps = {\n  hasFeedback: false\n};\nFormItem.propTypes = {\n  prefixCls: PropTypes.string,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  labelCol: PropTypes.object,\n  help: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n  validateStatus: PropTypes.oneOf(ValidateStatuses),\n  hasFeedback: PropTypes.bool,\n  wrapperCol: PropTypes.object,\n  className: PropTypes.string,\n  id: PropTypes.string,\n  children: PropTypes.node,\n  colon: PropTypes.bool\n};","map":{"version":3,"sources":["form/FormItem.jsx"],"names":["__rest","t","Object","e","s","i","p","ValidateStatuses","tuple","FormLabelAligns","FormItem","React","Component","id","formItemNode","ReactDOM","control","getPrefixCls","customizePrefixCls","style","className","_a","restProps","prefixCls","children","itemClassName","classNames","omit","help","validateStatus","warning","errors","intersperseSpace","node","key","index","recursively","controls","childrenArray","child","FIELD_META_PROP","prop","onlyControl","field","fieldValue","required","meta","validate","item","rule","onHelpAnimEnd","extra","c1","c2","c3","props","classes","iconType","icon","wrapperCol","contextWrapperCol","vertical","mergedWrapperCol","labelAlign","contextLabelAlign","labelCol","contextLabelCol","colon","contextColon","label","htmlFor","mergedLabelCol","mergedLabelAlign","labelClsBasic","labelColClassName","labelChildren","computedColon","haveColon","labelClassName","onLabelClick","hasFeedback","PropTypes","bool"],"mappings":"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","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport * as PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Animate from 'rc-animate';\nimport omit from 'omit.js';\nimport Row from '../grid/row';\nimport Col from '../grid/col';\nimport Icon from '../icon';\nimport { ConfigConsumer } from '../config-provider';\nimport warning from '../_util/warning';\nimport { tuple } from '../_util/type';\nimport { FIELD_META_PROP, FIELD_DATA_PROP } from './constants';\nimport FormContext from './context';\nconst ValidateStatuses = tuple('success', 'warning', 'error', 'validating', '');\nconst FormLabelAligns = tuple('left', 'right');\nfunction intersperseSpace(list) {\n    return list.reduce((current, item) => [...current, ' ', item], []).slice(1);\n}\nexport default class FormItem extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.helpShow = false;\n        // Resolve duplicated ids bug between different forms\n        // https://github.com/ant-design/ant-design/issues/7351\n        this.onLabelClick = () => {\n            const id = this.props.id || this.getId();\n            if (!id) {\n                return;\n            }\n            const formItemNode = ReactDOM.findDOMNode(this);\n            const control = formItemNode.querySelector(`[id=\"${id}\"]`);\n            if (control && control.focus) {\n                control.focus();\n            }\n        };\n        this.onHelpAnimEnd = (_key, helpShow) => {\n            this.helpShow = helpShow;\n            if (!helpShow) {\n                this.setState({});\n            }\n        };\n        this.renderFormItem = ({ getPrefixCls }) => {\n            const _a = this.props, { prefixCls: customizePrefixCls, style, className } = _a, restProps = __rest(_a, [\"prefixCls\", \"style\", \"className\"]);\n            const prefixCls = getPrefixCls('form', customizePrefixCls);\n            const children = this.renderChildren(prefixCls);\n            const itemClassName = {\n                [`${prefixCls}-item`]: true,\n                [`${prefixCls}-item-with-help`]: this.helpShow,\n                [`${className}`]: !!className,\n            };\n            return (<Row className={classNames(itemClassName)} style={style} {...omit(restProps, [\n                'id',\n                'htmlFor',\n                'label',\n                'labelAlign',\n                'labelCol',\n                'wrapperCol',\n                'help',\n                'extra',\n                'validateStatus',\n                'hasFeedback',\n                'required',\n                'colon',\n            ])} key=\"row\">\n        {children}\n      </Row>);\n        };\n    }\n    componentDidMount() {\n        const { children, help, validateStatus, id } = this.props;\n        warning(this.getControls(children, true).length <= 1 ||\n            help !== undefined ||\n            validateStatus !== undefined, 'Form.Item', 'Cannot generate `validateStatus` and `help` automatically, ' +\n            'while there are more than one `getFieldDecorator` in it.');\n        warning(!id, 'Form.Item', '`id` is deprecated for its label `htmlFor`. Please use `htmlFor` directly.');\n    }\n    getHelpMessage() {\n        const { help } = this.props;\n        if (help === undefined && this.getOnlyControl()) {\n            const { errors } = this.getField();\n            if (errors) {\n                return intersperseSpace(errors.map((e, index) => {\n                    let node = null;\n                    if (React.isValidElement(e)) {\n                        node = e;\n                    }\n                    else if (React.isValidElement(e.message)) {\n                        node = e.message;\n                    }\n                    // eslint-disable-next-line react/no-array-index-key\n                    return node ? React.cloneElement(node, { key: index }) : e.message;\n                }));\n            }\n            return '';\n        }\n        return help;\n    }\n    getControls(children, recursively) {\n        let controls = [];\n        const childrenArray = React.Children.toArray(children);\n        for (let i = 0; i < childrenArray.length; i++) {\n            if (!recursively && controls.length > 0) {\n                break;\n            }\n            const child = childrenArray[i];\n            if (child.type &&\n                (child.type === FormItem || child.type.displayName === 'FormItem')) {\n                continue;\n            }\n            if (!child.props) {\n                continue;\n            }\n            if (FIELD_META_PROP in child.props) {\n                // And means FIELD_DATA_PROP in child.props, too.\n                controls.push(child);\n            }\n            else if (child.props.children) {\n                controls = controls.concat(this.getControls(child.props.children, recursively));\n            }\n        }\n        return controls;\n    }\n    getOnlyControl() {\n        const child = this.getControls(this.props.children, false)[0];\n        return child !== undefined ? child : null;\n    }\n    getChildProp(prop) {\n        const child = this.getOnlyControl();\n        return child && child.props && child.props[prop];\n    }\n    getId() {\n        return this.getChildProp('id');\n    }\n    getMeta() {\n        return this.getChildProp(FIELD_META_PROP);\n    }\n    getField() {\n        return this.getChildProp(FIELD_DATA_PROP);\n    }\n    getValidateStatus() {\n        const onlyControl = this.getOnlyControl();\n        if (!onlyControl) {\n            return '';\n        }\n        const field = this.getField();\n        if (field.validating) {\n            return 'validating';\n        }\n        if (field.errors) {\n            return 'error';\n        }\n        const fieldValue = 'value' in field ? field.value : this.getMeta().initialValue;\n        if (fieldValue !== undefined && fieldValue !== null && fieldValue !== '') {\n            return 'success';\n        }\n        return '';\n    }\n    isRequired() {\n        const { required } = this.props;\n        if (required !== undefined) {\n            return required;\n        }\n        if (this.getOnlyControl()) {\n            const meta = this.getMeta() || {};\n            const validate = meta.validate || [];\n            return validate\n                .filter((item) => !!item.rules)\n                .some((item) => {\n                return item.rules.some((rule) => rule.required);\n            });\n        }\n        return false;\n    }\n    renderHelp(prefixCls) {\n        const help = this.getHelpMessage();\n        const children = help ? (<div className={`${prefixCls}-explain`} key=\"help\">\n        {help}\n      </div>) : null;\n        if (children) {\n            this.helpShow = !!children;\n        }\n        return (<Animate transitionName=\"show-help\" component=\"\" transitionAppear key=\"help\" onEnd={this.onHelpAnimEnd}>\n        {children}\n      </Animate>);\n    }\n    renderExtra(prefixCls) {\n        const { extra } = this.props;\n        return extra ? <div className={`${prefixCls}-extra`}>{extra}</div> : null;\n    }\n    renderValidateWrapper(prefixCls, c1, c2, c3) {\n        const { props } = this;\n        const onlyControl = this.getOnlyControl;\n        const validateStatus = props.validateStatus === undefined && onlyControl\n            ? this.getValidateStatus()\n            : props.validateStatus;\n        let classes = `${prefixCls}-item-control`;\n        if (validateStatus) {\n            classes = classNames(`${prefixCls}-item-control`, {\n                'has-feedback': props.hasFeedback || validateStatus === 'validating',\n                'has-success': validateStatus === 'success',\n                'has-warning': validateStatus === 'warning',\n                'has-error': validateStatus === 'error',\n                'is-validating': validateStatus === 'validating',\n            });\n        }\n        let iconType = '';\n        switch (validateStatus) {\n            case 'success':\n                iconType = 'check-circle';\n                break;\n            case 'warning':\n                iconType = 'exclamation-circle';\n                break;\n            case 'error':\n                iconType = 'close-circle';\n                break;\n            case 'validating':\n                iconType = 'loading';\n                break;\n            default:\n                iconType = '';\n                break;\n        }\n        const icon = props.hasFeedback && iconType ? (<span className={`${prefixCls}-item-children-icon`}>\n          <Icon type={iconType} theme={iconType === 'loading' ? 'outlined' : 'filled'}/>\n        </span>) : null;\n        return (<div className={classes}>\n        <span className={`${prefixCls}-item-children`}>\n          {c1}\n          {icon}\n        </span>\n        {c2}\n        {c3}\n      </div>);\n    }\n    renderWrapper(prefixCls, children) {\n        return (<FormContext.Consumer key=\"wrapper\">\n        {({ wrapperCol: contextWrapperCol, vertical }) => {\n            const { wrapperCol } = this.props;\n            const mergedWrapperCol = ('wrapperCol' in this.props ? wrapperCol : contextWrapperCol) || {};\n            const className = classNames(`${prefixCls}-item-control-wrapper`, mergedWrapperCol.className);\n            // No pass FormContext since it's useless\n            return (<FormContext.Provider value={{ vertical }}>\n              <Col {...mergedWrapperCol} className={className}>\n                {children}\n              </Col>\n            </FormContext.Provider>);\n        }}\n      </FormContext.Consumer>);\n    }\n    renderLabel(prefixCls) {\n        return (<FormContext.Consumer key=\"label\">\n        {({ vertical, labelAlign: contextLabelAlign, labelCol: contextLabelCol, colon: contextColon, }) => {\n            const { label, labelCol, labelAlign, colon, id, htmlFor } = this.props;\n            const required = this.isRequired();\n            const mergedLabelCol = ('labelCol' in this.props ? labelCol : contextLabelCol) || {};\n            const mergedLabelAlign = 'labelAlign' in this.props ? labelAlign : contextLabelAlign;\n            const labelClsBasic = `${prefixCls}-item-label`;\n            const labelColClassName = classNames(labelClsBasic, mergedLabelAlign === 'left' && `${labelClsBasic}-left`, mergedLabelCol.className);\n            let labelChildren = label;\n            // Keep label is original where there should have no colon\n            const computedColon = colon === true || (contextColon !== false && colon !== false);\n            const haveColon = computedColon && !vertical;\n            // Remove duplicated user input colon\n            if (haveColon && typeof label === 'string' && label.trim() !== '') {\n                labelChildren = label.replace(/[：:]\\s*$/, '');\n            }\n            const labelClassName = classNames({\n                [`${prefixCls}-item-required`]: required,\n                [`${prefixCls}-item-no-colon`]: !computedColon,\n            });\n            return label ? (<Col {...mergedLabelCol} className={labelColClassName}>\n              <label htmlFor={htmlFor || id || this.getId()} className={labelClassName} title={typeof label === 'string' ? label : ''} onClick={this.onLabelClick}>\n                {labelChildren}\n              </label>\n            </Col>) : null;\n        }}\n      </FormContext.Consumer>);\n    }\n    renderChildren(prefixCls) {\n        const { children } = this.props;\n        return [\n            this.renderLabel(prefixCls),\n            this.renderWrapper(prefixCls, this.renderValidateWrapper(prefixCls, children, this.renderHelp(prefixCls), this.renderExtra(prefixCls))),\n        ];\n    }\n    render() {\n        return <ConfigConsumer>{this.renderFormItem}</ConfigConsumer>;\n    }\n}\nFormItem.defaultProps = {\n    hasFeedback: false,\n};\nFormItem.propTypes = {\n    prefixCls: PropTypes.string,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    labelCol: PropTypes.object,\n    help: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n    validateStatus: PropTypes.oneOf(ValidateStatuses),\n    hasFeedback: PropTypes.bool,\n    wrapperCol: PropTypes.object,\n    className: PropTypes.string,\n    id: PropTypes.string,\n    children: PropTypes.node,\n    colon: PropTypes.bool,\n};\n"]},"metadata":{},"sourceType":"module"}