{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n/* eslint-disable prefer-spread */\n\n\nimport * as React from 'react';\nimport omit from 'omit.js';\nimport RcTable, { INTERNAL_COL_DEFINE } from 'rc-table';\nimport * as PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport shallowEqual from 'shallowequal';\nimport { polyfill } from 'react-lifecycles-compat';\nimport FilterDropdown from './filterDropdown';\nimport createStore from './createStore';\nimport SelectionBox from './SelectionBox';\nimport SelectionCheckboxAll from './SelectionCheckboxAll';\nimport Column from './Column';\nimport ColumnGroup from './ColumnGroup';\nimport createBodyRow from './createBodyRow';\nimport { flatArray, treeMap, flatFilter, normalizeColumns } from './util';\nimport scrollTo from '../_util/scrollTo';\nimport Pagination from '../pagination';\nimport Icon from '../icon';\nimport Spin from '../spin';\nimport TransButton from '../_util/transButton';\nimport LocaleReceiver from '../locale-provider/LocaleReceiver';\nimport defaultLocale from '../locale/default';\nimport { ConfigConsumer } from '../config-provider';\nimport warning from '../_util/warning';\n\nfunction noop() {}\n\nfunction stopPropagation(e) {\n  e.stopPropagation();\n}\n\nfunction getRowSelection(props) {\n  return props.rowSelection || {};\n}\n\nfunction getColumnKey(column, index) {\n  return column.key || column.dataIndex || index;\n}\n\nfunction isSameColumn(a, b) {\n  if (a && b && a.key && a.key === b.key) {\n    return true;\n  }\n\n  return a === b || shallowEqual(a, b, function (value, other) {\n    // https://github.com/ant-design/ant-design/issues/12737\n    if (typeof value === 'function' && typeof other === 'function') {\n      return value === other || value.toString() === other.toString();\n    } // https://github.com/ant-design/ant-design/issues/19398\n\n\n    if (Array.isArray(value) && Array.isArray(other)) {\n      return value === other || shallowEqual(value, other);\n    }\n  });\n}\n\nvar defaultPagination = {\n  onChange: noop,\n  onShowSizeChange: noop\n};\n/**\n * Avoid creating new object, so that parent component's shouldComponentUpdate\n * can works appropriately。\n */\n\nvar emptyObject = {};\n\nvar createComponents = function createComponents() {\n  var components = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var bodyRow = components && components.body && components.body.row;\n  return _extends(_extends({}, components), {\n    body: _extends(_extends({}, components.body), {\n      row: createBodyRow(bodyRow)\n    })\n  });\n};\n\nfunction isTheSameComponents() {\n  var components1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var components2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return components1 === components2 || ['table', 'header', 'body'].every(function (key) {\n    return shallowEqual(components1[key], components2[key]);\n  });\n}\n\nfunction getFilteredValueColumns(state, columns) {\n  return flatFilter(columns || (state || {}).columns || [], function (column) {\n    return typeof column.filteredValue !== 'undefined';\n  });\n}\n\nfunction getFiltersFromColumns() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var columns = arguments.length > 1 ? arguments[1] : undefined;\n  var filters = {};\n  getFilteredValueColumns(state, columns).forEach(function (col) {\n    var colKey = getColumnKey(col);\n    filters[colKey] = col.filteredValue;\n  });\n  return filters;\n}\n\nfunction isFiltersChanged(state, filters) {\n  if (Object.keys(filters).length !== Object.keys(state.filters).length) {\n    return true;\n  }\n\n  return Object.keys(filters).some(function (columnKey) {\n    return filters[columnKey] !== state.filters[columnKey];\n  });\n}\n\nvar Table =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Table, _React$Component);\n\n  function Table(props) {\n    var _this;\n\n    _classCallCheck(this, Table);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Table).call(this, props));\n\n    _this.setTableRef = function (table) {\n      _this.rcTable = table;\n    };\n\n    _this.getCheckboxPropsByItem = function (item, index) {\n      var rowSelection = getRowSelection(_this.props);\n\n      if (!rowSelection.getCheckboxProps) {\n        return {};\n      }\n\n      var key = _this.getRecordKey(item, index); // Cache checkboxProps\n\n\n      if (!_this.props.checkboxPropsCache[key]) {\n        _this.props.checkboxPropsCache[key] = rowSelection.getCheckboxProps(item) || {};\n        var checkboxProps = _this.props.checkboxPropsCache[key];\n        warning(!('checked' in checkboxProps) && !('defaultChecked' in checkboxProps), 'Table', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.');\n      }\n\n      return _this.props.checkboxPropsCache[key];\n    };\n\n    _this.getRecordKey = function (record, index) {\n      var rowKey = _this.props.rowKey;\n      var recordKey = typeof rowKey === 'function' ? rowKey(record, index) : record[rowKey];\n      warning(recordKey !== undefined, 'Table', 'Each record in dataSource of table should have a unique `key` prop, ' + 'or set `rowKey` of Table to an unique primary key, ' + 'see https://u.ant.design/table-row-key');\n      return recordKey === undefined ? index : recordKey;\n    };\n\n    _this.onRow = function (prefixCls, record, index) {\n      var onRow = _this.props.onRow;\n      var custom = onRow ? onRow(record, index) : {};\n      return _extends(_extends({}, custom), {\n        prefixCls: prefixCls,\n        store: _this.props.store,\n        rowKey: _this.getRecordKey(record, index)\n      });\n    };\n\n    _this.generatePopupContainerFunc = function (getPopupContainer) {\n      var scroll = _this.props.scroll;\n      var table = _this.rcTable;\n\n      if (getPopupContainer) {\n        return getPopupContainer;\n      } // Use undefined to let rc component use default logic.\n\n\n      return scroll && table ? function () {\n        return table.tableNode;\n      } : undefined;\n    };\n\n    _this.scrollToFirstRow = function () {\n      var scroll = _this.props.scroll;\n\n      if (scroll && scroll.scrollToFirstRowOnChange !== false) {\n        scrollTo(0, {\n          getContainer: function getContainer() {\n            return _this.rcTable.bodyTable;\n          }\n        });\n      }\n    };\n\n    _this.handleFilter = function (column, nextFilters) {\n      var props = _this.props;\n\n      var pagination = _extends({}, _this.state.pagination);\n\n      var filters = _extends(_extends({}, _this.state.filters), _defineProperty({}, getColumnKey(column), nextFilters)); // Remove filters not in current columns\n\n\n      var currentColumnKeys = [];\n      treeMap(_this.state.columns, function (c) {\n        if (!c.children) {\n          currentColumnKeys.push(getColumnKey(c));\n        }\n      });\n      Object.keys(filters).forEach(function (columnKey) {\n        if (currentColumnKeys.indexOf(columnKey) < 0) {\n          delete filters[columnKey];\n        }\n      });\n\n      if (props.pagination) {\n        // Reset current prop\n        pagination.current = 1;\n        pagination.onChange(pagination.current);\n      }\n\n      var newState = {\n        pagination: pagination,\n        filters: {}\n      };\n\n      var filtersToSetState = _extends({}, filters); // Remove filters which is controlled\n\n\n      getFilteredValueColumns(_this.state).forEach(function (col) {\n        var columnKey = getColumnKey(col);\n\n        if (columnKey) {\n          delete filtersToSetState[columnKey];\n        }\n      });\n\n      if (Object.keys(filtersToSetState).length > 0) {\n        newState.filters = filtersToSetState;\n      } // Controlled current prop will not respond user interaction\n\n\n      if (_typeof(props.pagination) === 'object' && 'current' in props.pagination) {\n        newState.pagination = _extends(_extends({}, pagination), {\n          current: _this.state.pagination.current\n        });\n      }\n\n      _this.setState(newState, function () {\n        _this.scrollToFirstRow();\n\n        _this.props.store.setState({\n          selectionDirty: false\n        });\n\n        var onChange = _this.props.onChange;\n\n        if (onChange) {\n          onChange.apply(null, _this.prepareParamsArguments(_extends(_extends({}, _this.state), {\n            selectionDirty: false,\n            filters: filters,\n            pagination: pagination\n          })));\n        }\n      });\n    };\n\n    _this.handleSelect = function (record, rowIndex, e) {\n      var checked = e.target.checked;\n      var nativeEvent = e.nativeEvent;\n      var defaultSelection = _this.props.store.getState().selectionDirty ? [] : _this.getDefaultSelection();\n\n      var selectedRowKeys = _this.props.store.getState().selectedRowKeys.concat(defaultSelection);\n\n      var key = _this.getRecordKey(record, rowIndex);\n\n      var pivot = _this.state.pivot;\n\n      var rows = _this.getFlatCurrentPageData();\n\n      var realIndex = rowIndex;\n\n      if (_this.props.expandedRowRender) {\n        realIndex = rows.findIndex(function (row) {\n          return _this.getRecordKey(row, rowIndex) === key;\n        });\n      }\n\n      if (nativeEvent.shiftKey && pivot !== undefined && realIndex !== pivot) {\n        var changeRowKeys = [];\n        var direction = Math.sign(pivot - realIndex);\n        var dist = Math.abs(pivot - realIndex);\n        var step = 0;\n\n        var _loop = function _loop() {\n          var i = realIndex + step * direction;\n          step += 1;\n          var row = rows[i];\n\n          var rowKey = _this.getRecordKey(row, i);\n\n          var checkboxProps = _this.getCheckboxPropsByItem(row, i);\n\n          if (!checkboxProps.disabled) {\n            if (selectedRowKeys.includes(rowKey)) {\n              if (!checked) {\n                selectedRowKeys = selectedRowKeys.filter(function (j) {\n                  return rowKey !== j;\n                });\n                changeRowKeys.push(rowKey);\n              }\n            } else if (checked) {\n              selectedRowKeys.push(rowKey);\n              changeRowKeys.push(rowKey);\n            }\n          }\n        };\n\n        while (step <= dist) {\n          _loop();\n        }\n\n        _this.setState({\n          pivot: realIndex\n        });\n\n        _this.props.store.setState({\n          selectionDirty: true\n        });\n\n        _this.setSelectedRowKeys(selectedRowKeys, {\n          selectWay: 'onSelectMultiple',\n          record: record,\n          checked: checked,\n          changeRowKeys: changeRowKeys,\n          nativeEvent: nativeEvent\n        });\n      } else {\n        if (checked) {\n          selectedRowKeys.push(_this.getRecordKey(record, realIndex));\n        } else {\n          selectedRowKeys = selectedRowKeys.filter(function (i) {\n            return key !== i;\n          });\n        }\n\n        _this.setState({\n          pivot: realIndex\n        });\n\n        _this.props.store.setState({\n          selectionDirty: true\n        });\n\n        _this.setSelectedRowKeys(selectedRowKeys, {\n          selectWay: 'onSelect',\n          record: record,\n          checked: checked,\n          changeRowKeys: undefined,\n          nativeEvent: nativeEvent\n        });\n      }\n    };\n\n    _this.handleRadioSelect = function (record, rowIndex, e) {\n      var checked = e.target.checked;\n      var nativeEvent = e.nativeEvent;\n\n      var key = _this.getRecordKey(record, rowIndex);\n\n      var selectedRowKeys = [key];\n\n      _this.props.store.setState({\n        selectionDirty: true\n      });\n\n      _this.setSelectedRowKeys(selectedRowKeys, {\n        selectWay: 'onSelect',\n        record: record,\n        checked: checked,\n        changeRowKeys: undefined,\n        nativeEvent: nativeEvent\n      });\n    };\n\n    _this.handleSelectRow = function (selectionKey, index, onSelectFunc) {\n      var data = _this.getFlatCurrentPageData();\n\n      var defaultSelection = _this.props.store.getState().selectionDirty ? [] : _this.getDefaultSelection();\n\n      var selectedRowKeys = _this.props.store.getState().selectedRowKeys.concat(defaultSelection);\n\n      var changeableRowKeys = data.filter(function (item, i) {\n        return !_this.getCheckboxPropsByItem(item, i).disabled;\n      }).map(function (item, i) {\n        return _this.getRecordKey(item, i);\n      });\n      var changeRowKeys = [];\n      var selectWay = 'onSelectAll';\n      var checked; // handle default selection\n\n      switch (selectionKey) {\n        case 'all':\n          changeableRowKeys.forEach(function (key) {\n            if (selectedRowKeys.indexOf(key) < 0) {\n              selectedRowKeys.push(key);\n              changeRowKeys.push(key);\n            }\n          });\n          selectWay = 'onSelectAll';\n          checked = true;\n          break;\n\n        case 'removeAll':\n          changeableRowKeys.forEach(function (key) {\n            if (selectedRowKeys.indexOf(key) >= 0) {\n              selectedRowKeys.splice(selectedRowKeys.indexOf(key), 1);\n              changeRowKeys.push(key);\n            }\n          });\n          selectWay = 'onSelectAll';\n          checked = false;\n          break;\n\n        case 'invert':\n          changeableRowKeys.forEach(function (key) {\n            if (selectedRowKeys.indexOf(key) < 0) {\n              selectedRowKeys.push(key);\n            } else {\n              selectedRowKeys.splice(selectedRowKeys.indexOf(key), 1);\n            }\n\n            changeRowKeys.push(key);\n            selectWay = 'onSelectInvert';\n          });\n          break;\n\n        default:\n          break;\n      }\n\n      _this.props.store.setState({\n        selectionDirty: true\n      }); // when select custom selection, callback selections[n].onSelect\n\n\n      var rowSelection = _this.props.rowSelection;\n      var customSelectionStartIndex = 2;\n\n      if (rowSelection && rowSelection.hideDefaultSelections) {\n        customSelectionStartIndex = 0;\n      }\n\n      if (index >= customSelectionStartIndex && typeof onSelectFunc === 'function') {\n        return onSelectFunc(changeableRowKeys);\n      }\n\n      _this.setSelectedRowKeys(selectedRowKeys, {\n        selectWay: selectWay,\n        checked: checked,\n        changeRowKeys: changeRowKeys\n      });\n    };\n\n    _this.handlePageChange = function (current) {\n      var props = _this.props;\n\n      var pagination = _extends({}, _this.state.pagination);\n\n      if (current) {\n        pagination.current = current;\n      } else {\n        pagination.current = pagination.current || 1;\n      }\n\n      for (var _len = arguments.length, otherArguments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        otherArguments[_key - 1] = arguments[_key];\n      }\n\n      pagination.onChange.apply(pagination, [pagination.current].concat(otherArguments));\n      var newState = {\n        pagination: pagination\n      }; // Controlled current prop will not respond user interaction\n\n      if (props.pagination && _typeof(props.pagination) === 'object' && 'current' in props.pagination) {\n        newState.pagination = _extends(_extends({}, pagination), {\n          current: _this.state.pagination.current\n        });\n      }\n\n      _this.setState(newState, _this.scrollToFirstRow);\n\n      _this.props.store.setState({\n        selectionDirty: false\n      });\n\n      var onChange = _this.props.onChange;\n\n      if (onChange) {\n        onChange.apply(null, _this.prepareParamsArguments(_extends(_extends({}, _this.state), {\n          selectionDirty: false,\n          pagination: pagination\n        })));\n      }\n    };\n\n    _this.handleShowSizeChange = function (current, pageSize) {\n      var pagination = _this.state.pagination;\n      pagination.onShowSizeChange(current, pageSize);\n\n      var nextPagination = _extends(_extends({}, pagination), {\n        pageSize: pageSize,\n        current: current\n      });\n\n      _this.setState({\n        pagination: nextPagination\n      }, _this.scrollToFirstRow);\n\n      var onChange = _this.props.onChange;\n\n      if (onChange) {\n        onChange.apply(null, _this.prepareParamsArguments(_extends(_extends({}, _this.state), {\n          pagination: nextPagination\n        })));\n      }\n    };\n\n    _this.renderExpandIcon = function (prefixCls) {\n      return function (_ref) {\n        var expandable = _ref.expandable,\n            expanded = _ref.expanded,\n            needIndentSpaced = _ref.needIndentSpaced,\n            record = _ref.record,\n            onExpand = _ref.onExpand;\n\n        if (expandable) {\n          return React.createElement(LocaleReceiver, {\n            componentName: \"Table\",\n            defaultLocale: defaultLocale.Table\n          }, function (locale) {\n            var _classNames;\n\n            return React.createElement(TransButton, {\n              className: classNames(\"\".concat(prefixCls, \"-row-expand-icon\"), (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-row-collapsed\"), !expanded), _defineProperty(_classNames, \"\".concat(prefixCls, \"-row-expanded\"), expanded), _classNames)),\n              onClick: function onClick(event) {\n                onExpand(record, event);\n              },\n              \"aria-label\": expanded ? locale.collapse : locale.expand,\n              noStyle: true\n            });\n          });\n        }\n\n        if (needIndentSpaced) {\n          return React.createElement(\"span\", {\n            className: \"\".concat(prefixCls, \"-row-expand-icon \").concat(prefixCls, \"-row-spaced\")\n          });\n        }\n\n        return null;\n      };\n    };\n\n    _this.renderSelectionBox = function (type) {\n      return function (_, record, index) {\n        var rowKey = _this.getRecordKey(record, index);\n\n        var props = _this.getCheckboxPropsByItem(record, index);\n\n        var handleChange = function handleChange(e) {\n          return type === 'radio' ? _this.handleRadioSelect(record, index, e) : _this.handleSelect(record, index, e);\n        };\n\n        return React.createElement(\"span\", {\n          onClick: stopPropagation\n        }, React.createElement(SelectionBox, _extends({\n          type: type,\n          store: _this.props.store,\n          rowIndex: rowKey,\n          onChange: handleChange,\n          defaultSelection: _this.getDefaultSelection()\n        }, props)));\n      };\n    };\n\n    _this.renderTable = function (_ref2) {\n      var _classNames2;\n\n      var prefixCls = _ref2.prefixCls,\n          renderEmpty = _ref2.renderEmpty,\n          dropdownPrefixCls = _ref2.dropdownPrefixCls,\n          contextLocale = _ref2.contextLocale,\n          contextGetPopupContainer = _ref2.getPopupContainer;\n\n      var _a = _this.props,\n          showHeader = _a.showHeader,\n          locale = _a.locale,\n          getPopupContainer = _a.getPopupContainer,\n          restTableProps = __rest(_a, [\"showHeader\", \"locale\", \"getPopupContainer\"]); // do not pass prop.style to rc-table, since already apply it to container div\n\n\n      var restProps = omit(restTableProps, ['style']);\n\n      var data = _this.getCurrentPageData();\n\n      var expandIconAsCell = _this.props.expandedRowRender && _this.props.expandIconAsCell !== false; // use props.getPopupContainer first\n\n      var realGetPopupContainer = getPopupContainer || contextGetPopupContainer; // Merge too locales\n\n      var mergedLocale = _extends(_extends({}, contextLocale), locale);\n\n      if (!locale || !locale.emptyText) {\n        mergedLocale.emptyText = renderEmpty('Table');\n      }\n\n      var classString = classNames(\"\".concat(prefixCls, \"-\").concat(_this.props.size), (_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(prefixCls, \"-bordered\"), _this.props.bordered), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-empty\"), !data.length), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-without-column-header\"), !showHeader), _classNames2));\n\n      var columnsWithRowSelection = _this.renderRowSelection({\n        prefixCls: prefixCls,\n        locale: mergedLocale,\n        getPopupContainer: realGetPopupContainer\n      });\n\n      var columns = _this.renderColumnsDropdown({\n        columns: columnsWithRowSelection,\n        prefixCls: prefixCls,\n        dropdownPrefixCls: dropdownPrefixCls,\n        locale: mergedLocale,\n        getPopupContainer: realGetPopupContainer\n      }).map(function (column, i) {\n        var newColumn = _extends({}, column);\n\n        newColumn.key = getColumnKey(newColumn, i);\n        return newColumn;\n      });\n\n      var expandIconColumnIndex = columns[0] && columns[0].key === 'selection-column' ? 1 : 0;\n\n      if ('expandIconColumnIndex' in restProps) {\n        expandIconColumnIndex = restProps.expandIconColumnIndex;\n      }\n\n      return React.createElement(RcTable, _extends({\n        ref: _this.setTableRef,\n        key: \"table\",\n        expandIcon: _this.renderExpandIcon(prefixCls)\n      }, restProps, {\n        onRow: function onRow(record, index) {\n          return _this.onRow(prefixCls, record, index);\n        },\n        components: _this.state.components,\n        prefixCls: prefixCls,\n        data: data,\n        columns: columns,\n        showHeader: showHeader,\n        className: classString,\n        expandIconColumnIndex: expandIconColumnIndex,\n        expandIconAsCell: expandIconAsCell,\n        emptyText: mergedLocale.emptyText\n      }));\n    };\n\n    _this.renderComponent = function (_ref3) {\n      var getPrefixCls = _ref3.getPrefixCls,\n          renderEmpty = _ref3.renderEmpty,\n          getPopupContainer = _ref3.getPopupContainer;\n      var _this$props = _this.props,\n          customizePrefixCls = _this$props.prefixCls,\n          customizeDropdownPrefixCls = _this$props.dropdownPrefixCls,\n          style = _this$props.style,\n          className = _this$props.className;\n\n      var data = _this.getCurrentPageData();\n\n      var loading = _this.props.loading;\n\n      if (typeof loading === 'boolean') {\n        loading = {\n          spinning: loading\n        };\n      }\n\n      var prefixCls = getPrefixCls('table', customizePrefixCls);\n      var dropdownPrefixCls = getPrefixCls('dropdown', customizeDropdownPrefixCls);\n      var table = React.createElement(LocaleReceiver, {\n        componentName: \"Table\",\n        defaultLocale: defaultLocale.Table\n      }, function (locale) {\n        return _this.renderTable({\n          prefixCls: prefixCls,\n          renderEmpty: renderEmpty,\n          dropdownPrefixCls: dropdownPrefixCls,\n          contextLocale: locale,\n          getPopupContainer: getPopupContainer\n        });\n      }); // if there is no pagination or no data,\n      // the height of spin should decrease by half of pagination\n\n      var paginationPatchClass = _this.hasPagination() && data && data.length !== 0 ? \"\".concat(prefixCls, \"-with-pagination\") : \"\".concat(prefixCls, \"-without-pagination\");\n      return React.createElement(\"div\", {\n        className: classNames(\"\".concat(prefixCls, \"-wrapper\"), className),\n        style: style\n      }, React.createElement(Spin, _extends({}, loading, {\n        className: loading.spinning ? \"\".concat(paginationPatchClass, \" \").concat(prefixCls, \"-spin-holder\") : ''\n      }), _this.renderPagination(prefixCls, 'top'), table, _this.renderPagination(prefixCls, 'bottom')));\n    };\n\n    var expandedRowRender = props.expandedRowRender,\n        columnsProp = props.columns;\n    warning(!('columnsPageRange' in props || 'columnsPageSize' in props), 'Table', '`columnsPageRange` and `columnsPageSize` are removed, please use ' + 'fixed columns instead, see: https://u.ant.design/fixed-columns.');\n\n    if (expandedRowRender && (columnsProp || []).some(function (_ref4) {\n      var fixed = _ref4.fixed;\n      return !!fixed;\n    })) {\n      warning(false, 'Table', '`expandedRowRender` and `Column.fixed` are not compatible. Please use one of them at one time.');\n    }\n\n    var columns = columnsProp || normalizeColumns(props.children);\n    _this.state = _extends(_extends({}, _this.getDefaultSortOrder(columns || [])), {\n      // 减少状态\n      filters: _this.getDefaultFilters(columns),\n      pagination: _this.getDefaultPagination(props),\n      pivot: undefined,\n      prevProps: props,\n      components: createComponents(props.components),\n      columns: columns\n    });\n    return _this;\n  }\n\n  _createClass(Table, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this$state = this.state,\n          columns = _this$state.columns,\n          sortColumn = _this$state.sortColumn,\n          sortOrder = _this$state.sortOrder;\n\n      if (this.getSortOrderColumns(columns).length > 0) {\n        var sortState = this.getSortStateFromColumns(columns);\n\n        if (!isSameColumn(sortState.sortColumn, sortColumn) || sortState.sortOrder !== sortOrder) {\n          this.setState(sortState);\n        }\n      }\n    }\n  }, {\n    key: \"getDefaultSelection\",\n    value: function getDefaultSelection() {\n      var _this2 = this;\n\n      var rowSelection = getRowSelection(this.props);\n\n      if (!rowSelection.getCheckboxProps) {\n        return [];\n      }\n\n      return this.getFlatData().filter(function (item, rowIndex) {\n        return _this2.getCheckboxPropsByItem(item, rowIndex).defaultChecked;\n      }).map(function (record, rowIndex) {\n        return _this2.getRecordKey(record, rowIndex);\n      });\n    }\n  }, {\n    key: \"getDefaultPagination\",\n    value: function getDefaultPagination(props) {\n      var pagination = _typeof(props.pagination) === 'object' ? props.pagination : {};\n      var current;\n\n      if ('current' in pagination) {\n        current = pagination.current;\n      } else if ('defaultCurrent' in pagination) {\n        current = pagination.defaultCurrent;\n      }\n\n      var pageSize;\n\n      if ('pageSize' in pagination) {\n        pageSize = pagination.pageSize;\n      } else if ('defaultPageSize' in pagination) {\n        pageSize = pagination.defaultPageSize;\n      }\n\n      return this.hasPagination(props) ? _extends(_extends(_extends({}, defaultPagination), pagination), {\n        current: current || 1,\n        pageSize: pageSize || 10\n      }) : {};\n    }\n  }, {\n    key: \"getSortOrderColumns\",\n    value: function getSortOrderColumns(columns) {\n      return flatFilter(columns || (this.state || {}).columns || [], function (column) {\n        return 'sortOrder' in column;\n      });\n    }\n  }, {\n    key: \"getDefaultFilters\",\n    value: function getDefaultFilters(columns) {\n      var definedFilters = getFiltersFromColumns(this.state, columns);\n      var defaultFilteredValueColumns = flatFilter(columns || [], function (column) {\n        return typeof column.defaultFilteredValue !== 'undefined';\n      });\n      var defaultFilters = defaultFilteredValueColumns.reduce(function (soFar, col) {\n        var colKey = getColumnKey(col);\n        soFar[colKey] = col.defaultFilteredValue;\n        return soFar;\n      }, {});\n      return _extends(_extends({}, defaultFilters), definedFilters);\n    }\n  }, {\n    key: \"getDefaultSortOrder\",\n    value: function getDefaultSortOrder(columns) {\n      var definedSortState = this.getSortStateFromColumns(columns);\n      var defaultSortedColumn = flatFilter(columns || [], function (column) {\n        return column.defaultSortOrder != null;\n      })[0];\n\n      if (defaultSortedColumn && !definedSortState.sortColumn) {\n        return {\n          sortColumn: defaultSortedColumn,\n          sortOrder: defaultSortedColumn.defaultSortOrder\n        };\n      }\n\n      return definedSortState;\n    }\n  }, {\n    key: \"getSortStateFromColumns\",\n    value: function getSortStateFromColumns(columns) {\n      // return first column which sortOrder is not falsy\n      var sortedColumn = this.getSortOrderColumns(columns).filter(function (col) {\n        return col.sortOrder;\n      })[0];\n\n      if (sortedColumn) {\n        return {\n          sortColumn: sortedColumn,\n          sortOrder: sortedColumn.sortOrder\n        };\n      }\n\n      return {\n        sortColumn: null,\n        sortOrder: null\n      };\n    }\n  }, {\n    key: \"getMaxCurrent\",\n    value: function getMaxCurrent(total) {\n      var _this$state$paginatio = this.state.pagination,\n          current = _this$state$paginatio.current,\n          pageSize = _this$state$paginatio.pageSize;\n\n      if ((current - 1) * pageSize >= total) {\n        return Math.floor((total - 1) / pageSize) + 1;\n      }\n\n      return current;\n    }\n  }, {\n    key: \"getSorterFn\",\n    value: function getSorterFn(state) {\n      var _ref5 = state || this.state,\n          sortOrder = _ref5.sortOrder,\n          sortColumn = _ref5.sortColumn;\n\n      if (!sortOrder || !sortColumn || typeof sortColumn.sorter !== 'function') {\n        return;\n      }\n\n      return function (a, b) {\n        var result = sortColumn.sorter(a, b, sortOrder);\n\n        if (result !== 0) {\n          return sortOrder === 'descend' ? -result : result;\n        }\n\n        return 0;\n      };\n    }\n  }, {\n    key: \"getCurrentPageData\",\n    value: function getCurrentPageData() {\n      var data = this.getLocalData();\n      var current;\n      var pageSize;\n      var state = this.state; // 如果没有分页的话，默认全部展示\n\n      if (!this.hasPagination()) {\n        pageSize = Number.MAX_VALUE;\n        current = 1;\n      } else {\n        pageSize = state.pagination.pageSize;\n        current = this.getMaxCurrent(state.pagination.total || data.length);\n      } // 分页\n      // ---\n      // 当数据量少于等于每页数量时，直接设置数据\n      // 否则进行读取分页数据\n\n\n      if (data.length > pageSize || pageSize === Number.MAX_VALUE) {\n        data = data.slice((current - 1) * pageSize, current * pageSize);\n      }\n\n      return data;\n    }\n  }, {\n    key: \"getFlatData\",\n    value: function getFlatData() {\n      var childrenColumnName = this.props.childrenColumnName;\n      return flatArray(this.getLocalData(null, false), childrenColumnName);\n    }\n  }, {\n    key: \"getFlatCurrentPageData\",\n    value: function getFlatCurrentPageData() {\n      var childrenColumnName = this.props.childrenColumnName;\n      return flatArray(this.getCurrentPageData(), childrenColumnName);\n    }\n  }, {\n    key: \"getLocalData\",\n    value: function getLocalData(state) {\n      var _this3 = this;\n\n      var filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var currentState = state || this.state;\n      var dataSource = this.props.dataSource;\n      var data = dataSource || []; // 优化本地排序\n\n      data = data.slice(0);\n      var sorterFn = this.getSorterFn(currentState);\n\n      if (sorterFn) {\n        data = this.recursiveSort(data, sorterFn);\n      } // 筛选\n\n\n      if (filter && currentState.filters) {\n        Object.keys(currentState.filters).forEach(function (columnKey) {\n          var col = _this3.findColumn(columnKey);\n\n          if (!col) {\n            return;\n          }\n\n          var values = currentState.filters[columnKey] || [];\n\n          if (values.length === 0) {\n            return;\n          }\n\n          var onFilter = col.onFilter;\n          data = onFilter ? data.filter(function (record) {\n            return values.some(function (v) {\n              return onFilter(v, record);\n            });\n          }) : data;\n        });\n      }\n\n      return data;\n    }\n  }, {\n    key: \"setSelectedRowKeys\",\n    value: function setSelectedRowKeys(selectedRowKeys, selectionInfo) {\n      var _this4 = this;\n\n      var selectWay = selectionInfo.selectWay,\n          record = selectionInfo.record,\n          checked = selectionInfo.checked,\n          changeRowKeys = selectionInfo.changeRowKeys,\n          nativeEvent = selectionInfo.nativeEvent;\n      var rowSelection = getRowSelection(this.props);\n\n      if (rowSelection && !('selectedRowKeys' in rowSelection)) {\n        this.props.store.setState({\n          selectedRowKeys: selectedRowKeys\n        });\n      }\n\n      var data = this.getFlatData();\n\n      if (!rowSelection.onChange && !rowSelection[selectWay]) {\n        return;\n      }\n\n      var selectedRows = data.filter(function (row, i) {\n        return selectedRowKeys.indexOf(_this4.getRecordKey(row, i)) >= 0;\n      });\n\n      if (rowSelection.onChange) {\n        rowSelection.onChange(selectedRowKeys, selectedRows);\n      }\n\n      if (selectWay === 'onSelect' && rowSelection.onSelect) {\n        rowSelection.onSelect(record, checked, selectedRows, nativeEvent);\n      } else if (selectWay === 'onSelectMultiple' && rowSelection.onSelectMultiple) {\n        var changeRows = data.filter(function (row, i) {\n          return changeRowKeys.indexOf(_this4.getRecordKey(row, i)) >= 0;\n        });\n        rowSelection.onSelectMultiple(checked, selectedRows, changeRows);\n      } else if (selectWay === 'onSelectAll' && rowSelection.onSelectAll) {\n        var _changeRows = data.filter(function (row, i) {\n          return changeRowKeys.indexOf(_this4.getRecordKey(row, i)) >= 0;\n        });\n\n        rowSelection.onSelectAll(checked, selectedRows, _changeRows);\n      } else if (selectWay === 'onSelectInvert' && rowSelection.onSelectInvert) {\n        rowSelection.onSelectInvert(selectedRowKeys);\n      }\n    }\n  }, {\n    key: \"toggleSortOrder\",\n    value: function toggleSortOrder(column) {\n      var sortDirections = column.sortDirections || this.props.sortDirections;\n      var _this$state2 = this.state,\n          sortOrder = _this$state2.sortOrder,\n          sortColumn = _this$state2.sortColumn; // 只同时允许一列进行排序，否则会导致排序顺序的逻辑问题\n\n      var newSortOrder; // 切换另一列时，丢弃 sortOrder 的状态\n\n      if (isSameColumn(sortColumn, column) && sortOrder !== undefined) {\n        // 按照sortDirections的内容依次切换排序状态\n        var methodIndex = sortDirections.indexOf(sortOrder) + 1;\n        newSortOrder = methodIndex === sortDirections.length ? undefined : sortDirections[methodIndex];\n      } else {\n        newSortOrder = sortDirections[0];\n      }\n\n      var newState = {\n        sortOrder: newSortOrder,\n        sortColumn: newSortOrder ? column : null\n      }; // Controlled\n\n      if (this.getSortOrderColumns().length === 0) {\n        this.setState(newState, this.scrollToFirstRow);\n      }\n\n      var onChange = this.props.onChange;\n\n      if (onChange) {\n        onChange.apply(null, this.prepareParamsArguments(_extends(_extends({}, this.state), newState), column));\n      }\n    }\n  }, {\n    key: \"hasPagination\",\n    value: function hasPagination(props) {\n      return (props || this.props).pagination !== false;\n    }\n  }, {\n    key: \"isSortColumn\",\n    value: function isSortColumn(column) {\n      var sortColumn = this.state.sortColumn;\n\n      if (!column || !sortColumn) {\n        return false;\n      }\n\n      return getColumnKey(sortColumn) === getColumnKey(column);\n    } // Get pagination, filters, sorter\n\n  }, {\n    key: \"prepareParamsArguments\",\n    value: function prepareParamsArguments(state, column) {\n      var pagination = _extends({}, state.pagination); // remove useless handle function in Table.onChange\n\n\n      delete pagination.onChange;\n      delete pagination.onShowSizeChange;\n      var filters = state.filters;\n      var sorter = {};\n      var currentColumn = column;\n\n      if (state.sortColumn && state.sortOrder) {\n        currentColumn = state.sortColumn;\n        sorter.column = state.sortColumn;\n        sorter.order = state.sortOrder;\n      }\n\n      if (currentColumn) {\n        sorter.field = currentColumn.dataIndex;\n        sorter.columnKey = getColumnKey(currentColumn);\n      }\n\n      var extra = {\n        currentDataSource: this.getLocalData(state)\n      };\n      return [pagination, filters, sorter, extra];\n    }\n  }, {\n    key: \"findColumn\",\n    value: function findColumn(myKey) {\n      var column;\n      treeMap(this.state.columns, function (c) {\n        if (getColumnKey(c) === myKey) {\n          column = c;\n        }\n      });\n      return column;\n    }\n  }, {\n    key: \"recursiveSort\",\n    value: function recursiveSort(data, sorterFn) {\n      var _this5 = this;\n\n      var _this$props$childrenC = this.props.childrenColumnName,\n          childrenColumnName = _this$props$childrenC === void 0 ? 'children' : _this$props$childrenC;\n      return data.sort(sorterFn).map(function (item) {\n        return item[childrenColumnName] ? _extends(_extends({}, item), _defineProperty({}, childrenColumnName, _this5.recursiveSort(item[childrenColumnName], sorterFn))) : item;\n      });\n    }\n  }, {\n    key: \"renderPagination\",\n    value: function renderPagination(prefixCls, paginationPosition) {\n      // 强制不需要分页\n      if (!this.hasPagination()) {\n        return null;\n      }\n\n      var size = 'default';\n      var pagination = this.state.pagination;\n\n      if (pagination.size) {\n        size = pagination.size;\n      } else if (this.props.size === 'middle' || this.props.size === 'small') {\n        size = 'small';\n      }\n\n      var position = pagination.position || 'bottom';\n      var total = pagination.total || this.getLocalData().length;\n      return total > 0 && (position === paginationPosition || position === 'both') ? React.createElement(Pagination, _extends({\n        key: \"pagination-\".concat(paginationPosition)\n      }, pagination, {\n        className: classNames(pagination.className, \"\".concat(prefixCls, \"-pagination\")),\n        onChange: this.handlePageChange,\n        total: total,\n        size: size,\n        current: this.getMaxCurrent(total),\n        onShowSizeChange: this.handleShowSizeChange\n      })) : null;\n    }\n  }, {\n    key: \"renderRowSelection\",\n    value: function renderRowSelection(_ref6) {\n      var _this6 = this;\n\n      var prefixCls = _ref6.prefixCls,\n          locale = _ref6.locale,\n          getPopupContainer = _ref6.getPopupContainer;\n      var rowSelection = this.props.rowSelection;\n      var columns = this.state.columns.concat();\n\n      if (rowSelection) {\n        var data = this.getFlatCurrentPageData().filter(function (item, index) {\n          if (rowSelection.getCheckboxProps) {\n            return !_this6.getCheckboxPropsByItem(item, index).disabled;\n          }\n\n          return true;\n        });\n        var selectionColumnClass = classNames(\"\".concat(prefixCls, \"-selection-column\"), _defineProperty({}, \"\".concat(prefixCls, \"-selection-column-custom\"), rowSelection.selections));\n\n        var selectionColumn = _defineProperty({\n          key: 'selection-column',\n          render: this.renderSelectionBox(rowSelection.type),\n          className: selectionColumnClass,\n          fixed: rowSelection.fixed,\n          width: rowSelection.columnWidth,\n          title: rowSelection.columnTitle\n        }, INTERNAL_COL_DEFINE, {\n          className: \"\".concat(prefixCls, \"-selection-col\")\n        });\n\n        if (rowSelection.type !== 'radio') {\n          var checkboxAllDisabled = data.every(function (item, index) {\n            return _this6.getCheckboxPropsByItem(item, index).disabled;\n          });\n          selectionColumn.title = selectionColumn.title || React.createElement(SelectionCheckboxAll, {\n            store: this.props.store,\n            locale: locale,\n            data: data,\n            getCheckboxPropsByItem: this.getCheckboxPropsByItem,\n            getRecordKey: this.getRecordKey,\n            disabled: checkboxAllDisabled,\n            prefixCls: prefixCls,\n            onSelect: this.handleSelectRow,\n            selections: rowSelection.selections,\n            hideDefaultSelections: rowSelection.hideDefaultSelections,\n            getPopupContainer: this.generatePopupContainerFunc(getPopupContainer)\n          });\n        }\n\n        if ('fixed' in rowSelection) {\n          selectionColumn.fixed = rowSelection.fixed;\n        } else if (columns.some(function (column) {\n          return column.fixed === 'left' || column.fixed === true;\n        })) {\n          selectionColumn.fixed = 'left';\n        }\n\n        if (columns[0] && columns[0].key === 'selection-column') {\n          columns[0] = selectionColumn;\n        } else {\n          columns.unshift(selectionColumn);\n        }\n      }\n\n      return columns;\n    }\n  }, {\n    key: \"renderColumnsDropdown\",\n    value: function renderColumnsDropdown(_ref7) {\n      var _this7 = this;\n\n      var prefixCls = _ref7.prefixCls,\n          dropdownPrefixCls = _ref7.dropdownPrefixCls,\n          columns = _ref7.columns,\n          locale = _ref7.locale,\n          getPopupContainer = _ref7.getPopupContainer;\n      var _this$state3 = this.state,\n          sortOrder = _this$state3.sortOrder,\n          filters = _this$state3.filters;\n      return treeMap(columns, function (column, i) {\n        var _classNames4;\n\n        var key = getColumnKey(column, i);\n        var filterDropdown;\n        var sortButton;\n        var onHeaderCell = column.onHeaderCell;\n\n        var isSortColumn = _this7.isSortColumn(column);\n\n        if (column.filters && column.filters.length > 0 || column.filterDropdown) {\n          var colFilters = key in filters ? filters[key] : [];\n          filterDropdown = React.createElement(FilterDropdown, {\n            locale: locale,\n            column: column,\n            selectedKeys: colFilters,\n            confirmFilter: _this7.handleFilter,\n            prefixCls: \"\".concat(prefixCls, \"-filter\"),\n            dropdownPrefixCls: dropdownPrefixCls || 'ant-dropdown',\n            getPopupContainer: _this7.generatePopupContainerFunc(getPopupContainer),\n            key: \"filter-dropdown\"\n          });\n        }\n\n        if (column.sorter) {\n          var sortDirections = column.sortDirections || _this7.props.sortDirections;\n          var isAscend = isSortColumn && sortOrder === 'ascend';\n          var isDescend = isSortColumn && sortOrder === 'descend';\n          var ascend = sortDirections.indexOf('ascend') !== -1 && React.createElement(Icon, {\n            className: \"\".concat(prefixCls, \"-column-sorter-up \").concat(isAscend ? 'on' : 'off'),\n            type: \"caret-up\",\n            theme: \"filled\"\n          });\n          var descend = sortDirections.indexOf('descend') !== -1 && React.createElement(Icon, {\n            className: \"\".concat(prefixCls, \"-column-sorter-down \").concat(isDescend ? 'on' : 'off'),\n            type: \"caret-down\",\n            theme: \"filled\"\n          });\n          sortButton = React.createElement(\"div\", {\n            title: locale.sortTitle,\n            className: classNames(\"\".concat(prefixCls, \"-column-sorter-inner\"), ascend && descend && \"\".concat(prefixCls, \"-column-sorter-inner-full\")),\n            key: \"sorter\"\n          }, ascend, descend);\n\n          onHeaderCell = function onHeaderCell(col) {\n            var colProps = {}; // Get original first\n\n            if (column.onHeaderCell) {\n              colProps = _extends({}, column.onHeaderCell(col));\n            } // Add sorter logic\n\n\n            var onHeaderCellClick = colProps.onClick;\n\n            colProps.onClick = function () {\n              _this7.toggleSortOrder(column);\n\n              if (onHeaderCellClick) {\n                onHeaderCellClick.apply(void 0, arguments);\n              }\n            };\n\n            return colProps;\n          };\n        }\n\n        return _extends(_extends({}, column), {\n          className: classNames(column.className, (_classNames4 = {}, _defineProperty(_classNames4, \"\".concat(prefixCls, \"-column-has-actions\"), sortButton || filterDropdown), _defineProperty(_classNames4, \"\".concat(prefixCls, \"-column-has-filters\"), filterDropdown), _defineProperty(_classNames4, \"\".concat(prefixCls, \"-column-has-sorters\"), sortButton), _defineProperty(_classNames4, \"\".concat(prefixCls, \"-column-sort\"), isSortColumn && sortOrder), _classNames4)),\n          title: [React.createElement(\"span\", {\n            key: \"title\",\n            className: \"\".concat(prefixCls, \"-header-column\")\n          }, React.createElement(\"div\", {\n            className: sortButton ? \"\".concat(prefixCls, \"-column-sorters\") : undefined\n          }, React.createElement(\"span\", {\n            className: \"\".concat(prefixCls, \"-column-title\")\n          }, _this7.renderColumnTitle(column.title)), React.createElement(\"span\", {\n            className: \"\".concat(prefixCls, \"-column-sorter\")\n          }, sortButton))), filterDropdown],\n          onHeaderCell: onHeaderCell\n        });\n      });\n    }\n  }, {\n    key: \"renderColumnTitle\",\n    value: function renderColumnTitle(title) {\n      var _this$state4 = this.state,\n          filters = _this$state4.filters,\n          sortOrder = _this$state4.sortOrder,\n          sortColumn = _this$state4.sortColumn; // https://github.com/ant-design/ant-design/issues/11246#issuecomment-405009167\n\n      if (title instanceof Function) {\n        return title({\n          filters: filters,\n          sortOrder: sortOrder,\n          sortColumn: sortColumn\n        });\n      }\n\n      return title;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ConfigConsumer, null, this.renderComponent);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var prevProps = prevState.prevProps;\n      var columns = nextProps.columns || normalizeColumns(nextProps.children);\n\n      var nextState = _extends(_extends({}, prevState), {\n        prevProps: nextProps,\n        columns: columns\n      });\n\n      if ('pagination' in nextProps || 'pagination' in prevProps) {\n        var newPagination = _extends(_extends(_extends({}, defaultPagination), prevState.pagination), nextProps.pagination);\n\n        newPagination.current = newPagination.current || 1;\n        newPagination.pageSize = newPagination.pageSize || 10;\n        nextState = _extends(_extends({}, nextState), {\n          pagination: nextProps.pagination !== false ? newPagination : emptyObject\n        });\n      }\n\n      if (nextProps.rowSelection && 'selectedRowKeys' in nextProps.rowSelection) {\n        nextProps.store.setState({\n          selectedRowKeys: nextProps.rowSelection.selectedRowKeys || []\n        });\n      } else if (prevProps.rowSelection && !nextProps.rowSelection) {\n        nextProps.store.setState({\n          selectedRowKeys: []\n        });\n      }\n\n      if ('dataSource' in nextProps && nextProps.dataSource !== prevProps.dataSource) {\n        nextProps.store.setState({\n          selectionDirty: false\n        });\n      } // https://github.com/ant-design/ant-design/issues/10133\n\n\n      nextProps.setCheckboxPropsCache({}); // Update filters\n\n      var filteredValueColumns = getFilteredValueColumns(nextState, nextState.columns);\n\n      if (filteredValueColumns.length > 0) {\n        var filtersFromColumns = getFiltersFromColumns(nextState, nextState.columns);\n\n        var newFilters = _extends({}, nextState.filters);\n\n        Object.keys(filtersFromColumns).forEach(function (key) {\n          newFilters[key] = filtersFromColumns[key];\n        });\n\n        if (isFiltersChanged(nextState, newFilters)) {\n          nextState = _extends(_extends({}, nextState), {\n            filters: newFilters\n          });\n        }\n      }\n\n      if (!isTheSameComponents(nextProps.components, prevProps.components)) {\n        var components = createComponents(nextProps.components);\n        nextState = _extends(_extends({}, nextState), {\n          components: components\n        });\n      }\n\n      return nextState;\n    }\n  }]);\n\n  return Table;\n}(React.Component);\n\nTable.propTypes = {\n  dataSource: PropTypes.array,\n  columns: PropTypes.array,\n  prefixCls: PropTypes.string,\n  useFixedHeader: PropTypes.bool,\n  rowSelection: PropTypes.object,\n  className: PropTypes.string,\n  size: PropTypes.string,\n  loading: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  bordered: PropTypes.bool,\n  onChange: PropTypes.func,\n  locale: PropTypes.object,\n  dropdownPrefixCls: PropTypes.string,\n  sortDirections: PropTypes.array,\n  getPopupContainer: PropTypes.func\n};\nTable.defaultProps = {\n  dataSource: [],\n  useFixedHeader: false,\n  className: '',\n  size: 'default',\n  loading: false,\n  bordered: false,\n  indentSize: 20,\n  locale: {},\n  rowKey: 'key',\n  showHeader: true,\n  sortDirections: ['ascend', 'descend'],\n  childrenColumnName: 'children'\n};\npolyfill(Table);\n\nvar StoreTable =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(StoreTable, _React$Component2);\n\n  function StoreTable(props) {\n    var _this8;\n\n    _classCallCheck(this, StoreTable);\n\n    _this8 = _possibleConstructorReturn(this, _getPrototypeOf(StoreTable).call(this, props));\n\n    _this8.setCheckboxPropsCache = function (cache) {\n      return _this8.CheckboxPropsCache = cache;\n    };\n\n    _this8.CheckboxPropsCache = {};\n    _this8.store = createStore({\n      selectedRowKeys: getRowSelection(props).selectedRowKeys || [],\n      selectionDirty: false\n    });\n    return _this8;\n  }\n\n  _createClass(StoreTable, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Table, _extends({}, this.props, {\n        store: this.store,\n        checkboxPropsCache: this.CheckboxPropsCache,\n        setCheckboxPropsCache: this.setCheckboxPropsCache\n      }));\n    }\n  }]);\n\n  return StoreTable;\n}(React.Component);\n\nStoreTable.displayName = 'withStore(Table)';\nStoreTable.Column = Column;\nStoreTable.ColumnGroup = ColumnGroup;\nexport default StoreTable;","map":{"version":3,"sources":["table/Table.jsx"],"names":["__rest","t","Object","e","s","i","p","props","column","a","b","shallowEqual","value","other","Array","defaultPagination","onChange","onShowSizeChange","noop","emptyObject","createComponents","components","bodyRow","body","row","createBodyRow","components1","components2","flatFilter","columns","state","filters","getFilteredValueColumns","colKey","getColumnKey","col","Table","React","Component","rowSelection","getRowSelection","key","checkboxProps","warning","rowKey","recordKey","record","onRow","custom","prefixCls","store","scroll","table","scrollTo","getContainer","pagination","currentColumnKeys","treeMap","c","newState","filtersToSetState","columnKey","current","selectionDirty","checked","nativeEvent","defaultSelection","selectedRowKeys","pivot","rows","realIndex","changeRowKeys","direction","Math","dist","step","selectWay","data","changeableRowKeys","customSelectionStartIndex","index","onSelectFunc","otherArguments","nextPagination","pageSize","expandable","expanded","needIndentSpaced","onExpand","defaultLocale","classNames","locale","handleChange","type","stopPropagation","renderEmpty","dropdownPrefixCls","contextLocale","getPopupContainer","contextGetPopupContainer","showHeader","_a","restTableProps","restProps","omit","expandIconAsCell","realGetPopupContainer","mergedLocale","classString","columnsWithRowSelection","newColumn","expandIconColumnIndex","emptyText","getPrefixCls","customizePrefixCls","customizeDropdownPrefixCls","style","className","loading","spinning","paginationPatchClass","expandedRowRender","columnsProp","fixed","normalizeColumns","prevProps","nextProps","prevState","nextState","newPagination","filteredValueColumns","filtersFromColumns","getFiltersFromColumns","newFilters","isFiltersChanged","isTheSameComponents","sortColumn","sortOrder","sortState","isSameColumn","definedFilters","defaultFilteredValueColumns","defaultFilters","soFar","definedSortState","defaultSortedColumn","defaultSortOrder","sortedColumn","total","result","Number","childrenColumnName","flatArray","filter","currentState","dataSource","sorterFn","values","onFilter","selectionInfo","selectedRows","changeRows","sortDirections","methodIndex","newSortOrder","sorter","currentColumn","extra","currentDataSource","myKey","item","paginationPosition","size","position","handleShowSizeChange","selectionColumnClass","selectionColumn","render","width","title","columnTitle","checkboxAllDisabled","onHeaderCell","isSortColumn","colFilters","filterDropdown","isAscend","isDescend","ascend","descend","sortButton","colProps","onHeaderCellClick","undefined","PropTypes","useFixedHeader","bordered","func","indentSize","polyfill","StoreTable","createStore","setCheckboxPropsCache"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,MAAM,GAAI,QAAQ,KAAT,MAAC,IAAwB,UAAA,CAAA,EAAA,CAAA,EAAgB;AAClD,MAAIC,CAAC,GAAL,EAAA;;AACA,OAAK,IAAL,CAAA,IAAA,CAAA,EAAA;AAAiB,QAAIC,MAAM,CAANA,SAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,KAA8CC,CAAC,CAADA,OAAAA,CAAAA,CAAAA,IAAlD,CAAA,EACbF,CAAC,CAADA,CAAC,CAADA,GAAOG,CAAC,CAARH,CAAQ,CAARA;AADJ;;AAEA,MAAIG,CAAC,IAADA,IAAAA,IAAa,OAAOF,MAAM,CAAb,qBAAA,KAAjB,UAAA,EACI,KAAK,IAAIG,CAAC,GAAL,CAAA,EAAWC,CAAC,GAAGJ,MAAM,CAANA,qBAAAA,CAApB,CAAoBA,CAApB,EAAqDG,CAAC,GAAGC,CAAC,CAA1D,MAAA,EAAmED,CAAnE,EAAA,EAAwE;AACpE,QAAIF,CAAC,CAADA,OAAAA,CAAUG,CAAC,CAAXH,CAAW,CAAXA,IAAAA,CAAAA,IAAuBD,MAAM,CAANA,SAAAA,CAAAA,oBAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAA8CI,CAAC,CAA1E,CAA0E,CAA/CJ,CAA3B,EACID,CAAC,CAACK,CAAC,CAAHL,CAAG,CAAF,CAADA,GAAUG,CAAC,CAACE,CAAC,CAAbL,CAAa,CAAF,CAAXA;AACP;AACL,SAAA,CAAA;AATJ,CAAA;AAWA;;;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAA,IAAA,MAAA,SAAA;AACA,OAAA,OAAA,IAAA,mBAAA,QAAA,UAAA;AACA,OAAO,KAAP,SAAA,MAAA,YAAA;AACA,OAAA,UAAA,MAAA,YAAA;AACA,OAAA,YAAA,MAAA,cAAA;AACA,SAAA,QAAA,QAAA,yBAAA;AACA,OAAA,cAAA,MAAA,kBAAA;AACA,OAAA,WAAA,MAAA,eAAA;AACA,OAAA,YAAA,MAAA,gBAAA;AACA,OAAA,oBAAA,MAAA,wBAAA;AACA,OAAA,MAAA,MAAA,UAAA;AACA,OAAA,WAAA,MAAA,eAAA;AACA,OAAA,aAAA,MAAA,iBAAA;AACA,SAAA,SAAA,EAAA,OAAA,EAAA,UAAA,EAAA,gBAAA,QAAA,QAAA;AACA,OAAA,QAAA,MAAA,mBAAA;AACA,OAAA,UAAA,MAAA,eAAA;AACA,OAAA,IAAA,MAAA,SAAA;AACA,OAAA,IAAA,MAAA,SAAA;AACA,OAAA,WAAA,MAAA,sBAAA;AACA,OAAA,cAAA,MAAA,mCAAA;AACA,OAAA,aAAA,MAAA,mBAAA;AACA,SAAA,cAAA,QAAA,oBAAA;AACA,OAAA,OAAA,MAAA,kBAAA;;AACA,SAAA,IAAA,GAAgB,CAAG;;AACnB,SAAA,eAAA,CAAA,CAAA,EAA4B;AACxBE,EAAAA,CAAC,CAADA,eAAAA;AACH;;AACD,SAAA,eAAA,CAAA,KAAA,EAAgC;AAC5B,SAAOI,KAAK,CAALA,YAAAA,IAAP,EAAA;AACH;;AACD,SAAA,YAAA,CAAA,MAAA,EAAA,KAAA,EAAqC;AACjC,SAAOC,MAAM,CAANA,GAAAA,IAAcA,MAAM,CAApBA,SAAAA,IAAP,KAAA;AACH;;AACD,SAAA,YAAA,CAAA,CAAA,EAAA,CAAA,EAA4B;AACxB,MAAIC,CAAC,IAADA,CAAAA,IAAUA,CAAC,CAAXA,GAAAA,IAAmBA,CAAC,CAADA,GAAAA,KAAUC,CAAC,CAAlC,GAAA,EAAwC;AACpC,WAAA,IAAA;AACH;;AACD,SAAQD,CAAC,KAADA,CAAAA,IACJE,YAAY,CAAA,CAAA,EAAA,CAAA,EAAO,UAAA,KAAA,EAAA,KAAA,EAAkB;AACjC;AACA,QAAI,OAAA,KAAA,KAAA,UAAA,IAA+B,OAAA,KAAA,KAAnC,UAAA,EAAgE;AAC5D,aAAOC,KAAK,KAALA,KAAAA,IAAmBA,KAAK,CAALA,QAAAA,OAAqBC,KAAK,CAApD,QAA+CA,EAA/C;AAH6B,KAAA,CAKjC;;;AACA,QAAIC,KAAK,CAALA,OAAAA,CAAAA,KAAAA,KAAwBA,KAAK,CAALA,OAAAA,CAA5B,KAA4BA,CAA5B,EAAkD;AAC9C,aAAOF,KAAK,KAALA,KAAAA,IAAmBD,YAAY,CAAA,KAAA,EAAtC,KAAsC,CAAtC;AACH;AATT,GACgB,CADhB;AAWH;;AACD,IAAMI,iBAAiB,GAAG;AACtBC,EAAAA,QAAQ,EADc,IAAA;AAEtBC,EAAAA,gBAAgB,EAAEC;AAFI,CAA1B;AAIA;;;;;AAIA,IAAMC,WAAW,GAAjB,EAAA;;AACA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAqB;AAAA,MAApBC,UAAoB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAP,EAAO;AAC1C,MAAMC,OAAO,GAAGD,UAAU,IAAIA,UAAU,CAAxBA,IAAAA,IAAiCA,UAAU,CAAVA,IAAAA,CAAjD,GAAA;AACA,SAAO,QAAA,CAAc,QAAA,CAAA,EAAA,EAAd,UAAc,CAAd,EAA6C;AAAEE,IAAAA,IAAI,EAAE,QAAA,CAAc,QAAA,CAAA,EAAA,EAAkBF,UAAU,CAA1C,IAAc,CAAd,EAAkD;AAAEG,MAAAA,GAAG,EAAEC,aAAa,CAAA,OAAA;AAApB,KAAlD;AAAR,GAA7C,CAAP;AAFJ,CAAA;;AAIA,SAAA,mBAAA,GAAiE;AAAA,MAApCC,WAAoC,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAtB,EAAsB;AAAA,MAAlBC,WAAkB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AAC7D,SAAQD,WAAW,KAAXA,WAAAA,IACJ,CAAA,OAAA,EAAA,QAAA,EAAA,MAAA,EAAA,KAAA,CAAkC,UAAA,GAAA,EAAA;AAAA,WAASf,YAAY,CAACe,WAAW,CAAZ,GAAY,CAAZ,EAAmBC,WAAW,CAAnD,GAAmD,CAA9B,CAArB;AADtC,GACI,CADJ;AAEH;;AACD,SAAA,uBAAA,CAAA,KAAA,EAAA,OAAA,EAAiD;AAC7C,SAAOC,UAAU,CAACC,OAAO,IAAI,CAACC,KAAK,IAAN,EAAA,EAAXD,OAAAA,IAAD,EAAA,EAAyC,UAAA,MAAA,EAAA;AAAA,WAAY,OAAOrB,MAAM,CAAb,aAAA,KAAZ,WAAA;AAA1D,GAAiB,CAAjB;AACH;;AACD,SAAA,qBAAA,GAAoD;AAAA,MAArBsB,KAAqB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAb,EAAa;AAAA,MAATD,OAAS,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA;AAChD,MAAME,OAAO,GAAb,EAAA;AACAC,EAAAA,uBAAuB,CAAA,KAAA,EAAvBA,OAAuB,CAAvBA,CAAAA,OAAAA,CAAgD,UAAA,GAAA,EAAS;AACrD,QAAMC,MAAM,GAAGC,YAAY,CAA3B,GAA2B,CAA3B;AACAH,IAAAA,OAAO,CAAPA,MAAO,CAAPA,GAAkBI,GAAG,CAArBJ,aAAAA;AAFJC,GAAAA;AAIA,SAAA,OAAA;AACH;;AACD,SAAA,gBAAA,CAAA,KAAA,EAAA,OAAA,EAA0C;AACtC,MAAI9B,MAAM,CAANA,IAAAA,CAAAA,OAAAA,EAAAA,MAAAA,KAAgCA,MAAM,CAANA,IAAAA,CAAY4B,KAAK,CAAjB5B,OAAAA,EAApC,MAAA,EAAuE;AACnE,WAAA,IAAA;AACH;;AACD,SAAO,MAAM,CAAN,IAAA,CAAA,OAAA,EAAA,IAAA,CAA0B,UAAA,SAAA,EAAS;AAAA,WAAI6B,OAAO,CAAPA,SAAO,CAAPA,KAAuBD,KAAK,CAALA,OAAAA,CAA3B,SAA2BA,CAA3B;AAA1C,GAAO,CAAP;AACH;;IACKM,K;;;;;AACF,WAAA,KAAA,CAAA,KAAA,EAAmB;AAAA,QAAA,KAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,KAAA,CAAA;;AACf,IAAA,KAAA,GAAA,0BAAA,CAAA,IAAA,EAAA,eAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA,CAAA;;AACA,IAAA,KAAA,CAAA,WAAA,GAAmB,UAAA,KAAA,EAAW;AAC1B,MAAA,KAAA,CAAA,OAAA,GAAA,KAAA;AADJ,KAAA;;AAGA,IAAA,KAAA,CAAA,sBAAA,GAA8B,UAAA,IAAA,EAAA,KAAA,EAAiB;AAC3C,UAAMG,YAAY,GAAGC,eAAe,CAAC,KAAA,CAArC,KAAoC,CAApC;;AACA,UAAI,CAACD,YAAY,CAAjB,gBAAA,EAAoC;AAChC,eAAA,EAAA;AACH;;AACD,UAAME,GAAG,GAAG,KAAA,CAAA,YAAA,CAAA,IAAA,EAL+B,KAK/B,CAAZ,CAL2C,CAM3C;;;AACA,UAAI,CAAC,KAAA,CAAA,KAAA,CAAA,kBAAA,CAAL,GAAK,CAAL,EAAyC;AACrC,QAAA,KAAA,CAAA,KAAA,CAAA,kBAAA,CAAA,GAAA,IAAqCF,YAAY,CAAZA,gBAAAA,CAAAA,IAAAA,KAArC,EAAA;AACA,YAAMG,aAAa,GAAG,KAAA,CAAA,KAAA,CAAA,kBAAA,CAAtB,GAAsB,CAAtB;AACAC,QAAAA,OAAO,CAAC,EAAE,aAAF,aAAA,KAAiC,EAAE,oBAApC,aAAkC,CAAlC,EAAA,OAAA,EAAPA,uGAAO,CAAPA;AACH;;AACD,aAAO,KAAA,CAAA,KAAA,CAAA,kBAAA,CAAP,GAAO,CAAP;AAZJ,KAAA;;AAcA,IAAA,KAAA,CAAA,YAAA,GAAoB,UAAA,MAAA,EAAA,KAAA,EAAmB;AAAA,UAC3BC,MAD2B,GAChB,KAAA,CADgB,KAChB,CADgB,MAAA;AAEnC,UAAMC,SAAS,GAAG,OAAA,MAAA,KAAA,UAAA,GAA+BD,MAAM,CAAA,MAAA,EAArC,KAAqC,CAArC,GAAuDE,MAAM,CAA/E,MAA+E,CAA/E;AACAH,MAAAA,OAAO,CAACE,SAAS,KAAV,SAAA,EAAA,OAAA,EAAmC,yEAAA,qDAAA,GAA1CF,wCAAO,CAAPA;AAGA,aAAOE,SAAS,KAATA,SAAAA,GAAAA,KAAAA,GAAP,SAAA;AANJ,KAAA;;AAQA,IAAA,KAAA,CAAA,KAAA,GAAa,UAAA,SAAA,EAAA,MAAA,EAAA,KAAA,EAA8B;AAAA,UAC/BE,KAD+B,GACrB,KAAA,CADqB,KACrB,CADqB,KAAA;AAEvC,UAAMC,MAAM,GAAGD,KAAK,GAAGA,KAAK,CAAA,MAAA,EAAR,KAAQ,CAAR,GAApB,EAAA;AACA,aAAO,QAAA,CAAc,QAAA,CAAA,EAAA,EAAd,MAAc,CAAd,EAAyC;AAAEE,QAAAA,SAAS,EAAX,SAAA;AAAaC,QAAAA,KAAK,EAAE,KAAA,CAAA,KAAA,CAApB,KAAA;AAAsCN,QAAAA,MAAM,EAAE,KAAA,CAAA,YAAA,CAAA,MAAA,EAAA,KAAA;AAA9C,OAAzC,CAAP;AAHJ,KAAA;;AAKA,IAAA,KAAA,CAAA,0BAAA,GAAkC,UAAA,iBAAA,EAAuB;AAAA,UAC7CO,MAD6C,GAClC,KAAA,CADkC,KAClC,CADkC,MAAA;AAErD,UAAMC,KAAK,GAAG,KAAA,CAAd,OAAA;;AACA,UAAA,iBAAA,EAAuB;AACnB,eAAA,iBAAA;AAJiD,OAAA,CAMrD;;;AACA,aAAO,MAAM,IAAN,KAAA,GAAkB,YAAA;AAAA,eAAMA,KAAK,CAAX,SAAA;AAAlB,OAAA,GAAP,SAAA;AAPJ,KAAA;;AASA,IAAA,KAAA,CAAA,gBAAA,GAAwB,YAAM;AAAA,UAClBD,MADkB,GACP,KAAA,CADO,KACP,CADO,MAAA;;AAE1B,UAAIA,MAAM,IAAIA,MAAM,CAANA,wBAAAA,KAAd,KAAA,EAAyD;AACrDE,QAAAA,QAAQ,CAAA,CAAA,EAAI;AACRC,UAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,mBAAM,KAAA,CAAA,OAAA,CAAN,SAAA;AAAA;AADN,SAAJ,CAARD;AAGH;AANL,KAAA;;AAQA,IAAA,KAAA,CAAA,YAAA,GAAoB,UAAA,MAAA,EAAA,WAAA,EAAyB;AACzC,UAAM9C,KAAK,GAAG,KAAA,CAAd,KAAA;;AACA,UAAMgD,UAAU,GAAG,QAAA,CAAA,EAAA,EAAkB,KAAA,CAAA,KAAA,CAArC,UAAmB,CAAnB;;AACA,UAAMxB,OAAO,GAAG,QAAA,CAAc,QAAA,CAAA,EAAA,EAAkB,KAAA,CAAA,KAAA,CAAhC,OAAc,CAAd,EAAA,eAAA,CAAA,EAAA,EAAwDG,YAAY,CAApE,MAAoE,CAApE,EAHyB,WAGzB,CAAA,CAAhB,CAHyC,CAIzC;;;AACA,UAAMsB,iBAAiB,GAAvB,EAAA;AACAC,MAAAA,OAAO,CAAC,KAAA,CAAA,KAAA,CAAD,OAAA,EAAqB,UAAA,CAAA,EAAK;AAC7B,YAAI,CAACC,CAAC,CAAN,QAAA,EAAiB;AACbF,UAAAA,iBAAiB,CAAjBA,IAAAA,CAAuBtB,YAAY,CAAnCsB,CAAmC,CAAnCA;AACH;AAHLC,OAAO,CAAPA;AAKAvD,MAAAA,MAAM,CAANA,IAAAA,CAAAA,OAAAA,EAAAA,OAAAA,CAA6B,UAAA,SAAA,EAAa;AACtC,YAAIsD,iBAAiB,CAAjBA,OAAAA,CAAAA,SAAAA,IAAJ,CAAA,EAA8C;AAC1C,iBAAOzB,OAAO,CAAd,SAAc,CAAd;AACH;AAHL7B,OAAAA;;AAKA,UAAIK,KAAK,CAAT,UAAA,EAAsB;AAClB;AACAgD,QAAAA,UAAU,CAAVA,OAAAA,GAAAA,CAAAA;AACAA,QAAAA,UAAU,CAAVA,QAAAA,CAAoBA,UAAU,CAA9BA,OAAAA;AACH;;AACD,UAAMI,QAAQ,GAAG;AACbJ,QAAAA,UAAU,EADG,UAAA;AAEbxB,QAAAA,OAAO,EAAE;AAFI,OAAjB;;AAIA,UAAM6B,iBAAiB,GAAG,QAAA,CAAA,EAAA,EAzBe,OAyBf,CAA1B,CAzByC,CA0BzC;;;AACA5B,MAAAA,uBAAuB,CAAC,KAAA,CAAxBA,KAAuB,CAAvBA,CAAAA,OAAAA,CAA4C,UAAA,GAAA,EAAS;AACjD,YAAM6B,SAAS,GAAG3B,YAAY,CAA9B,GAA8B,CAA9B;;AACA,YAAA,SAAA,EAAe;AACX,iBAAO0B,iBAAiB,CAAxB,SAAwB,CAAxB;AACH;AAJL5B,OAAAA;;AAMA,UAAI9B,MAAM,CAANA,IAAAA,CAAAA,iBAAAA,EAAAA,MAAAA,GAAJ,CAAA,EAA+C;AAC3CyD,QAAAA,QAAQ,CAARA,OAAAA,GAAAA,iBAAAA;AAlCqC,OAAA,CAoCzC;;;AACA,UAAI,OAAA,CAAOpD,KAAK,CAAZ,UAAA,CAAA,KAAA,QAAA,IAAwC,aAAaA,KAAK,CAA9D,UAAA,EAA2E;AACvEoD,QAAAA,QAAQ,CAARA,UAAAA,GAAsB,QAAA,CAAc,QAAA,CAAA,EAAA,EAAd,UAAc,CAAd,EAA6C;AAAEG,UAAAA,OAAO,EAAE,KAAA,CAAA,KAAA,CAAA,UAAA,CAAsBA;AAAjC,SAA7C,CAAtBH;AACH;;AACD,MAAA,KAAA,CAAA,QAAA,CAAA,QAAA,EAAwB,YAAM;AAC1B,QAAA,KAAA,CAAA,gBAAA;;AACA,QAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,QAAA,CAA0B;AACtBI,UAAAA,cAAc,EAAE;AADM,SAA1B;;AAF0B,YAKlB/C,QALkB,GAKL,KAAA,CALK,KAKL,CALK,QAAA;;AAM1B,YAAA,QAAA,EAAc;AACVA,UAAAA,QAAQ,CAARA,KAAAA,CAAAA,IAAAA,EAAqB,KAAA,CAAA,sBAAA,CAA4B,QAAA,CAAc,QAAA,CAAA,EAAA,EAAkB,KAAA,CAAhC,KAAc,CAAd,EAA6C;AAAE+C,YAAAA,cAAc,EAAhB,KAAA;AAAyBhC,YAAAA,OAAO,EAAhC,OAAA;AAC1FwB,YAAAA,UAAU,EAAVA;AAD0F,WAA7C,CAA5B,CAArBvC;AAEH;AATL,OAAA;AAxCJ,KAAA;;AAoDA,IAAA,KAAA,CAAA,YAAA,GAAoB,UAAA,MAAA,EAAA,QAAA,EAAA,CAAA,EAAyB;AACzC,UAAMgD,OAAO,GAAG7D,CAAC,CAADA,MAAAA,CAAhB,OAAA;AACA,UAAM8D,WAAW,GAAG9D,CAAC,CAArB,WAAA;AACA,UAAM+D,gBAAgB,GAAG,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,QAAA,GAAA,cAAA,GAAA,EAAA,GAEnB,KAAA,CAFN,mBAEM,EAFN;;AAGA,UAAIC,eAAe,GAAG,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,QAAA,GAAA,eAAA,CAAA,MAAA,CAAtB,gBAAsB,CAAtB;;AACA,UAAM1B,GAAG,GAAG,KAAA,CAAA,YAAA,CAAA,MAAA,EAAZ,QAAY,CAAZ;;AAPyC,UAQjC2B,KARiC,GAQvB,KAAA,CARuB,KAQvB,CARuB,KAAA;;AASzC,UAAMC,IAAI,GAAG,KAAA,CAAb,sBAAa,EAAb;;AACA,UAAIC,SAAS,GAAb,QAAA;;AACA,UAAI,KAAA,CAAA,KAAA,CAAJ,iBAAA,EAAkC;AAC9BA,QAAAA,SAAS,GAAG,IAAI,CAAJ,SAAA,CAAe,UAAA,GAAA,EAAG;AAAA,iBAAI,KAAA,CAAA,YAAA,CAAA,GAAA,EAAA,QAAA,MAAJ,GAAA;AAA9BA,SAAY,CAAZA;AACH;;AACD,UAAIL,WAAW,CAAXA,QAAAA,IAAwBG,KAAK,KAA7BH,SAAAA,IAA+CK,SAAS,KAA5D,KAAA,EAAwE;AACpE,YAAMC,aAAa,GAAnB,EAAA;AACA,YAAMC,SAAS,GAAGC,IAAI,CAAJA,IAAAA,CAAUL,KAAK,GAAjC,SAAkBK,CAAlB;AACA,YAAMC,IAAI,GAAGD,IAAI,CAAJA,GAAAA,CAASL,KAAK,GAA3B,SAAaK,CAAb;AACA,YAAIE,IAAI,GAAR,CAAA;;AAJoE,YAAA,KAAA,GAAA,SAAA,KAAA,GAAA;AAMhE,cAAMtE,CAAC,GAAGiE,SAAS,GAAGK,IAAI,GAA1B,SAAA;AACAA,UAAAA,IAAI,IAAJA,CAAAA;AACA,cAAMnD,GAAG,GAAG6C,IAAI,CAAhB,CAAgB,CAAhB;;AACA,cAAMzB,MAAM,GAAG,KAAA,CAAA,YAAA,CAAA,GAAA,EAAf,CAAe,CAAf;;AACA,cAAMF,aAAa,GAAG,KAAA,CAAA,sBAAA,CAAA,GAAA,EAAtB,CAAsB,CAAtB;;AACA,cAAI,CAACA,aAAa,CAAlB,QAAA,EAA6B;AACzB,gBAAIyB,eAAe,CAAfA,QAAAA,CAAJ,MAAIA,CAAJ,EAAsC;AAClC,kBAAI,CAAJ,OAAA,EAAc;AACVA,gBAAAA,eAAe,GAAG,eAAe,CAAf,MAAA,CAAuB,UAAA,CAAA,EAAA;AAAA,yBAAOvB,MAAM,KAAb,CAAA;AAAzCuB,iBAAkB,CAAlBA;AACAI,gBAAAA,aAAa,CAAbA,IAAAA,CAAAA,MAAAA;AACH;AAJL,aAAA,MAMK,IAAA,OAAA,EAAa;AACdJ,cAAAA,eAAe,CAAfA,IAAAA,CAAAA,MAAAA;AACAI,cAAAA,aAAa,CAAbA,IAAAA,CAAAA,MAAAA;AACH;AACJ;AAtB+D,SAAA;;AAKpE,eAAOI,IAAI,IAAX,IAAA,EAAqB;AAAA,UAAA,KAAA;AAkBpB;;AACD,QAAA,KAAA,CAAA,QAAA,CAAc;AAAEP,UAAAA,KAAK,EAAEE;AAAT,SAAd;;AACA,QAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,QAAA,CAA0B;AACtBP,UAAAA,cAAc,EAAE;AADM,SAA1B;;AAGA,QAAA,KAAA,CAAA,kBAAA,CAAA,eAAA,EAAyC;AACrCa,UAAAA,SAAS,EAD4B,kBAAA;AAErC9B,UAAAA,MAAM,EAF+B,MAAA;AAGrCkB,UAAAA,OAAO,EAH8B,OAAA;AAIrCO,UAAAA,aAAa,EAJwB,aAAA;AAKrCN,UAAAA,WAAW,EAAXA;AALqC,SAAzC;AA5BJ,OAAA,MAoCK;AACD,YAAA,OAAA,EAAa;AACTE,UAAAA,eAAe,CAAfA,IAAAA,CAAqB,KAAA,CAAA,YAAA,CAAA,MAAA,EAArBA,SAAqB,CAArBA;AADJ,SAAA,MAGK;AACDA,UAAAA,eAAe,GAAG,eAAe,CAAf,MAAA,CAAuB,UAAA,CAAA,EAAA;AAAA,mBAAO1B,GAAG,KAAV,CAAA;AAAzC0B,WAAkB,CAAlBA;AACH;;AACD,QAAA,KAAA,CAAA,QAAA,CAAc;AAAEC,UAAAA,KAAK,EAAEE;AAAT,SAAd;;AACA,QAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,QAAA,CAA0B;AACtBP,UAAAA,cAAc,EAAE;AADM,SAA1B;;AAGA,QAAA,KAAA,CAAA,kBAAA,CAAA,eAAA,EAAyC;AACrCa,UAAAA,SAAS,EAD4B,UAAA;AAErC9B,UAAAA,MAAM,EAF+B,MAAA;AAGrCkB,UAAAA,OAAO,EAH8B,OAAA;AAIrCO,UAAAA,aAAa,EAJwB,SAAA;AAKrCN,UAAAA,WAAW,EAAXA;AALqC,SAAzC;AAOH;AApEL,KAAA;;AAsEA,IAAA,KAAA,CAAA,iBAAA,GAAyB,UAAA,MAAA,EAAA,QAAA,EAAA,CAAA,EAAyB;AAC9C,UAAMD,OAAO,GAAG7D,CAAC,CAADA,MAAAA,CAAhB,OAAA;AACA,UAAM8D,WAAW,GAAG9D,CAAC,CAArB,WAAA;;AACA,UAAMsC,GAAG,GAAG,KAAA,CAAA,YAAA,CAAA,MAAA,EAAZ,QAAY,CAAZ;;AACA,UAAM0B,eAAe,GAAG,CAAxB,GAAwB,CAAxB;;AACA,MAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,QAAA,CAA0B;AACtBJ,QAAAA,cAAc,EAAE;AADM,OAA1B;;AAGA,MAAA,KAAA,CAAA,kBAAA,CAAA,eAAA,EAAyC;AACrCa,QAAAA,SAAS,EAD4B,UAAA;AAErC9B,QAAAA,MAAM,EAF+B,MAAA;AAGrCkB,QAAAA,OAAO,EAH8B,OAAA;AAIrCO,QAAAA,aAAa,EAJwB,SAAA;AAKrCN,QAAAA,WAAW,EAAXA;AALqC,OAAzC;AARJ,KAAA;;AAgBA,IAAA,KAAA,CAAA,eAAA,GAAuB,UAAA,YAAA,EAAA,KAAA,EAAA,YAAA,EAAuC;AAC1D,UAAMY,IAAI,GAAG,KAAA,CAAb,sBAAa,EAAb;;AACA,UAAMX,gBAAgB,GAAG,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,QAAA,GAAA,cAAA,GAAA,EAAA,GAEnB,KAAA,CAFN,mBAEM,EAFN;;AAGA,UAAMC,eAAe,GAAG,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,QAAA,GAAA,eAAA,CAAA,MAAA,CAAxB,gBAAwB,CAAxB;;AACA,UAAMW,iBAAiB,GAAG,IAAI,CAAJ,MAAA,CACd,UAAA,IAAA,EAAA,CAAA,EAAA;AAAA,eAAa,CAAC,KAAA,CAAA,sBAAA,CAAA,IAAA,EAAA,CAAA,EAAd,QAAA;AADc,OAAA,EAAA,GAAA,CAEjB,UAAA,IAAA,EAAA,CAAA,EAAA;AAAA,eAAa,KAAA,CAAA,YAAA,CAAA,IAAA,EAAb,CAAa,CAAb;AAFT,OAA0B,CAA1B;AAGA,UAAMP,aAAa,GAAnB,EAAA;AACA,UAAIK,SAAS,GAAb,aAAA;AACA,UAX0D,OAW1D,CAX0D,CAY1D;;AACA,cAAA,YAAA;AACI,aAAA,KAAA;AACIE,UAAAA,iBAAiB,CAAjBA,OAAAA,CAA0B,UAAA,GAAA,EAAO;AAC7B,gBAAIX,eAAe,CAAfA,OAAAA,CAAAA,GAAAA,IAAJ,CAAA,EAAsC;AAClCA,cAAAA,eAAe,CAAfA,IAAAA,CAAAA,GAAAA;AACAI,cAAAA,aAAa,CAAbA,IAAAA,CAAAA,GAAAA;AACH;AAJLO,WAAAA;AAMAF,UAAAA,SAAS,GAATA,aAAAA;AACAZ,UAAAA,OAAO,GAAPA,IAAAA;AACA;;AACJ,aAAA,WAAA;AACIc,UAAAA,iBAAiB,CAAjBA,OAAAA,CAA0B,UAAA,GAAA,EAAO;AAC7B,gBAAIX,eAAe,CAAfA,OAAAA,CAAAA,GAAAA,KAAJ,CAAA,EAAuC;AACnCA,cAAAA,eAAe,CAAfA,MAAAA,CAAuBA,eAAe,CAAfA,OAAAA,CAAvBA,GAAuBA,CAAvBA,EAAAA,CAAAA;AACAI,cAAAA,aAAa,CAAbA,IAAAA,CAAAA,GAAAA;AACH;AAJLO,WAAAA;AAMAF,UAAAA,SAAS,GAATA,aAAAA;AACAZ,UAAAA,OAAO,GAAPA,KAAAA;AACA;;AACJ,aAAA,QAAA;AACIc,UAAAA,iBAAiB,CAAjBA,OAAAA,CAA0B,UAAA,GAAA,EAAO;AAC7B,gBAAIX,eAAe,CAAfA,OAAAA,CAAAA,GAAAA,IAAJ,CAAA,EAAsC;AAClCA,cAAAA,eAAe,CAAfA,IAAAA,CAAAA,GAAAA;AADJ,aAAA,MAGK;AACDA,cAAAA,eAAe,CAAfA,MAAAA,CAAuBA,eAAe,CAAfA,OAAAA,CAAvBA,GAAuBA,CAAvBA,EAAAA,CAAAA;AACH;;AACDI,YAAAA,aAAa,CAAbA,IAAAA,CAAAA,GAAAA;AACAK,YAAAA,SAAS,GAATA,gBAAAA;AARJE,WAAAA;AAUA;;AACJ;AACI;AAlCR;;AAoCA,MAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,QAAA,CAA0B;AACtBf,QAAAA,cAAc,EAAE;AADM,OAA1B,EAjD0D,CAoD1D;;;AApD0D,UAqDlDxB,YArDkD,GAqDjC,KAAA,CArDiC,KAqDjC,CArDiC,YAAA;AAsD1D,UAAIwC,yBAAyB,GAA7B,CAAA;;AACA,UAAIxC,YAAY,IAAIA,YAAY,CAAhC,qBAAA,EAAwD;AACpDwC,QAAAA,yBAAyB,GAAzBA,CAAAA;AACH;;AACD,UAAIC,KAAK,IAALA,yBAAAA,IAAsC,OAAA,YAAA,KAA1C,UAAA,EAA8E;AAC1E,eAAOC,YAAY,CAAnB,iBAAmB,CAAnB;AACH;;AACD,MAAA,KAAA,CAAA,kBAAA,CAAA,eAAA,EAAyC;AACrCL,QAAAA,SAAS,EAD4B,SAAA;AAErCZ,QAAAA,OAAO,EAF8B,OAAA;AAGrCO,QAAAA,aAAa,EAAbA;AAHqC,OAAzC;AA7DJ,KAAA;;AAmEA,IAAA,KAAA,CAAA,gBAAA,GAAwB,UAAA,OAAA,EAAgC;AACpD,UAAMhE,KAAK,GAAG,KAAA,CAAd,KAAA;;AACA,UAAMgD,UAAU,GAAG,QAAA,CAAA,EAAA,EAAkB,KAAA,CAAA,KAAA,CAArC,UAAmB,CAAnB;;AACA,UAAA,OAAA,EAAa;AACTA,QAAAA,UAAU,CAAVA,OAAAA,GAAAA,OAAAA;AADJ,OAAA,MAGK;AACDA,QAAAA,UAAU,CAAVA,OAAAA,GAAqBA,UAAU,CAAVA,OAAAA,IAArBA,CAAAA;AACH;;AARmD,WAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAnB2B,cAAmB,GAAA,IAAA,KAAA,CAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAAnBA,QAAAA,cAAmB,CAAA,IAAA,GAAA,CAAA,CAAnBA,GAAmB,SAAA,CAAA,IAAA,CAAnBA;AAAmB;;AASpD3B,MAAAA,UAAU,CAAVA,QAAAA,CAAAA,KAAAA,CAAAA,UAAAA,EAAU,CAAUA,UAAU,CAApB,OAAA,EAAA,MAAA,CAAVA,cAAU,CAAVA;AACA,UAAMI,QAAQ,GAAG;AACbJ,QAAAA,UAAU,EAAVA;AADa,OAAjB,CAVoD,CAapD;;AACA,UAAIhD,KAAK,CAALA,UAAAA,IAAoB,OAAA,CAAOA,KAAK,CAAZ,UAAA,CAAA,KAApBA,QAAAA,IAA4D,aAAaA,KAAK,CAAlF,UAAA,EAA+F;AAC3FoD,QAAAA,QAAQ,CAARA,UAAAA,GAAsB,QAAA,CAAc,QAAA,CAAA,EAAA,EAAd,UAAc,CAAd,EAA6C;AAAEG,UAAAA,OAAO,EAAE,KAAA,CAAA,KAAA,CAAA,UAAA,CAAsBA;AAAjC,SAA7C,CAAtBH;AACH;;AACD,MAAA,KAAA,CAAA,QAAA,CAAA,QAAA,EAAwB,KAAA,CAAxB,gBAAA;;AACA,MAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,QAAA,CAA0B;AACtBI,QAAAA,cAAc,EAAE;AADM,OAA1B;;AAlBoD,UAqB5C/C,QArB4C,GAqB/B,KAAA,CArB+B,KAqB/B,CArB+B,QAAA;;AAsBpD,UAAA,QAAA,EAAc;AACVA,QAAAA,QAAQ,CAARA,KAAAA,CAAAA,IAAAA,EAAqB,KAAA,CAAA,sBAAA,CAA4B,QAAA,CAAc,QAAA,CAAA,EAAA,EAAkB,KAAA,CAAhC,KAAc,CAAd,EAA6C;AAAE+C,UAAAA,cAAc,EAAhB,KAAA;AAAyBR,UAAAA,UAAU,EAAVA;AAAzB,SAA7C,CAA5B,CAArBvC;AACH;AAxBL,KAAA;;AA0BA,IAAA,KAAA,CAAA,oBAAA,GAA4B,UAAA,OAAA,EAAA,QAAA,EAAuB;AAAA,UACvCuC,UADuC,GACxB,KAAA,CADwB,KACxB,CADwB,UAAA;AAE/CA,MAAAA,UAAU,CAAVA,gBAAAA,CAAAA,OAAAA,EAAAA,QAAAA;;AACA,UAAM4B,cAAc,GAAG,QAAA,CAAc,QAAA,CAAA,EAAA,EAAd,UAAc,CAAd,EAA6C;AAAEC,QAAAA,QAAQ,EAAV,QAAA;AAChEtB,QAAAA,OAAO,EAAPA;AADgE,OAA7C,CAAvB;;AAEA,MAAA,KAAA,CAAA,QAAA,CAAc;AAAEP,QAAAA,UAAU,EAAE4B;AAAd,OAAd,EAA8C,KAAA,CAA9C,gBAAA;;AAL+C,UAMvCnE,QANuC,GAM1B,KAAA,CAN0B,KAM1B,CAN0B,QAAA;;AAO/C,UAAA,QAAA,EAAc;AACVA,QAAAA,QAAQ,CAARA,KAAAA,CAAAA,IAAAA,EAAqB,KAAA,CAAA,sBAAA,CAA4B,QAAA,CAAc,QAAA,CAAA,EAAA,EAAkB,KAAA,CAAhC,KAAc,CAAd,EAA6C;AAAEuC,UAAAA,UAAU,EAAE4B;AAAd,SAA7C,CAA5B,CAArBnE;AACH;AATL,KAAA;;AAWA,IAAA,KAAA,CAAA,gBAAA,GAAwB,UAAA,SAAA,EAAA;AAAA,aAAe,UAAA,IAAA,EAAmE;AAAA,YAAhEqE,UAAgE,GAAA,IAAA,CAAhEA,UAAgE;AAAA,YAApDC,QAAoD,GAAA,IAAA,CAApDA,QAAoD;AAAA,YAA1CC,gBAA0C,GAAA,IAAA,CAA1CA,gBAA0C;AAAA,YAAxBzC,MAAwB,GAAA,IAAA,CAAxBA,MAAwB;AAAA,YAAhB0C,QAAgB,GAAA,IAAA,CAAhBA,QAAgB;;AACtG,YAAA,UAAA,EAAgB;AACZ,iBAAQ,KAAA,CAAA,aAAA,CAAA,cAAA,EAAA;AAAgB,YAAA,aAAa,EAA7B,OAAA;AAAsC,YAAA,aAAa,EAAEC,aAAa,CAACrD;AAAnE,WAAA,EACb,UAAA,MAAA,EAAA;AAAA,gBAAA,WAAA;;AAAA,mBAAa,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA;AAAa,cAAA,SAAS,EAAEsD,UAAU,CAAA,GAAA,MAAA,CAAA,SAAA,EAAA,kBAAA,CAAA,GAAA,WAAA,GAAA,EAAA,EAAA,eAAA,CAAA,WAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,gBAAA,CAAA,EACN,CADM,QAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,eAAA,CAAA,EAAA,QAAA,CAAA,EAAlC,WAAkC,EAAlC;AAGJ,cAAA,OAAO,EAAE,SAAA,OAAA,CAAA,KAAA,EAAS;AAClBF,gBAAAA,QAAQ,CAAA,MAAA,EAARA,KAAQ,CAARA;AAJI,eAAA;AAKL,4BAAYF,QAAQ,GAAGK,MAAM,CAAT,QAAA,GAAqBA,MAAM,CAL1C,MAAA;AAKmD,cAAA,OAAO,EAAA;AAL1D,aAAA,CAAb;AADK,WAAQ,CAAR;AAQH;;AACD,YAAA,gBAAA,EAAsB;AAClB,iBAAO,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,YAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,mBAAA,EAAA,MAAA,CAAA,SAAA,EAAA,aAAA;AAAf,WAAA,CAAP;AACH;;AACD,eAAA,IAAA;AAdoB,OAAA;AAAxB,KAAA;;AAgBA,IAAA,KAAA,CAAA,kBAAA,GAA0B,UAAA,IAAA,EAAU;AAChC,aAAO,UAAA,CAAA,EAAA,MAAA,EAAA,KAAA,EAAsB;AACzB,YAAM/C,MAAM,GAAG,KAAA,CAAA,YAAA,CAAA,MAAA,EAAf,KAAe,CAAf;;AACA,YAAMrC,KAAK,GAAG,KAAA,CAAA,sBAAA,CAAA,MAAA,EAAd,KAAc,CAAd;;AACA,YAAMqF,YAAY,GAAG,SAAfA,YAAe,CAAA,CAAA,EAAA;AAAA,iBAAOC,IAAI,KAAJA,OAAAA,GACtB,KAAA,CAAA,iBAAA,CAAA,MAAA,EAAA,KAAA,EADsBA,CACtB,CADsBA,GAEtB,KAAA,CAAA,YAAA,CAAA,MAAA,EAAA,KAAA,EAFe,CAEf,CAFe;AAArB,SAAA;;AAGA,eAAQ,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,UAAA,OAAO,EAAEC;AAAf,SAAA,EACd,KAAA,CAAA,aAAA,CAAA,YAAA,EAAA,QAAA,CAAA;AAAc,UAAA,IAAI,EAAlB,IAAA;AAA0B,UAAA,KAAK,EAAE,KAAA,CAAA,KAAA,CAAjC,KAAA;AAAmD,UAAA,QAAQ,EAA3D,MAAA;AAAqE,UAAA,QAAQ,EAA7E,YAAA;AAA6F,UAAA,gBAAgB,EAAE,KAAA,CAAA,mBAAA;AAA/G,SAAA,EADM,KACN,CAAA,CADc,CAAR;AANJ,OAAA;AADJ,KAAA;;AAYA,IAAA,KAAA,CAAA,WAAA,GAAmB,UAAA,KAAA,EAAgH;AAAA,UAAA,YAAA;;AAAA,UAA7G7C,SAA6G,GAAA,KAAA,CAA7GA,SAA6G;AAAA,UAAlG8C,WAAkG,GAAA,KAAA,CAAlGA,WAAkG;AAAA,UAArFC,iBAAqF,GAAA,KAAA,CAArFA,iBAAqF;AAAA,UAAlEC,aAAkE,GAAA,KAAA,CAAlEA,aAAkE;AAAA,UAAhCE,wBAAgC,GAAA,KAAA,CAAnDD,iBAAmD;;AACzH,UAAA,EAAE,GAAG,KAAA,CAAL,KAAA;AAAA,UAAmBE,UAAnB,GAA6DC,EAA7D,CAAA,UAAA;AAAA,UAA+BV,MAA/B,GAA6DU,EAA7D,CAAA,MAAA;AAAA,UAAuCH,iBAAvC,GAA6DG,EAA7D,CAAA,iBAAA;AAAA,UAAiEC,cAAjE,GAAkFtG,MAAM,CAAA,EAAA,EAAK,CAAA,YAAA,EAAA,QAAA,EAD4B,mBAC5B,CAAL,CAAxF,CADyH,CAE/H;;;AACA,UAAMuG,SAAS,GAAGC,IAAI,CAAA,cAAA,EAAiB,CAAvC,OAAuC,CAAjB,CAAtB;;AACA,UAAM3B,IAAI,GAAG,KAAA,CAAb,kBAAa,EAAb;;AACA,UAAM4B,gBAAgB,GAAG,KAAA,CAAA,KAAA,CAAA,iBAAA,IAAgC,KAAA,CAAA,KAAA,CAAA,gBAAA,KALsE,KAK/H,CAL+H,CAM/H;;AACA,UAAMC,qBAAqB,GAAGR,iBAAiB,IAPgF,wBAO/H,CAP+H,CAQ/H;;AACA,UAAMS,YAAY,GAAG,QAAA,CAAc,QAAA,CAAA,EAAA,EAAd,aAAc,CAAd,EAArB,MAAqB,CAArB;;AACA,UAAI,CAAA,MAAA,IAAW,CAAChB,MAAM,CAAtB,SAAA,EAAkC;AAC9BgB,QAAAA,YAAY,CAAZA,SAAAA,GAAyBZ,WAAW,CAApCY,OAAoC,CAApCA;AACH;;AACD,UAAMC,WAAW,GAAGlB,UAAU,CAAA,GAAA,MAAA,CAAA,SAAA,EAAA,GAAA,EAAA,MAAA,CAAiB,KAAA,CAAA,KAAA,CAAjB,IAAA,CAAA,GAAA,YAAA,GAAA,EAAA,EAAA,eAAA,CAAA,YAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,WAAA,CAAA,EACC,KAAA,CAAA,KAAA,CADD,QAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,QAAA,CAAA,EAEF,CAACb,IAAI,CAFH,MAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,wBAAA,CAAA,EAGc,CAHd,UAAA,CAAA,EAA9B,YAA8B,EAA9B;;AAKA,UAAMgC,uBAAuB,GAAG,KAAA,CAAA,kBAAA,CAAwB;AACpD5D,QAAAA,SAAS,EAD2C,SAAA;AAEpD0C,QAAAA,MAAM,EAF8C,YAAA;AAGpDO,QAAAA,iBAAiB,EAAEQ;AAHiC,OAAxB,CAAhC;;AAKA,UAAM7E,OAAO,GAAG,KAAA,CAAA,qBAAA,CAA2B;AACvCA,QAAAA,OAAO,EADgC,uBAAA;AAEvCoB,QAAAA,SAAS,EAF8B,SAAA;AAGvC+C,QAAAA,iBAAiB,EAHsB,iBAAA;AAIvCL,QAAAA,MAAM,EAJiC,YAAA;AAKvCO,QAAAA,iBAAiB,EAAEQ;AALoB,OAA3B,EAAA,GAAA,CAMT,UAAA,MAAA,EAAA,CAAA,EAAe;AAClB,YAAMI,SAAS,GAAG,QAAA,CAAA,EAAA,EAAlB,MAAkB,CAAlB;;AACAA,QAAAA,SAAS,CAATA,GAAAA,GAAgB5E,YAAY,CAAA,SAAA,EAA5B4E,CAA4B,CAA5BA;AACA,eAAA,SAAA;AATJ,OAAgB,CAAhB;;AAWA,UAAIC,qBAAqB,GAAGlF,OAAO,CAAPA,CAAO,CAAPA,IAAcA,OAAO,CAAPA,CAAO,CAAPA,CAAAA,GAAAA,KAAdA,kBAAAA,GAAAA,CAAAA,GAA5B,CAAA;;AACA,UAAI,2BAAJ,SAAA,EAA0C;AACtCkF,QAAAA,qBAAqB,GAAGR,SAAS,CAAjCQ,qBAAAA;AACH;;AACD,aAAQ,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,QAAA,CAAA;AAAS,QAAA,GAAG,EAAE,KAAA,CAAd,WAAA;AAAgC,QAAA,GAAG,EAAnC,OAAA;AAA4C,QAAA,UAAU,EAAE,KAAA,CAAA,gBAAA,CAAA,SAAA;AAAxD,OAAA,EAAA,SAAA,EAAA;AAAyG,QAAA,KAAK,EAAE,SAAA,KAAA,CAAA,MAAA,EAAA,KAAA,EAAA;AAAA,iBAAmB,KAAA,CAAA,KAAA,CAAA,SAAA,EAAA,MAAA,EAAnB,KAAmB,CAAnB;AAAhH,SAAA;AAAyK,QAAA,UAAU,EAAE,KAAA,CAAA,KAAA,CAArL,UAAA;AAA4M,QAAA,SAAS,EAArN,SAAA;AAAkO,QAAA,IAAI,EAAtO,IAAA;AAA8O,QAAA,OAAO,EAArP,OAAA;AAAgQ,QAAA,UAAU,EAA1Q,UAAA;AAAwR,QAAA,SAAS,EAAjS,WAAA;AAAgT,QAAA,qBAAqB,EAArU,qBAAA;AAA8V,QAAA,gBAAgB,EAA9W,gBAAA;AAAkY,QAAA,SAAS,EAAEJ,YAAY,CAACK;AAA1Z,OAAA,CAAA,CAAR;AAtCJ,KAAA;;AAwCA,IAAA,KAAA,CAAA,eAAA,GAAuB,UAAA,KAAA,EAAsD;AAAA,UAAnDC,YAAmD,GAAA,KAAA,CAAnDA,YAAmD;AAAA,UAArClB,WAAqC,GAAA,KAAA,CAArCA,WAAqC;AAAA,UAAxBG,iBAAwB,GAAA,KAAA,CAAxBA,iBAAwB;AAAA,UAAA,WAAA,GACmC,KAAA,CADnC,KAAA;AAAA,UACtDgB,kBADsD,GAAA,WAAA,CAAA,SAAA;AAAA,UACfC,0BADe,GAAA,WAAA,CAAA,iBAAA;AAAA,UACaC,KADb,GAAA,WAAA,CAAA,KAAA;AAAA,UACoBC,SADpB,GAAA,WAAA,CAAA,SAAA;;AAEzE,UAAMxC,IAAI,GAAG,KAAA,CAAb,kBAAa,EAAb;;AACA,UAAIyC,OAAO,GAAG,KAAA,CAAA,KAAA,CAAd,OAAA;;AACA,UAAI,OAAA,OAAA,KAAJ,SAAA,EAAkC;AAC9BA,QAAAA,OAAO,GAAG;AACNC,UAAAA,QAAQ,EAAED;AADJ,SAAVA;AAGH;;AACD,UAAMrE,SAAS,GAAGgE,YAAY,CAAA,OAAA,EAA9B,kBAA8B,CAA9B;AACA,UAAMjB,iBAAiB,GAAGiB,YAAY,CAAA,UAAA,EAAtC,0BAAsC,CAAtC;AACA,UAAM7D,KAAK,GAAI,KAAA,CAAA,aAAA,CAAA,cAAA,EAAA;AAAgB,QAAA,aAAa,EAA7B,OAAA;AAAsC,QAAA,aAAa,EAAEqC,aAAa,CAACrD;AAAnE,OAAA,EAClB,UAAA,MAAA,EAAM;AAAA,eAAI,KAAA,CAAA,WAAA,CAAiB;AACpBa,UAAAA,SAAS,EADW,SAAA;AAEpB8C,UAAAA,WAAW,EAFS,WAAA;AAGpBC,UAAAA,iBAAiB,EAHG,iBAAA;AAIpBC,UAAAA,aAAa,EAJO,MAAA;AAKpBC,UAAAA,iBAAiB,EAAjBA;AALoB,SAAjB,CAAJ;AAZsE,OAW1D,CAAf,CAXyE,CAoBzE;AACA;;AACA,UAAMsB,oBAAoB,GAAG,KAAA,CAAA,aAAA,MAAA,IAAA,IAAgC3C,IAAI,CAAJA,MAAAA,KAAhC,CAAA,GAAA,GAAA,MAAA,CAAA,SAAA,EAAA,kBAAA,CAAA,GAAA,GAAA,MAAA,CAAA,SAAA,EAA7B,qBAA6B,CAA7B;AAGA,aAAQ,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,QAAA,SAAS,EAAEa,UAAU,CAAA,GAAA,MAAA,CAAA,SAAA,EAAA,UAAA,CAAA,EAA1B,SAA0B,CAA1B;AAA+D,QAAA,KAAK,EAAE0B;AAAtE,OAAA,EACZ,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA,EAAA,EAAA,OAAA,EAAA;AAAmB,QAAA,SAAS,EAAEE,OAAO,CAAPA,QAAAA,GAAAA,GAAAA,MAAAA,CAAAA,oBAAAA,EAAAA,GAAAA,EAAAA,MAAAA,CAAAA,SAAAA,EAAAA,cAAAA,CAAAA,GAAwE;AAAtG,OAAA,CAAA,EACG,KAAA,CAAA,gBAAA,CAAA,SAAA,EADH,KACG,CADH,EAAA,KAAA,EAGG,KAAA,CAAA,gBAAA,CAAA,SAAA,EAJC,QAID,CAHH,CADY,CAAR;AAzBJ,KAAA;;AAvWe,QAwYPG,iBAxYO,GAwYqClH,KAxYrC,CAAA,iBAAA;AAAA,QAwYqBmH,WAxYrB,GAwYqCnH,KAxYrC,CAAA,OAAA;AAyYfoC,IAAAA,OAAO,CAAC,EAAE,sBAAA,KAAA,IAA+B,qBAAlC,KAAC,CAAD,EAAA,OAAA,EAAwE,sEAA/EA,iEAAO,CAAPA;;AAEA,QAAI8E,iBAAiB,IAAI,CAACC,WAAW,IAAZ,EAAA,EAAA,IAAA,CAAyB,UAAA,KAAA,EAAA;AAAA,UAAGC,KAAH,GAAA,KAAA,CAAA,KAAA;AAAA,aAAe,CAAC,CAAhB,KAAA;AAAlD,KAAyB,CAAzB,EAA2E;AACvEhF,MAAAA,OAAO,CAAA,KAAA,EAAA,OAAA,EAAPA,gGAAO,CAAPA;AACH;;AACD,QAAMd,OAAO,GAAG6F,WAAW,IAAIE,gBAAgB,CAACrH,KAAK,CAArD,QAA+C,CAA/C;AACA,IAAA,KAAA,CAAA,KAAA,GAAa,QAAA,CAAc,QAAA,CAAA,EAAA,EAAkB,KAAA,CAAA,mBAAA,CAAyBsB,OAAO,IAAhE,EAAgC,CAAlB,CAAd,EAA0E;AACnF;AACAE,MAAAA,OAAO,EAAE,KAAA,CAAA,iBAAA,CAF0E,OAE1E,CAF0E;AAEzCwB,MAAAA,UAAU,EAAE,KAAA,CAAA,oBAAA,CAF6B,KAE7B,CAF6B;AAEKa,MAAAA,KAAK,EAFV,SAAA;AAEuByD,MAAAA,SAAS,EAFhC,KAAA;AAEyCxG,MAAAA,UAAU,EAAED,gBAAgB,CAACb,KAAK,CAF3E,UAEqE,CAFrE;AAEyFsB,MAAAA,OAAO,EAAPA;AAFzF,KAA1E,CAAb;AA/Ye,WAAA,KAAA;AAkZlB;;;;yCA8CoB;AAAA,UAAA,WAAA,GAC0B,KAD1B,KAAA;AAAA,UACTA,OADS,GAAA,WAAA,CAAA,OAAA;AAAA,UACA2G,UADA,GAAA,WAAA,CAAA,UAAA;AAAA,UACYC,SADZ,GAAA,WAAA,CAAA,SAAA;;AAEjB,UAAI,KAAA,mBAAA,CAAA,OAAA,EAAA,MAAA,GAAJ,CAAA,EAAkD;AAC9C,YAAMC,SAAS,GAAG,KAAA,uBAAA,CAAlB,OAAkB,CAAlB;;AACA,YAAI,CAACC,YAAY,CAACD,SAAS,CAAV,UAAA,EAAb,UAAa,CAAb,IAAmDA,SAAS,CAATA,SAAAA,KAAvD,SAAA,EAA0F;AACtF,eAAA,QAAA,CAAA,SAAA;AACH;AACJ;AACJ;;;0CACqB;AAAA,UAAA,MAAA,GAAA,IAAA;;AAClB,UAAMnG,YAAY,GAAGC,eAAe,CAAC,KAArC,KAAoC,CAApC;;AACA,UAAI,CAACD,YAAY,CAAjB,gBAAA,EAAoC;AAChC,eAAA,EAAA;AACH;;AACD,aAAO,KAAA,WAAA,GAAA,MAAA,CACK,UAAA,IAAA,EAAA,QAAA,EAAA;AAAA,eAAoB,MAAI,CAAJ,sBAAA,CAAA,IAAA,EAAA,QAAA,EAApB,cAAA;AADL,OAAA,EAAA,GAAA,CAEE,UAAA,MAAA,EAAA,QAAA,EAAA;AAAA,eAAsB,MAAI,CAAJ,YAAA,CAAA,MAAA,EAAtB,QAAsB,CAAtB;AAFT,OAAO,CAAP;AAGH;;;yCACoBhC,K,EAAO;AACxB,UAAMgD,UAAU,GAAG,OAAA,CAAOhD,KAAK,CAAZ,UAAA,CAAA,KAAA,QAAA,GAAuCA,KAAK,CAA5C,UAAA,GAAnB,EAAA;AACA,UAAA,OAAA;;AACA,UAAI,aAAJ,UAAA,EAA6B;AACzBuD,QAAAA,OAAO,GAAGP,UAAU,CAApBO,OAAAA;AADJ,OAAA,MAGK,IAAI,oBAAJ,UAAA,EAAoC;AACrCA,QAAAA,OAAO,GAAGP,UAAU,CAApBO,cAAAA;AACH;;AACD,UAAA,QAAA;;AACA,UAAI,cAAJ,UAAA,EAA8B;AAC1BsB,QAAAA,QAAQ,GAAG7B,UAAU,CAArB6B,QAAAA;AADJ,OAAA,MAGK,IAAI,qBAAJ,UAAA,EAAqC;AACtCA,QAAAA,QAAQ,GAAG7B,UAAU,CAArB6B,eAAAA;AACH;;AACD,aAAO,KAAA,aAAA,CAAA,KAAA,IACD,QAAA,CAAc,QAAA,CAAc,QAAA,CAAA,EAAA,EAAd,iBAAc,CAAd,EAAd,UAAc,CAAd,EAA+E;AAAEtB,QAAAA,OAAO,EAAEA,OAAO,IAAlB,CAAA;AAAyBsB,QAAAA,QAAQ,EAAEA,QAAQ,IAAI;AAA/C,OAA/E,CADC,GAAP,EAAA;AAEH;;;wCACmBvD,O,EAAS;AACzB,aAAOD,UAAU,CAACC,OAAO,IAAI,CAAC,KAAA,KAAA,IAAD,EAAA,EAAXA,OAAAA,IAAD,EAAA,EAA8C,UAAA,MAAA,EAAA;AAAA,eAAY,eAAZ,MAAA;AAA/D,OAAiB,CAAjB;AACH;;;sCACiBA,O,EAAS;AACvB,UAAM+G,cAAc,GAAGR,qBAAqB,CAAC,KAAD,KAAA,EAA5C,OAA4C,CAA5C;AACA,UAAMS,2BAA2B,GAAGjH,UAAU,CAACC,OAAO,IAAR,EAAA,EAAgB,UAAA,MAAA,EAAA;AAAA,eAAY,OAAOrB,MAAM,CAAb,oBAAA,KAAZ,WAAA;AAA9D,OAA8C,CAA9C;AACA,UAAMsI,cAAc,GAAG,2BAA2B,CAA3B,MAAA,CAAmC,UAAA,KAAA,EAAA,GAAA,EAAgB;AACtE,YAAM7G,MAAM,GAAGC,YAAY,CAA3B,GAA2B,CAA3B;AACA6G,QAAAA,KAAK,CAALA,MAAK,CAALA,GAAgB5G,GAAG,CAAnB4G,oBAAAA;AACA,eAAA,KAAA;AAHmB,OAAA,EAAvB,EAAuB,CAAvB;AAKA,aAAO,QAAA,CAAc,QAAA,CAAA,EAAA,EAAd,cAAc,CAAd,EAAP,cAAO,CAAP;AACH;;;wCACmBlH,O,EAAS;AACzB,UAAMmH,gBAAgB,GAAG,KAAA,uBAAA,CAAzB,OAAyB,CAAzB;AACA,UAAMC,mBAAmB,GAAG,UAAU,CAACpH,OAAO,IAAR,EAAA,EAAgB,UAAA,MAAA,EAAY;AAC9D,eAAOrB,MAAM,CAANA,gBAAAA,IAAP,IAAA;AADwB,OAAU,CAAV,CAA5B,CAA4B,CAA5B;;AAGA,UAAIyI,mBAAmB,IAAI,CAACD,gBAAgB,CAA5C,UAAA,EAAyD;AACrD,eAAO;AACHR,UAAAA,UAAU,EADP,mBAAA;AAEHC,UAAAA,SAAS,EAAEQ,mBAAmB,CAACC;AAF5B,SAAP;AAIH;;AACD,aAAA,gBAAA;AACH;;;4CACuBrH,O,EAAS;AAC7B;AACA,UAAMsH,YAAY,GAAG,KAAA,mBAAA,CAAA,OAAA,EAAA,MAAA,CAAyC,UAAA,GAAA,EAAA;AAAA,eAAShH,GAAG,CAAZ,SAAA;AAAzC,OAAA,EAArB,CAAqB,CAArB;;AACA,UAAA,YAAA,EAAkB;AACd,eAAO;AACHqG,UAAAA,UAAU,EADP,YAAA;AAEHC,UAAAA,SAAS,EAAEU,YAAY,CAACV;AAFrB,SAAP;AAIH;;AACD,aAAO;AACHD,QAAAA,UAAU,EADP,IAAA;AAEHC,QAAAA,SAAS,EAAE;AAFR,OAAP;AAIH;;;kCACaW,K,EAAO;AAAA,UAAA,qBAAA,GAC8B,KAD9B,KAC8B,CAD9B,UAAA;AAAA,UACKtF,OADL,GAAA,qBAAA,CAAA,OAAA;AAAA,UACcsB,QADd,GAAA,qBAAA,CAAA,QAAA;;AAEjB,UAAI,CAACtB,OAAO,GAAR,CAAA,IAAA,QAAA,IAAJ,KAAA,EAAuC;AACnC,eAAOW,IAAI,CAAJA,KAAAA,CAAW,CAAC2E,KAAK,GAAN,CAAA,IAAX3E,QAAAA,IAAP,CAAA;AACH;;AACD,aAAA,OAAA;AACH;;;gCACW3C,K,EAAO;AAAA,UAAA,KAAA,GACmBA,KAAK,IAAI,KAD5B,KAAA;AAAA,UACP2G,SADO,GAAA,KAAA,CAAA,SAAA;AAAA,UACID,UADJ,GAAA,KAAA,CAAA,UAAA;;AAEf,UAAI,CAAA,SAAA,IAAc,CAAd,UAAA,IAA6B,OAAOA,UAAU,CAAjB,MAAA,KAAjC,UAAA,EAA0E;AACtE;AACH;;AACD,aAAO,UAAA,CAAA,EAAA,CAAA,EAAU;AACb,YAAMa,MAAM,GAAGb,UAAU,CAAVA,MAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAf,SAAeA,CAAf;;AACA,YAAIa,MAAM,KAAV,CAAA,EAAkB;AACd,iBAAOZ,SAAS,KAATA,SAAAA,GAA0B,CAA1BA,MAAAA,GAAP,MAAA;AACH;;AACD,eAAA,CAAA;AALJ,OAAA;AAOH;;;yCACoB;AACjB,UAAI5D,IAAI,GAAG,KAAX,YAAW,EAAX;AACA,UAAA,OAAA;AACA,UAAA,QAAA;AACA,UAAM/C,KAAK,GAAG,KAJG,KAIjB,CAJiB,CAKjB;;AACA,UAAI,CAAC,KAAL,aAAK,EAAL,EAA2B;AACvBsD,QAAAA,QAAQ,GAAGkE,MAAM,CAAjBlE,SAAAA;AACAtB,QAAAA,OAAO,GAAPA,CAAAA;AAFJ,OAAA,MAIK;AACDsB,QAAAA,QAAQ,GAAGtD,KAAK,CAALA,UAAAA,CAAXsD,QAAAA;AACAtB,QAAAA,OAAO,GAAG,KAAA,aAAA,CAAmBhC,KAAK,CAALA,UAAAA,CAAAA,KAAAA,IAA0B+C,IAAI,CAA3Df,MAAU,CAAVA;AAZa,OAAA,CAcjB;AACA;AACA;AACA;;;AACA,UAAIe,IAAI,CAAJA,MAAAA,GAAAA,QAAAA,IAA0BO,QAAQ,KAAKkE,MAAM,CAAjD,SAAA,EAA6D;AACzDzE,QAAAA,IAAI,GAAGA,IAAI,CAAJA,KAAAA,CAAW,CAACf,OAAO,GAAR,CAAA,IAAXe,QAAAA,EAAqCf,OAAO,GAAnDe,QAAOA,CAAPA;AACH;;AACD,aAAA,IAAA;AACH;;;kCACa;AAAA,UACF0E,kBADE,GACqB,KADrB,KACqB,CADrB,kBAAA;AAEV,aAAOC,SAAS,CAAC,KAAA,YAAA,CAAA,IAAA,EAAD,KAAC,CAAD,EAAhB,kBAAgB,CAAhB;AACH;;;6CACwB;AAAA,UACbD,kBADa,GACU,KADV,KACU,CADV,kBAAA;AAErB,aAAOC,SAAS,CAAC,KAAD,kBAAC,EAAD,EAAhB,kBAAgB,CAAhB;AACH;;;iCACY1H,K,EAAsB;AAAA,UAAA,MAAA,GAAA,IAAA;;AAAA,UAAf2H,MAAe,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAN,IAAM;AAC/B,UAAMC,YAAY,GAAG5H,KAAK,IAAI,KAA9B,KAAA;AAD+B,UAEvB6H,UAFuB,GAER,KAFQ,KAER,CAFQ,UAAA;AAG/B,UAAI9E,IAAI,GAAG8E,UAAU,IAHU,EAG/B,CAH+B,CAI/B;;AACA9E,MAAAA,IAAI,GAAGA,IAAI,CAAJA,KAAAA,CAAPA,CAAOA,CAAPA;AACA,UAAM+E,QAAQ,GAAG,KAAA,WAAA,CAAjB,YAAiB,CAAjB;;AACA,UAAA,QAAA,EAAc;AACV/E,QAAAA,IAAI,GAAG,KAAA,aAAA,CAAA,IAAA,EAAPA,QAAO,CAAPA;AAR2B,OAAA,CAU/B;;;AACA,UAAI4E,MAAM,IAAIC,YAAY,CAA1B,OAAA,EAAoC;AAChCxJ,QAAAA,MAAM,CAANA,IAAAA,CAAYwJ,YAAY,CAAxBxJ,OAAAA,EAAAA,OAAAA,CAA0C,UAAA,SAAA,EAAa;AACnD,cAAMiC,GAAG,GAAG,MAAI,CAAJ,UAAA,CAAZ,SAAY,CAAZ;;AACA,cAAI,CAAJ,GAAA,EAAU;AACN;AACH;;AACD,cAAM0H,MAAM,GAAGH,YAAY,CAAZA,OAAAA,CAAAA,SAAAA,KAAf,EAAA;;AACA,cAAIG,MAAM,CAANA,MAAAA,KAAJ,CAAA,EAAyB;AACrB;AACH;;AACD,cAAMC,QAAQ,GAAG3H,GAAG,CAApB,QAAA;AACA0C,UAAAA,IAAI,GAAGiF,QAAQ,GACT,IAAI,CAAJ,MAAA,CAAY,UAAA,MAAA,EAAU;AACpB,mBAAO,MAAM,CAAN,IAAA,CAAY,UAAA,CAAA,EAAC;AAAA,qBAAIA,QAAQ,CAAA,CAAA,EAAZ,MAAY,CAAZ;AAApB,aAAO,CAAP;AAFO,WACT,CADS,GAAfjF,IAAAA;AAVJ3E,SAAAA;AAgBH;;AACD,aAAA,IAAA;AACH;;;uCACkBiE,e,EAAiB4F,a,EAAe;AAAA,UAAA,MAAA,GAAA,IAAA;;AAAA,UACvCnF,SADuC,GACoBmF,aADpB,CAAA,SAAA;AAAA,UAC5BjH,MAD4B,GACoBiH,aADpB,CAAA,MAAA;AAAA,UACpB/F,OADoB,GACoB+F,aADpB,CAAA,OAAA;AAAA,UACXxF,aADW,GACoBwF,aADpB,CAAA,aAAA;AAAA,UACI9F,WADJ,GACoB8F,aADpB,CAAA,WAAA;AAE/C,UAAMxH,YAAY,GAAGC,eAAe,CAAC,KAArC,KAAoC,CAApC;;AACA,UAAID,YAAY,IAAI,EAAE,qBAAtB,YAAoB,CAApB,EAA0D;AACtD,aAAA,KAAA,CAAA,KAAA,CAAA,QAAA,CAA0B;AAAE4B,UAAAA,eAAe,EAAfA;AAAF,SAA1B;AACH;;AACD,UAAMU,IAAI,GAAG,KAAb,WAAa,EAAb;;AACA,UAAI,CAACtC,YAAY,CAAb,QAAA,IAA0B,CAACA,YAAY,CAA3C,SAA2C,CAA3C,EAAwD;AACpD;AACH;;AACD,UAAMyH,YAAY,GAAG,IAAI,CAAJ,MAAA,CAAY,UAAA,GAAA,EAAA,CAAA,EAAA;AAAA,eAAY7F,eAAe,CAAfA,OAAAA,CAAwB,MAAI,CAAJ,YAAA,CAAA,GAAA,EAAxBA,CAAwB,CAAxBA,KAAZ,CAAA;AAAjC,OAAqB,CAArB;;AACA,UAAI5B,YAAY,CAAhB,QAAA,EAA2B;AACvBA,QAAAA,YAAY,CAAZA,QAAAA,CAAAA,eAAAA,EAAAA,YAAAA;AACH;;AACD,UAAIqC,SAAS,KAATA,UAAAA,IAA4BrC,YAAY,CAA5C,QAAA,EAAuD;AACnDA,QAAAA,YAAY,CAAZA,QAAAA,CAAAA,MAAAA,EAAAA,OAAAA,EAAAA,YAAAA,EAAAA,WAAAA;AADJ,OAAA,MAGK,IAAIqC,SAAS,KAATA,kBAAAA,IAAoCrC,YAAY,CAApD,gBAAA,EAAuE;AACxE,YAAM0H,UAAU,GAAG,IAAI,CAAJ,MAAA,CAAY,UAAA,GAAA,EAAA,CAAA,EAAA;AAAA,iBAAY1F,aAAa,CAAbA,OAAAA,CAAsB,MAAI,CAAJ,YAAA,CAAA,GAAA,EAAtBA,CAAsB,CAAtBA,KAAZ,CAAA;AAA/B,SAAmB,CAAnB;AACAhC,QAAAA,YAAY,CAAZA,gBAAAA,CAAAA,OAAAA,EAAAA,YAAAA,EAAAA,UAAAA;AAFC,OAAA,MAIA,IAAIqC,SAAS,KAATA,aAAAA,IAA+BrC,YAAY,CAA/C,WAAA,EAA6D;AAC9D,YAAM0H,WAAU,GAAG,IAAI,CAAJ,MAAA,CAAY,UAAA,GAAA,EAAA,CAAA,EAAA;AAAA,iBAAY1F,aAAa,CAAbA,OAAAA,CAAsB,MAAI,CAAJ,YAAA,CAAA,GAAA,EAAtBA,CAAsB,CAAtBA,KAAZ,CAAA;AAA/B,SAAmB,CAAnB;;AACAhC,QAAAA,YAAY,CAAZA,WAAAA,CAAAA,OAAAA,EAAAA,YAAAA,EAAAA,WAAAA;AAFC,OAAA,MAIA,IAAIqC,SAAS,KAATA,gBAAAA,IAAkCrC,YAAY,CAAlD,cAAA,EAAmE;AACpEA,QAAAA,YAAY,CAAZA,cAAAA,CAAAA,eAAAA;AACH;AACJ;;;oCACe/B,M,EAAQ;AACpB,UAAM0J,cAAc,GAAG1J,MAAM,CAANA,cAAAA,IAAyB,KAAA,KAAA,CAAhD,cAAA;AADoB,UAAA,YAAA,GAEc,KAFd,KAAA;AAAA,UAEZiI,SAFY,GAAA,YAAA,CAAA,SAAA;AAAA,UAEDD,UAFC,GAAA,YAAA,CAAA,UAAA,CAAA,CAGpB;;AACA,UAJoB,YAIpB,CAJoB,CAKpB;;AACA,UAAIG,YAAY,CAAA,UAAA,EAAZA,MAAY,CAAZA,IAAoCF,SAAS,KAAjD,SAAA,EAAiE;AAC7D;AACA,YAAM0B,WAAW,GAAGD,cAAc,CAAdA,OAAAA,CAAAA,SAAAA,IAApB,CAAA;AACAE,QAAAA,YAAY,GACRD,WAAW,KAAKD,cAAc,CAA9BC,MAAAA,GAAAA,SAAAA,GAAoDD,cAAc,CADtEE,WACsE,CADtEA;AAHJ,OAAA,MAMK;AACDA,QAAAA,YAAY,GAAGF,cAAc,CAA7BE,CAA6B,CAA7BA;AACH;;AACD,UAAMzG,QAAQ,GAAG;AACb8E,QAAAA,SAAS,EADI,YAAA;AAEbD,QAAAA,UAAU,EAAE4B,YAAY,GAAA,MAAA,GAAY;AAFvB,OAAjB,CAfoB,CAmBpB;;AACA,UAAI,KAAA,mBAAA,GAAA,MAAA,KAAJ,CAAA,EAA6C;AACzC,aAAA,QAAA,CAAA,QAAA,EAAwB,KAAxB,gBAAA;AACH;;AAtBmB,UAuBZpJ,QAvBY,GAuBC,KAvBD,KAuBC,CAvBD,QAAA;;AAwBpB,UAAA,QAAA,EAAc;AACVA,QAAAA,QAAQ,CAARA,KAAAA,CAAAA,IAAAA,EAAqB,KAAA,sBAAA,CAA4B,QAAA,CAAc,QAAA,CAAA,EAAA,EAAkB,KAAhC,KAAc,CAAd,EAA5B,QAA4B,CAA5B,EAArBA,MAAqB,CAArBA;AACH;AACJ;;;kCACaT,K,EAAO;AACjB,aAAO,CAACA,KAAK,IAAI,KAAV,KAAA,EAAA,UAAA,KAAP,KAAA;AACH;;;iCACYC,M,EAAQ;AAAA,UACTgI,UADS,GACM,KADN,KACM,CADN,UAAA;;AAEjB,UAAI,CAAA,MAAA,IAAW,CAAf,UAAA,EAA4B;AACxB,eAAA,KAAA;AACH;;AACD,aAAOtG,YAAY,CAAZA,UAAY,CAAZA,KAA6BA,YAAY,CAAhD,MAAgD,CAAhD;MAEJ;;;;2CACuBJ,K,EAAOtB,M,EAAQ;AAClC,UAAM+C,UAAU,GAAG,QAAA,CAAA,EAAA,EAAkBzB,KAAK,CADR,UACf,CAAnB,CADkC,CAElC;;;AACA,aAAOyB,UAAU,CAAjB,QAAA;AACA,aAAOA,UAAU,CAAjB,gBAAA;AACA,UAAMxB,OAAO,GAAGD,KAAK,CAArB,OAAA;AACA,UAAMuI,MAAM,GAAZ,EAAA;AACA,UAAIC,aAAa,GAAjB,MAAA;;AACA,UAAIxI,KAAK,CAALA,UAAAA,IAAoBA,KAAK,CAA7B,SAAA,EAAyC;AACrCwI,QAAAA,aAAa,GAAGxI,KAAK,CAArBwI,UAAAA;AACAD,QAAAA,MAAM,CAANA,MAAAA,GAAgBvI,KAAK,CAArBuI,UAAAA;AACAA,QAAAA,MAAM,CAANA,KAAAA,GAAevI,KAAK,CAApBuI,SAAAA;AACH;;AACD,UAAA,aAAA,EAAmB;AACfA,QAAAA,MAAM,CAANA,KAAAA,GAAeC,aAAa,CAA5BD,SAAAA;AACAA,QAAAA,MAAM,CAANA,SAAAA,GAAmBnI,YAAY,CAA/BmI,aAA+B,CAA/BA;AACH;;AACD,UAAME,KAAK,GAAG;AACVC,QAAAA,iBAAiB,EAAE,KAAA,YAAA,CAAA,KAAA;AADT,OAAd;AAGA,aAAO,CAAA,UAAA,EAAA,OAAA,EAAA,MAAA,EAAP,KAAO,CAAP;AACH;;;+BACUC,K,EAAO;AACd,UAAA,MAAA;AACAhH,MAAAA,OAAO,CAAC,KAAA,KAAA,CAAD,OAAA,EAAqB,UAAA,CAAA,EAAK;AAC7B,YAAIvB,YAAY,CAAZA,CAAY,CAAZA,KAAJ,KAAA,EAA+B;AAC3B1B,UAAAA,MAAM,GAANA,CAAAA;AACH;AAHLiD,OAAO,CAAPA;AAKA,aAAA,MAAA;AACH;;;kCACaoB,I,EAAM+E,Q,EAAU;AAAA,UAAA,MAAA,GAAA,IAAA;;AAAA,UAAA,qBAAA,GACkB,KADlB,KACkB,CADlB,kBAAA;AAAA,UAClBL,kBADkB,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,UAAA,GAAA,qBAAA;AAE1B,aAAO,IAAI,CAAJ,IAAA,CAAA,QAAA,EAAA,GAAA,CAAwB,UAAA,IAAA,EAAA;AAAA,eAAUmB,IAAI,CAAJA,kBAAI,CAAJA,GACnC,QAAA,CAAc,QAAA,CAAA,EAAA,EAAd,IAAc,CAAd,EAAA,eAAA,CAAA,EAAA,EAAA,kBAAA,EAA+D,MAAI,CAAJ,aAAA,CAAmBA,IAAI,CAAvB,kBAAuB,CAAvB,EAD5BA,QAC4B,CAA/D,CAAA,CADmCA,GAAV,IAAA;AAA/B,OAAO,CAAP;AAEH;;;qCACgBzH,S,EAAW0H,kB,EAAoB;AAC5C;AACA,UAAI,CAAC,KAAL,aAAK,EAAL,EAA2B;AACvB,eAAA,IAAA;AACH;;AACD,UAAIC,IAAI,GAAR,SAAA;AAL4C,UAMpCrH,UANoC,GAMrB,KANqB,KAMrB,CANqB,UAAA;;AAO5C,UAAIA,UAAU,CAAd,IAAA,EAAqB;AACjBqH,QAAAA,IAAI,GAAGrH,UAAU,CAAjBqH,IAAAA;AADJ,OAAA,MAGK,IAAI,KAAA,KAAA,CAAA,IAAA,KAAA,QAAA,IAAgC,KAAA,KAAA,CAAA,IAAA,KAApC,OAAA,EAAiE;AAClEA,QAAAA,IAAI,GAAJA,OAAAA;AACH;;AACD,UAAMC,QAAQ,GAAGtH,UAAU,CAAVA,QAAAA,IAAjB,QAAA;AACA,UAAM6F,KAAK,GAAG7F,UAAU,CAAVA,KAAAA,IAAoB,KAAA,YAAA,GAAlC,MAAA;AACA,aAAO,KAAK,GAAL,CAAA,KAAcsH,QAAQ,KAARA,kBAAAA,IAAmCA,QAAQ,KAAzD,MAAA,IAAyE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,QAAA,CAAA;AAAY,QAAA,GAAG,EAAA,cAAA,MAAA,CAAA,kBAAA;AAAf,OAAA,EAAA,UAAA,EAAA;AAAqE,QAAA,SAAS,EAAEnF,UAAU,CAACnC,UAAU,CAAX,SAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAA1F,aAA0F,CAAA,CAA1F;AAA6I,QAAA,QAAQ,EAAE,KAAvJ,gBAAA;AAA8K,QAAA,KAAK,EAAnL,KAAA;AAA4L,QAAA,IAAI,EAAhM,IAAA;AAAwM,QAAA,OAAO,EAAE,KAAA,aAAA,CAAjN,KAAiN,CAAjN;AAA4O,QAAA,gBAAgB,EAAE,KAAKuH;AAAnQ,OAAA,CAAA,CAAzE,GAAP,IAAA;AACH;;;8CAC6D;AAAA,UAAA,MAAA,GAAA,IAAA;;AAAA,UAAzC7H,SAAyC,GAAA,KAAA,CAAzCA,SAAyC;AAAA,UAA9B0C,MAA8B,GAAA,KAAA,CAA9BA,MAA8B;AAAA,UAAtBO,iBAAsB,GAAA,KAAA,CAAtBA,iBAAsB;AAAA,UAClD3D,YADkD,GACjC,KADiC,KACjC,CADiC,YAAA;AAE1D,UAAMV,OAAO,GAAG,KAAA,KAAA,CAAA,OAAA,CAAhB,MAAgB,EAAhB;;AACA,UAAA,YAAA,EAAkB;AACd,YAAMgD,IAAI,GAAG,KAAA,sBAAA,GAAA,MAAA,CAAqC,UAAA,IAAA,EAAA,KAAA,EAAiB;AAC/D,cAAItC,YAAY,CAAhB,gBAAA,EAAmC;AAC/B,mBAAO,CAAC,MAAI,CAAJ,sBAAA,CAAA,IAAA,EAAA,KAAA,EAAR,QAAA;AACH;;AACD,iBAAA,IAAA;AAJJ,SAAa,CAAb;AAMA,YAAMwI,oBAAoB,GAAGrF,UAAU,CAAA,GAAA,MAAA,CAAA,SAAA,EAAA,mBAAA,CAAA,EAAA,eAAA,CAAA,EAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,0BAAA,CAAA,EACOnD,YAAY,CAD1D,UAAuC,CAAA,CAAvC;;AAGA,YAAMyI,eAAe,GAAA,eAAA,CAAA;AACjBvI,UAAAA,GAAG,EADc,kBAAA;AAEjBwI,UAAAA,MAAM,EAAE,KAAA,kBAAA,CAAwB1I,YAAY,CAF3B,IAET,CAFS;AAGjB8E,UAAAA,SAAS,EAHQ,oBAAA;AAIjBM,UAAAA,KAAK,EAAEpF,YAAY,CAJF,KAAA;AAKjB2I,UAAAA,KAAK,EAAE3I,YAAY,CALF,WAAA;AAMjB4I,UAAAA,KAAK,EAAE5I,YAAY,CAAC6I;AANH,SAAA,EAAA,mBAAA,EAOM;AACnB/D,UAAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,gBAAA;AADU,SAPN,CAArB;;AAWA,YAAI9E,YAAY,CAAZA,IAAAA,KAAJ,OAAA,EAAmC;AAC/B,cAAM8I,mBAAmB,GAAG,IAAI,CAAJ,KAAA,CAAW,UAAA,IAAA,EAAA,KAAA,EAAA;AAAA,mBAAiB,MAAI,CAAJ,sBAAA,CAAA,IAAA,EAAA,KAAA,EAAjB,QAAA;AAAvC,WAA4B,CAA5B;AACAL,UAAAA,eAAe,CAAfA,KAAAA,GAAwBA,eAAe,CAAfA,KAAAA,IAA0B,KAAA,CAAA,aAAA,CAAA,oBAAA,EAAA;AAAsB,YAAA,KAAK,EAAE,KAAA,KAAA,CAA7B,KAAA;AAA+C,YAAA,MAAM,EAArD,MAAA;AAA+D,YAAA,IAAI,EAAnE,IAAA;AAA2E,YAAA,sBAAsB,EAAE,KAAnG,sBAAA;AAAgI,YAAA,YAAY,EAAE,KAA9I,YAAA;AAAiK,YAAA,QAAQ,EAAzK,mBAAA;AAAgM,YAAA,SAAS,EAAzM,SAAA;AAAsN,YAAA,QAAQ,EAAE,KAAhO,eAAA;AAAsP,YAAA,UAAU,EAAEzI,YAAY,CAA9Q,UAAA;AAA2R,YAAA,qBAAqB,EAAEA,YAAY,CAA9T,qBAAA;AAAsV,YAAA,iBAAiB,EAAE,KAAA,0BAAA,CAAA,iBAAA;AAAzW,WAAA,CAAlDyI;AACH;;AACD,YAAI,WAAJ,YAAA,EAA6B;AACzBA,UAAAA,eAAe,CAAfA,KAAAA,GAAwBzI,YAAY,CAApCyI,KAAAA;AADJ,SAAA,MAGK,IAAI,OAAO,CAAP,IAAA,CAAa,UAAA,MAAA,EAAM;AAAA,iBAAIxK,MAAM,CAANA,KAAAA,KAAAA,MAAAA,IAA2BA,MAAM,CAANA,KAAAA,KAA/B,IAAA;AAAvB,SAAI,CAAJ,EAA8E;AAC/EwK,UAAAA,eAAe,CAAfA,KAAAA,GAAAA,MAAAA;AACH;;AACD,YAAInJ,OAAO,CAAPA,CAAO,CAAPA,IAAcA,OAAO,CAAPA,CAAO,CAAPA,CAAAA,GAAAA,KAAlB,kBAAA,EAAyD;AACrDA,UAAAA,OAAO,CAAPA,CAAO,CAAPA,GAAAA,eAAAA;AADJ,SAAA,MAGK;AACDA,UAAAA,OAAO,CAAPA,OAAAA,CAAAA,eAAAA;AACH;AACJ;;AACD,aAAA,OAAA;AACH;;;iDAC4F;AAAA,UAAA,MAAA,GAAA,IAAA;;AAAA,UAArEoB,SAAqE,GAAA,KAAA,CAArEA,SAAqE;AAAA,UAA1D+C,iBAA0D,GAAA,KAAA,CAA1DA,iBAA0D;AAAA,UAAvCnE,OAAuC,GAAA,KAAA,CAAvCA,OAAuC;AAAA,UAA9B8D,MAA8B,GAAA,KAAA,CAA9BA,MAA8B;AAAA,UAAtBO,iBAAsB,GAAA,KAAA,CAAtBA,iBAAsB;AAAA,UAAA,YAAA,GAC1D,KAD0D,KAAA;AAAA,UACjFuC,SADiF,GAAA,YAAA,CAAA,SAAA;AAAA,UACtE1G,OADsE,GAAA,YAAA,CAAA,OAAA;AAEzF,aAAO0B,OAAO,CAAA,OAAA,EAAU,UAAA,MAAA,EAAA,CAAA,EAAe;AAAA,YAAA,YAAA;;AACnC,YAAMhB,GAAG,GAAGP,YAAY,CAAA,MAAA,EAAxB,CAAwB,CAAxB;AACA,YAAA,cAAA;AACA,YAAA,UAAA;AACA,YAAIoJ,YAAY,GAAG9K,MAAM,CAAzB,YAAA;;AACA,YAAM+K,YAAY,GAAG,MAAI,CAAJ,YAAA,CAArB,MAAqB,CAArB;;AACA,YAAK/K,MAAM,CAANA,OAAAA,IAAkBA,MAAM,CAANA,OAAAA,CAAAA,MAAAA,GAAnB,CAACA,IAAgDA,MAAM,CAA3D,cAAA,EAA4E;AACxE,cAAMgL,UAAU,GAAG/I,GAAG,IAAHA,OAAAA,GAAiBV,OAAO,CAAxBU,GAAwB,CAAxBA,GAAnB,EAAA;AACAgJ,UAAAA,cAAc,GAAI,KAAA,CAAA,aAAA,CAAA,cAAA,EAAA;AAAgB,YAAA,MAAM,EAAtB,MAAA;AAAgC,YAAA,MAAM,EAAtC,MAAA;AAAgD,YAAA,YAAY,EAA5D,UAAA;AAA0E,YAAA,aAAa,EAAE,MAAI,CAA7F,YAAA;AAA4G,YAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAArH,SAAqH,CAArH;AAA8I,YAAA,iBAAiB,EAAEzF,iBAAiB,IAAlL,cAAA;AAAsM,YAAA,iBAAiB,EAAE,MAAI,CAAJ,0BAAA,CAAzN,iBAAyN,CAAzN;AAA6Q,YAAA,GAAG,EAAC;AAAjR,WAAA,CAAlByF;AACH;;AACD,YAAIjL,MAAM,CAAV,MAAA,EAAmB;AACf,cAAM0J,cAAc,GAAG1J,MAAM,CAANA,cAAAA,IAAyB,MAAI,CAAJ,KAAA,CAAhD,cAAA;AACA,cAAMkL,QAAQ,GAAGH,YAAY,IAAI9C,SAAS,KAA1C,QAAA;AACA,cAAMkD,SAAS,GAAGJ,YAAY,IAAI9C,SAAS,KAA3C,SAAA;AACA,cAAMmD,MAAM,GAAG1B,cAAc,CAAdA,OAAAA,CAAAA,QAAAA,MAAqC,CAArCA,CAAAA,IAA4C,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,YAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,oBAAA,EAAA,MAAA,CAAmCwB,QAAQ,GAAA,IAAA,GAA1D,KAAe,CAAf;AAA6E,YAAA,IAAI,EAAjF,UAAA;AAA6F,YAAA,KAAK,EAAC;AAAnG,WAAA,CAA3D;AACA,cAAMG,OAAO,GAAG3B,cAAc,CAAdA,OAAAA,CAAAA,SAAAA,MAAsC,CAAtCA,CAAAA,IAA6C,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,YAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,sBAAA,EAAA,MAAA,CAAqCyB,SAAS,GAAA,IAAA,GAA7D,KAAe,CAAf;AAAgF,YAAA,IAAI,EAApF,YAAA;AAAkG,YAAA,KAAK,EAAC;AAAxG,WAAA,CAA7D;AACAG,UAAAA,UAAU,GAAI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,YAAA,KAAK,EAAEnG,MAAM,CAAlB,SAAA;AAA8B,YAAA,SAAS,EAAED,UAAU,CAAA,GAAA,MAAA,CAAA,SAAA,EAAA,sBAAA,CAAA,EAAqCkG,MAAM,IAANA,OAAAA,IAAAA,GAAAA,MAAAA,CAAAA,SAAAA,EAAxF,2BAAwFA,CAArC,CAAnD;AAAuJ,YAAA,GAAG,EAAC;AAA3J,WAAA,EAAA,MAAA,EAAdE,OAAc,CAAdA;;AAIAR,UAAAA,YAAY,GAAG,SAAA,YAAA,CAAA,GAAA,EAAS;AACpB,gBAAIS,QAAQ,GADQ,EACpB,CADoB,CAEpB;;AACA,gBAAIvL,MAAM,CAAV,YAAA,EAAyB;AACrBuL,cAAAA,QAAQ,GAAG,QAAA,CAAA,EAAA,EAAkBvL,MAAM,CAANA,YAAAA,CAA7BuL,GAA6BvL,CAAlB,CAAXuL;AAJgB,aAAA,CAMpB;;;AACA,gBAAMC,iBAAiB,GAAGD,QAAQ,CAAlC,OAAA;;AACAA,YAAAA,QAAQ,CAARA,OAAAA,GAAmB,YAAa;AAC5B,cAAA,MAAI,CAAJ,eAAA,CAAA,MAAA;;AACA,kBAAA,iBAAA,EAAuB;AACnBC,gBAAAA,iBAAiB,CAAjBA,KAAAA,CAAAA,KAAAA,CAAAA,EAAAA,SAAAA;AACH;AAJLD,aAAAA;;AAMA,mBAAA,QAAA;AAdJT,WAAAA;AAgBH;;AACD,eAAO,QAAA,CAAc,QAAA,CAAA,EAAA,EAAd,MAAc,CAAd,EAAyC;AAAEjE,UAAAA,SAAS,EAAE3B,UAAU,CAAClF,MAAM,CAAP,SAAA,GAAA,YAAA,GAAA,EAAA,EAAA,eAAA,CAAA,YAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,qBAAA,CAAA,EAC1BsL,UAAU,IADgB,cAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,qBAAA,CAAA,EAAA,cAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,qBAAA,CAAA,EAAA,UAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,cAAA,CAAA,EAIjCP,YAAY,IAJqB,SAAA,CAAA,EAAvB,YAAuB,EAAvB;AAKxCJ,UAAAA,KAAK,EAAE,CACP,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,YAAA,GAAG,EAAT,OAAA;AAAkB,YAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,gBAAA;AAA3B,WAAA,EACR,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,YAAA,SAAS,EAAEW,UAAU,GAAA,GAAA,MAAA,CAAA,SAAA,EAAA,iBAAA,CAAA,GAAmCG;AAA7D,WAAA,EACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,YAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,eAAA;AAAf,WAAA,EACG,MAAI,CAAJ,iBAAA,CAAuBzL,MAAM,CAFlC,KAEK,CADH,CADF,EAIE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,YAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,gBAAA;AAAf,WAAA,EANa,UAMb,CAJF,CADQ,CADO,EALiC,cAKjC,CALiC;AAezC8K,UAAAA,YAAY,EAAZA;AAfyC,SAAzC,CAAP;AArCJ,OAAc,CAAd;AAsDH;;;sCACiBH,K,EAAO;AAAA,UAAA,YAAA,GACsB,KADtB,KAAA;AAAA,UACbpJ,OADa,GAAA,YAAA,CAAA,OAAA;AAAA,UACJ0G,SADI,GAAA,YAAA,CAAA,SAAA;AAAA,UACOD,UADP,GAAA,YAAA,CAAA,UAAA,CAAA,CAErB;;AACA,UAAI2C,KAAK,YAAT,QAAA,EAA+B;AAC3B,eAAOA,KAAK,CAAC;AACTpJ,UAAAA,OAAO,EADE,OAAA;AAET0G,UAAAA,SAAS,EAFA,SAAA;AAGTD,UAAAA,UAAU,EAAVA;AAHS,SAAD,CAAZ;AAKH;;AACD,aAAA,KAAA;AACH;;;6BACQ;AACL,aAAO,KAAA,CAAA,aAAA,CAAA,cAAA,EAAA,IAAA,EAAiB,KAAxB,eAAO,CAAP;AACH;;;6CAvb+BV,S,EAAWC,S,EAAW;AAAA,UAC1CF,SAD0C,GAC5BE,SAD4B,CAAA,SAAA;AAElD,UAAMlG,OAAO,GAAGiG,SAAS,CAATA,OAAAA,IAAqBF,gBAAgB,CAACE,SAAS,CAA/D,QAAqD,CAArD;;AACA,UAAIE,SAAS,GAAG,QAAA,CAAc,QAAA,CAAA,EAAA,EAAd,SAAc,CAAd,EAA4C;AAAEH,QAAAA,SAAS,EAAX,SAAA;AAAwBhG,QAAAA,OAAO,EAAPA;AAAxB,OAA5C,CAAhB;;AACA,UAAI,gBAAA,SAAA,IAA6B,gBAAjC,SAAA,EAA4D;AACxD,YAAMoG,aAAa,GAAG,QAAA,CAAc,QAAA,CAAc,QAAA,CAAA,EAAA,EAAd,iBAAc,CAAd,EAAoDF,SAAS,CAA3E,UAAc,CAAd,EAAyFD,SAAS,CAAxH,UAAsB,CAAtB;;AACAG,QAAAA,aAAa,CAAbA,OAAAA,GAAwBA,aAAa,CAAbA,OAAAA,IAAxBA,CAAAA;AACAA,QAAAA,aAAa,CAAbA,QAAAA,GAAyBA,aAAa,CAAbA,QAAAA,IAAzBA,EAAAA;AACAD,QAAAA,SAAS,GAAG,QAAA,CAAc,QAAA,CAAA,EAAA,EAAd,SAAc,CAAd,EAA4C;AAAEzE,UAAAA,UAAU,EAAEuE,SAAS,CAATA,UAAAA,KAAAA,KAAAA,GAAAA,aAAAA,GAAiD3G;AAA/D,SAA5C,CAAZ6G;AACH;;AACD,UAAIF,SAAS,CAATA,YAAAA,IAA0B,qBAAqBA,SAAS,CAA5D,YAAA,EAA2E;AACvEA,QAAAA,SAAS,CAATA,KAAAA,CAAAA,QAAAA,CAAyB;AACrB3D,UAAAA,eAAe,EAAE2D,SAAS,CAATA,YAAAA,CAAAA,eAAAA,IAA0C;AADtC,SAAzBA;AADJ,OAAA,MAKK,IAAID,SAAS,CAATA,YAAAA,IAA0B,CAACC,SAAS,CAAxC,YAAA,EAAuD;AACxDA,QAAAA,SAAS,CAATA,KAAAA,CAAAA,QAAAA,CAAyB;AACrB3D,UAAAA,eAAe,EAAE;AADI,SAAzB2D;AAGH;;AACD,UAAI,gBAAA,SAAA,IAA6BA,SAAS,CAATA,UAAAA,KAAyBD,SAAS,CAAnE,UAAA,EAAgF;AAC5EC,QAAAA,SAAS,CAATA,KAAAA,CAAAA,QAAAA,CAAyB;AACrB/D,UAAAA,cAAc,EAAE;AADK,SAAzB+D;AArB8C,OAAA,CAyBlD;;;AACAA,MAAAA,SAAS,CAATA,qBAAAA,CA1BkD,EA0BlDA,EA1BkD,CA2BlD;;AACA,UAAMI,oBAAoB,GAAGlG,uBAAuB,CAAA,SAAA,EAAYgG,SAAS,CAAzE,OAAoD,CAApD;;AACA,UAAIE,oBAAoB,CAApBA,MAAAA,GAAJ,CAAA,EAAqC;AACjC,YAAMC,kBAAkB,GAAGC,qBAAqB,CAAA,SAAA,EAAYJ,SAAS,CAArE,OAAgD,CAAhD;;AACA,YAAMK,UAAU,GAAG,QAAA,CAAA,EAAA,EAAkBL,SAAS,CAA9C,OAAmB,CAAnB;;AACA9H,QAAAA,MAAM,CAANA,IAAAA,CAAAA,kBAAAA,EAAAA,OAAAA,CAAwC,UAAA,GAAA,EAAO;AAC3CmI,UAAAA,UAAU,CAAVA,GAAU,CAAVA,GAAkBF,kBAAkB,CAApCE,GAAoC,CAApCA;AADJnI,SAAAA;;AAGA,YAAIoI,gBAAgB,CAAA,SAAA,EAApB,UAAoB,CAApB,EAA6C;AACzCN,UAAAA,SAAS,GAAG,QAAA,CAAc,QAAA,CAAA,EAAA,EAAd,SAAc,CAAd,EAA4C;AAAEjG,YAAAA,OAAO,EAAEsG;AAAX,WAA5C,CAAZL;AACH;AACJ;;AACD,UAAI,CAACO,mBAAmB,CAACT,SAAS,CAAV,UAAA,EAAuBD,SAAS,CAAxD,UAAwB,CAAxB,EAAsE;AAClE,YAAMxG,UAAU,GAAGD,gBAAgB,CAAC0G,SAAS,CAA7C,UAAmC,CAAnC;AACAE,QAAAA,SAAS,GAAG,QAAA,CAAc,QAAA,CAAA,EAAA,EAAd,SAAc,CAAd,EAA4C;AAAE3G,UAAAA,UAAU,EAAVA;AAAF,SAA5C,CAAZ2G;AACH;;AACD,aAAA,SAAA;AACH;;;;EAhce3F,KAAK,CAACC,S;;AA60B1BF,KAAK,CAALA,SAAAA,GAAkB;AACduH,EAAAA,UAAU,EAAEuC,SAAS,CADP,KAAA;AAEdrK,EAAAA,OAAO,EAAEqK,SAAS,CAFJ,KAAA;AAGdjJ,EAAAA,SAAS,EAAEiJ,SAAS,CAHN,MAAA;AAIdC,EAAAA,cAAc,EAAED,SAAS,CAJX,IAAA;AAKd3J,EAAAA,YAAY,EAAE2J,SAAS,CALT,MAAA;AAMd7E,EAAAA,SAAS,EAAE6E,SAAS,CANN,MAAA;AAOdtB,EAAAA,IAAI,EAAEsB,SAAS,CAPD,MAAA;AAQd5E,EAAAA,OAAO,EAAE4E,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,IAAA,EAAiBA,SAAS,CARzC,MAQe,CAApBA,CARK;AASdE,EAAAA,QAAQ,EAAEF,SAAS,CATL,IAAA;AAUdlL,EAAAA,QAAQ,EAAEkL,SAAS,CAVL,IAAA;AAWdvG,EAAAA,MAAM,EAAEuG,SAAS,CAXH,MAAA;AAYdlG,EAAAA,iBAAiB,EAAEkG,SAAS,CAZd,MAAA;AAadhC,EAAAA,cAAc,EAAEgC,SAAS,CAbX,KAAA;AAcdhG,EAAAA,iBAAiB,EAAEgG,SAAS,CAACG;AAdf,CAAlBjK;AAgBAA,KAAK,CAALA,YAAAA,GAAqB;AACjBuH,EAAAA,UAAU,EADO,EAAA;AAEjBwC,EAAAA,cAAc,EAFG,KAAA;AAGjB9E,EAAAA,SAAS,EAHQ,EAAA;AAIjBuD,EAAAA,IAAI,EAJa,SAAA;AAKjBtD,EAAAA,OAAO,EALU,KAAA;AAMjB8E,EAAAA,QAAQ,EANS,KAAA;AAOjBE,EAAAA,UAAU,EAPO,EAAA;AAQjB3G,EAAAA,MAAM,EARW,EAAA;AASjB/C,EAAAA,MAAM,EATW,KAAA;AAUjBwD,EAAAA,UAAU,EAVO,IAAA;AAWjB8D,EAAAA,cAAc,EAAE,CAAA,QAAA,EAXC,SAWD,CAXC;AAYjBX,EAAAA,kBAAkB,EAAE;AAZH,CAArBnH;AAcAmK,QAAQ,CAARA,KAAQ,CAARA;;IACMC,U;;;;;AACF,WAAA,UAAA,CAAA,KAAA,EAAmB;AAAA,QAAA,MAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,CAAA;;AACf,IAAA,MAAA,GAAA,0BAAA,CAAA,IAAA,EAAA,eAAA,CAAA,UAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA,CAAA;;AACA,IAAA,MAAA,CAAA,qBAAA,GAA6B,UAAA,KAAA,EAAA;AAAA,aAAY,MAAA,CAAA,kBAAA,GAAZ,KAAA;AAA7B,KAAA;;AACA,IAAA,MAAA,CAAA,kBAAA,GAAA,EAAA;AACA,IAAA,MAAA,CAAA,KAAA,GAAaC,WAAW,CAAC;AACrBtI,MAAAA,eAAe,EAAE3B,eAAe,CAAfA,KAAe,CAAfA,CAAAA,eAAAA,IADI,EAAA;AAErBuB,MAAAA,cAAc,EAAE;AAFK,KAAD,CAAxB;AAJe,WAAA,MAAA;AAQlB;;;;6BACQ;AACL,aAAQ,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA,EAAA,EAAW,KAAX,KAAA,EAAA;AAAuB,QAAA,KAAK,EAAE,KAA9B,KAAA;AAA0C,QAAA,kBAAkB,EAAE,KAA9D,kBAAA;AAAuF,QAAA,qBAAqB,EAAE,KAAK2I;AAAnH,OAAA,CAAA,CAAR;AACH;;;;EAZoBrK,KAAK,CAACC,S;;AAc/BkK,UAAU,CAAVA,WAAAA,GAAAA,kBAAAA;AACAA,UAAU,CAAVA,MAAAA,GAAAA,MAAAA;AACAA,UAAU,CAAVA,WAAAA,GAAAA,WAAAA;AACA,eAAA,UAAA","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/* eslint-disable prefer-spread */\nimport * as React from 'react';\nimport omit from 'omit.js';\nimport RcTable, { INTERNAL_COL_DEFINE } from 'rc-table';\nimport * as PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport shallowEqual from 'shallowequal';\nimport { polyfill } from 'react-lifecycles-compat';\nimport FilterDropdown from './filterDropdown';\nimport createStore from './createStore';\nimport SelectionBox from './SelectionBox';\nimport SelectionCheckboxAll from './SelectionCheckboxAll';\nimport Column from './Column';\nimport ColumnGroup from './ColumnGroup';\nimport createBodyRow from './createBodyRow';\nimport { flatArray, treeMap, flatFilter, normalizeColumns } from './util';\nimport scrollTo from '../_util/scrollTo';\nimport Pagination from '../pagination';\nimport Icon from '../icon';\nimport Spin from '../spin';\nimport TransButton from '../_util/transButton';\nimport LocaleReceiver from '../locale-provider/LocaleReceiver';\nimport defaultLocale from '../locale/default';\nimport { ConfigConsumer } from '../config-provider';\nimport warning from '../_util/warning';\nfunction noop() { }\nfunction stopPropagation(e) {\n    e.stopPropagation();\n}\nfunction getRowSelection(props) {\n    return props.rowSelection || {};\n}\nfunction getColumnKey(column, index) {\n    return column.key || column.dataIndex || index;\n}\nfunction isSameColumn(a, b) {\n    if (a && b && a.key && a.key === b.key) {\n        return true;\n    }\n    return (a === b ||\n        shallowEqual(a, b, (value, other) => {\n            // https://github.com/ant-design/ant-design/issues/12737\n            if (typeof value === 'function' && typeof other === 'function') {\n                return value === other || value.toString() === other.toString();\n            }\n            // https://github.com/ant-design/ant-design/issues/19398\n            if (Array.isArray(value) && Array.isArray(other)) {\n                return value === other || shallowEqual(value, other);\n            }\n        }));\n}\nconst defaultPagination = {\n    onChange: noop,\n    onShowSizeChange: noop,\n};\n/**\n * Avoid creating new object, so that parent component's shouldComponentUpdate\n * can works appropriately。\n */\nconst emptyObject = {};\nconst createComponents = (components = {}) => {\n    const bodyRow = components && components.body && components.body.row;\n    return Object.assign(Object.assign({}, components), { body: Object.assign(Object.assign({}, components.body), { row: createBodyRow(bodyRow) }) });\n};\nfunction isTheSameComponents(components1 = {}, components2 = {}) {\n    return (components1 === components2 ||\n        ['table', 'header', 'body'].every((key) => shallowEqual(components1[key], components2[key])));\n}\nfunction getFilteredValueColumns(state, columns) {\n    return flatFilter(columns || (state || {}).columns || [], (column) => typeof column.filteredValue !== 'undefined');\n}\nfunction getFiltersFromColumns(state = {}, columns) {\n    const filters = {};\n    getFilteredValueColumns(state, columns).forEach((col) => {\n        const colKey = getColumnKey(col);\n        filters[colKey] = col.filteredValue;\n    });\n    return filters;\n}\nfunction isFiltersChanged(state, filters) {\n    if (Object.keys(filters).length !== Object.keys(state.filters).length) {\n        return true;\n    }\n    return Object.keys(filters).some(columnKey => filters[columnKey] !== state.filters[columnKey]);\n}\nclass Table extends React.Component {\n    constructor(props) {\n        super(props);\n        this.setTableRef = (table) => {\n            this.rcTable = table;\n        };\n        this.getCheckboxPropsByItem = (item, index) => {\n            const rowSelection = getRowSelection(this.props);\n            if (!rowSelection.getCheckboxProps) {\n                return {};\n            }\n            const key = this.getRecordKey(item, index);\n            // Cache checkboxProps\n            if (!this.props.checkboxPropsCache[key]) {\n                this.props.checkboxPropsCache[key] = rowSelection.getCheckboxProps(item) || {};\n                const checkboxProps = this.props.checkboxPropsCache[key];\n                warning(!('checked' in checkboxProps) && !('defaultChecked' in checkboxProps), 'Table', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.');\n            }\n            return this.props.checkboxPropsCache[key];\n        };\n        this.getRecordKey = (record, index) => {\n            const { rowKey } = this.props;\n            const recordKey = typeof rowKey === 'function' ? rowKey(record, index) : record[rowKey];\n            warning(recordKey !== undefined, 'Table', 'Each record in dataSource of table should have a unique `key` prop, ' +\n                'or set `rowKey` of Table to an unique primary key, ' +\n                'see https://u.ant.design/table-row-key');\n            return recordKey === undefined ? index : recordKey;\n        };\n        this.onRow = (prefixCls, record, index) => {\n            const { onRow } = this.props;\n            const custom = onRow ? onRow(record, index) : {};\n            return Object.assign(Object.assign({}, custom), { prefixCls, store: this.props.store, rowKey: this.getRecordKey(record, index) });\n        };\n        this.generatePopupContainerFunc = (getPopupContainer) => {\n            const { scroll } = this.props;\n            const table = this.rcTable;\n            if (getPopupContainer) {\n                return getPopupContainer;\n            }\n            // Use undefined to let rc component use default logic.\n            return scroll && table ? () => table.tableNode : undefined;\n        };\n        this.scrollToFirstRow = () => {\n            const { scroll } = this.props;\n            if (scroll && scroll.scrollToFirstRowOnChange !== false) {\n                scrollTo(0, {\n                    getContainer: () => this.rcTable.bodyTable,\n                });\n            }\n        };\n        this.handleFilter = (column, nextFilters) => {\n            const props = this.props;\n            const pagination = Object.assign({}, this.state.pagination);\n            const filters = Object.assign(Object.assign({}, this.state.filters), { [getColumnKey(column)]: nextFilters });\n            // Remove filters not in current columns\n            const currentColumnKeys = [];\n            treeMap(this.state.columns, c => {\n                if (!c.children) {\n                    currentColumnKeys.push(getColumnKey(c));\n                }\n            });\n            Object.keys(filters).forEach(columnKey => {\n                if (currentColumnKeys.indexOf(columnKey) < 0) {\n                    delete filters[columnKey];\n                }\n            });\n            if (props.pagination) {\n                // Reset current prop\n                pagination.current = 1;\n                pagination.onChange(pagination.current);\n            }\n            const newState = {\n                pagination,\n                filters: {},\n            };\n            const filtersToSetState = Object.assign({}, filters);\n            // Remove filters which is controlled\n            getFilteredValueColumns(this.state).forEach((col) => {\n                const columnKey = getColumnKey(col);\n                if (columnKey) {\n                    delete filtersToSetState[columnKey];\n                }\n            });\n            if (Object.keys(filtersToSetState).length > 0) {\n                newState.filters = filtersToSetState;\n            }\n            // Controlled current prop will not respond user interaction\n            if (typeof props.pagination === 'object' && 'current' in props.pagination) {\n                newState.pagination = Object.assign(Object.assign({}, pagination), { current: this.state.pagination.current });\n            }\n            this.setState(newState, () => {\n                this.scrollToFirstRow();\n                this.props.store.setState({\n                    selectionDirty: false,\n                });\n                const { onChange } = this.props;\n                if (onChange) {\n                    onChange.apply(null, this.prepareParamsArguments(Object.assign(Object.assign({}, this.state), { selectionDirty: false, filters,\n                        pagination })));\n                }\n            });\n        };\n        this.handleSelect = (record, rowIndex, e) => {\n            const checked = e.target.checked;\n            const nativeEvent = e.nativeEvent;\n            const defaultSelection = this.props.store.getState().selectionDirty\n                ? []\n                : this.getDefaultSelection();\n            let selectedRowKeys = this.props.store.getState().selectedRowKeys.concat(defaultSelection);\n            const key = this.getRecordKey(record, rowIndex);\n            const { pivot } = this.state;\n            const rows = this.getFlatCurrentPageData();\n            let realIndex = rowIndex;\n            if (this.props.expandedRowRender) {\n                realIndex = rows.findIndex(row => this.getRecordKey(row, rowIndex) === key);\n            }\n            if (nativeEvent.shiftKey && pivot !== undefined && realIndex !== pivot) {\n                const changeRowKeys = [];\n                const direction = Math.sign(pivot - realIndex);\n                const dist = Math.abs(pivot - realIndex);\n                let step = 0;\n                while (step <= dist) {\n                    const i = realIndex + step * direction;\n                    step += 1;\n                    const row = rows[i];\n                    const rowKey = this.getRecordKey(row, i);\n                    const checkboxProps = this.getCheckboxPropsByItem(row, i);\n                    if (!checkboxProps.disabled) {\n                        if (selectedRowKeys.includes(rowKey)) {\n                            if (!checked) {\n                                selectedRowKeys = selectedRowKeys.filter((j) => rowKey !== j);\n                                changeRowKeys.push(rowKey);\n                            }\n                        }\n                        else if (checked) {\n                            selectedRowKeys.push(rowKey);\n                            changeRowKeys.push(rowKey);\n                        }\n                    }\n                }\n                this.setState({ pivot: realIndex });\n                this.props.store.setState({\n                    selectionDirty: true,\n                });\n                this.setSelectedRowKeys(selectedRowKeys, {\n                    selectWay: 'onSelectMultiple',\n                    record,\n                    checked,\n                    changeRowKeys,\n                    nativeEvent,\n                });\n            }\n            else {\n                if (checked) {\n                    selectedRowKeys.push(this.getRecordKey(record, realIndex));\n                }\n                else {\n                    selectedRowKeys = selectedRowKeys.filter((i) => key !== i);\n                }\n                this.setState({ pivot: realIndex });\n                this.props.store.setState({\n                    selectionDirty: true,\n                });\n                this.setSelectedRowKeys(selectedRowKeys, {\n                    selectWay: 'onSelect',\n                    record,\n                    checked,\n                    changeRowKeys: undefined,\n                    nativeEvent,\n                });\n            }\n        };\n        this.handleRadioSelect = (record, rowIndex, e) => {\n            const checked = e.target.checked;\n            const nativeEvent = e.nativeEvent;\n            const key = this.getRecordKey(record, rowIndex);\n            const selectedRowKeys = [key];\n            this.props.store.setState({\n                selectionDirty: true,\n            });\n            this.setSelectedRowKeys(selectedRowKeys, {\n                selectWay: 'onSelect',\n                record,\n                checked,\n                changeRowKeys: undefined,\n                nativeEvent,\n            });\n        };\n        this.handleSelectRow = (selectionKey, index, onSelectFunc) => {\n            const data = this.getFlatCurrentPageData();\n            const defaultSelection = this.props.store.getState().selectionDirty\n                ? []\n                : this.getDefaultSelection();\n            const selectedRowKeys = this.props.store.getState().selectedRowKeys.concat(defaultSelection);\n            const changeableRowKeys = data\n                .filter((item, i) => !this.getCheckboxPropsByItem(item, i).disabled)\n                .map((item, i) => this.getRecordKey(item, i));\n            const changeRowKeys = [];\n            let selectWay = 'onSelectAll';\n            let checked;\n            // handle default selection\n            switch (selectionKey) {\n                case 'all':\n                    changeableRowKeys.forEach(key => {\n                        if (selectedRowKeys.indexOf(key) < 0) {\n                            selectedRowKeys.push(key);\n                            changeRowKeys.push(key);\n                        }\n                    });\n                    selectWay = 'onSelectAll';\n                    checked = true;\n                    break;\n                case 'removeAll':\n                    changeableRowKeys.forEach(key => {\n                        if (selectedRowKeys.indexOf(key) >= 0) {\n                            selectedRowKeys.splice(selectedRowKeys.indexOf(key), 1);\n                            changeRowKeys.push(key);\n                        }\n                    });\n                    selectWay = 'onSelectAll';\n                    checked = false;\n                    break;\n                case 'invert':\n                    changeableRowKeys.forEach(key => {\n                        if (selectedRowKeys.indexOf(key) < 0) {\n                            selectedRowKeys.push(key);\n                        }\n                        else {\n                            selectedRowKeys.splice(selectedRowKeys.indexOf(key), 1);\n                        }\n                        changeRowKeys.push(key);\n                        selectWay = 'onSelectInvert';\n                    });\n                    break;\n                default:\n                    break;\n            }\n            this.props.store.setState({\n                selectionDirty: true,\n            });\n            // when select custom selection, callback selections[n].onSelect\n            const { rowSelection } = this.props;\n            let customSelectionStartIndex = 2;\n            if (rowSelection && rowSelection.hideDefaultSelections) {\n                customSelectionStartIndex = 0;\n            }\n            if (index >= customSelectionStartIndex && typeof onSelectFunc === 'function') {\n                return onSelectFunc(changeableRowKeys);\n            }\n            this.setSelectedRowKeys(selectedRowKeys, {\n                selectWay,\n                checked,\n                changeRowKeys,\n            });\n        };\n        this.handlePageChange = (current, ...otherArguments) => {\n            const props = this.props;\n            const pagination = Object.assign({}, this.state.pagination);\n            if (current) {\n                pagination.current = current;\n            }\n            else {\n                pagination.current = pagination.current || 1;\n            }\n            pagination.onChange(pagination.current, ...otherArguments);\n            const newState = {\n                pagination,\n            };\n            // Controlled current prop will not respond user interaction\n            if (props.pagination && typeof props.pagination === 'object' && 'current' in props.pagination) {\n                newState.pagination = Object.assign(Object.assign({}, pagination), { current: this.state.pagination.current });\n            }\n            this.setState(newState, this.scrollToFirstRow);\n            this.props.store.setState({\n                selectionDirty: false,\n            });\n            const { onChange } = this.props;\n            if (onChange) {\n                onChange.apply(null, this.prepareParamsArguments(Object.assign(Object.assign({}, this.state), { selectionDirty: false, pagination })));\n            }\n        };\n        this.handleShowSizeChange = (current, pageSize) => {\n            const { pagination } = this.state;\n            pagination.onShowSizeChange(current, pageSize);\n            const nextPagination = Object.assign(Object.assign({}, pagination), { pageSize,\n                current });\n            this.setState({ pagination: nextPagination }, this.scrollToFirstRow);\n            const { onChange } = this.props;\n            if (onChange) {\n                onChange.apply(null, this.prepareParamsArguments(Object.assign(Object.assign({}, this.state), { pagination: nextPagination })));\n            }\n        };\n        this.renderExpandIcon = (prefixCls) => ({ expandable, expanded, needIndentSpaced, record, onExpand, }) => {\n            if (expandable) {\n                return (<LocaleReceiver componentName=\"Table\" defaultLocale={defaultLocale.Table}>\n          {(locale) => (<TransButton className={classNames(`${prefixCls}-row-expand-icon`, {\n                    [`${prefixCls}-row-collapsed`]: !expanded,\n                    [`${prefixCls}-row-expanded`]: expanded,\n                })} onClick={event => {\n                    onExpand(record, event);\n                }} aria-label={expanded ? locale.collapse : locale.expand} noStyle/>)}\n        </LocaleReceiver>);\n            }\n            if (needIndentSpaced) {\n                return <span className={`${prefixCls}-row-expand-icon ${prefixCls}-row-spaced`}/>;\n            }\n            return null;\n        };\n        this.renderSelectionBox = (type) => {\n            return (_, record, index) => {\n                const rowKey = this.getRecordKey(record, index);\n                const props = this.getCheckboxPropsByItem(record, index);\n                const handleChange = (e) => type === 'radio'\n                    ? this.handleRadioSelect(record, index, e)\n                    : this.handleSelect(record, index, e);\n                return (<span onClick={stopPropagation}>\n          <SelectionBox type={type} store={this.props.store} rowIndex={rowKey} onChange={handleChange} defaultSelection={this.getDefaultSelection()} {...props}/>\n        </span>);\n            };\n        };\n        this.renderTable = ({ prefixCls, renderEmpty, dropdownPrefixCls, contextLocale, getPopupContainer: contextGetPopupContainer, }) => {\n            const _a = this.props, { showHeader, locale, getPopupContainer } = _a, restTableProps = __rest(_a, [\"showHeader\", \"locale\", \"getPopupContainer\"]);\n            // do not pass prop.style to rc-table, since already apply it to container div\n            const restProps = omit(restTableProps, ['style']);\n            const data = this.getCurrentPageData();\n            const expandIconAsCell = this.props.expandedRowRender && this.props.expandIconAsCell !== false;\n            // use props.getPopupContainer first\n            const realGetPopupContainer = getPopupContainer || contextGetPopupContainer;\n            // Merge too locales\n            const mergedLocale = Object.assign(Object.assign({}, contextLocale), locale);\n            if (!locale || !locale.emptyText) {\n                mergedLocale.emptyText = renderEmpty('Table');\n            }\n            const classString = classNames(`${prefixCls}-${this.props.size}`, {\n                [`${prefixCls}-bordered`]: this.props.bordered,\n                [`${prefixCls}-empty`]: !data.length,\n                [`${prefixCls}-without-column-header`]: !showHeader,\n            });\n            const columnsWithRowSelection = this.renderRowSelection({\n                prefixCls,\n                locale: mergedLocale,\n                getPopupContainer: realGetPopupContainer,\n            });\n            const columns = this.renderColumnsDropdown({\n                columns: columnsWithRowSelection,\n                prefixCls,\n                dropdownPrefixCls,\n                locale: mergedLocale,\n                getPopupContainer: realGetPopupContainer,\n            }).map((column, i) => {\n                const newColumn = Object.assign({}, column);\n                newColumn.key = getColumnKey(newColumn, i);\n                return newColumn;\n            });\n            let expandIconColumnIndex = columns[0] && columns[0].key === 'selection-column' ? 1 : 0;\n            if ('expandIconColumnIndex' in restProps) {\n                expandIconColumnIndex = restProps.expandIconColumnIndex;\n            }\n            return (<RcTable ref={this.setTableRef} key=\"table\" expandIcon={this.renderExpandIcon(prefixCls)} {...restProps} onRow={(record, index) => this.onRow(prefixCls, record, index)} components={this.state.components} prefixCls={prefixCls} data={data} columns={columns} showHeader={showHeader} className={classString} expandIconColumnIndex={expandIconColumnIndex} expandIconAsCell={expandIconAsCell} emptyText={mergedLocale.emptyText}/>);\n        };\n        this.renderComponent = ({ getPrefixCls, renderEmpty, getPopupContainer }) => {\n            const { prefixCls: customizePrefixCls, dropdownPrefixCls: customizeDropdownPrefixCls, style, className, } = this.props;\n            const data = this.getCurrentPageData();\n            let loading = this.props.loading;\n            if (typeof loading === 'boolean') {\n                loading = {\n                    spinning: loading,\n                };\n            }\n            const prefixCls = getPrefixCls('table', customizePrefixCls);\n            const dropdownPrefixCls = getPrefixCls('dropdown', customizeDropdownPrefixCls);\n            const table = (<LocaleReceiver componentName=\"Table\" defaultLocale={defaultLocale.Table}>\n        {locale => this.renderTable({\n                prefixCls,\n                renderEmpty,\n                dropdownPrefixCls,\n                contextLocale: locale,\n                getPopupContainer,\n            })}\n      </LocaleReceiver>);\n            // if there is no pagination or no data,\n            // the height of spin should decrease by half of pagination\n            const paginationPatchClass = this.hasPagination() && data && data.length !== 0\n                ? `${prefixCls}-with-pagination`\n                : `${prefixCls}-without-pagination`;\n            return (<div className={classNames(`${prefixCls}-wrapper`, className)} style={style}>\n        <Spin {...loading} className={loading.spinning ? `${paginationPatchClass} ${prefixCls}-spin-holder` : ''}>\n          {this.renderPagination(prefixCls, 'top')}\n          {table}\n          {this.renderPagination(prefixCls, 'bottom')}\n        </Spin>\n      </div>);\n        };\n        const { expandedRowRender, columns: columnsProp } = props;\n        warning(!('columnsPageRange' in props || 'columnsPageSize' in props), 'Table', '`columnsPageRange` and `columnsPageSize` are removed, please use ' +\n            'fixed columns instead, see: https://u.ant.design/fixed-columns.');\n        if (expandedRowRender && (columnsProp || []).some(({ fixed }) => !!fixed)) {\n            warning(false, 'Table', '`expandedRowRender` and `Column.fixed` are not compatible. Please use one of them at one time.');\n        }\n        const columns = columnsProp || normalizeColumns(props.children);\n        this.state = Object.assign(Object.assign({}, this.getDefaultSortOrder(columns || [])), { \n            // 减少状态\n            filters: this.getDefaultFilters(columns), pagination: this.getDefaultPagination(props), pivot: undefined, prevProps: props, components: createComponents(props.components), columns });\n    }\n    static getDerivedStateFromProps(nextProps, prevState) {\n        const { prevProps } = prevState;\n        const columns = nextProps.columns || normalizeColumns(nextProps.children);\n        let nextState = Object.assign(Object.assign({}, prevState), { prevProps: nextProps, columns });\n        if ('pagination' in nextProps || 'pagination' in prevProps) {\n            const newPagination = Object.assign(Object.assign(Object.assign({}, defaultPagination), prevState.pagination), nextProps.pagination);\n            newPagination.current = newPagination.current || 1;\n            newPagination.pageSize = newPagination.pageSize || 10;\n            nextState = Object.assign(Object.assign({}, nextState), { pagination: nextProps.pagination !== false ? newPagination : emptyObject });\n        }\n        if (nextProps.rowSelection && 'selectedRowKeys' in nextProps.rowSelection) {\n            nextProps.store.setState({\n                selectedRowKeys: nextProps.rowSelection.selectedRowKeys || [],\n            });\n        }\n        else if (prevProps.rowSelection && !nextProps.rowSelection) {\n            nextProps.store.setState({\n                selectedRowKeys: [],\n            });\n        }\n        if ('dataSource' in nextProps && nextProps.dataSource !== prevProps.dataSource) {\n            nextProps.store.setState({\n                selectionDirty: false,\n            });\n        }\n        // https://github.com/ant-design/ant-design/issues/10133\n        nextProps.setCheckboxPropsCache({});\n        // Update filters\n        const filteredValueColumns = getFilteredValueColumns(nextState, nextState.columns);\n        if (filteredValueColumns.length > 0) {\n            const filtersFromColumns = getFiltersFromColumns(nextState, nextState.columns);\n            const newFilters = Object.assign({}, nextState.filters);\n            Object.keys(filtersFromColumns).forEach(key => {\n                newFilters[key] = filtersFromColumns[key];\n            });\n            if (isFiltersChanged(nextState, newFilters)) {\n                nextState = Object.assign(Object.assign({}, nextState), { filters: newFilters });\n            }\n        }\n        if (!isTheSameComponents(nextProps.components, prevProps.components)) {\n            const components = createComponents(nextProps.components);\n            nextState = Object.assign(Object.assign({}, nextState), { components });\n        }\n        return nextState;\n    }\n    componentDidUpdate() {\n        const { columns, sortColumn, sortOrder } = this.state;\n        if (this.getSortOrderColumns(columns).length > 0) {\n            const sortState = this.getSortStateFromColumns(columns);\n            if (!isSameColumn(sortState.sortColumn, sortColumn) || sortState.sortOrder !== sortOrder) {\n                this.setState(sortState);\n            }\n        }\n    }\n    getDefaultSelection() {\n        const rowSelection = getRowSelection(this.props);\n        if (!rowSelection.getCheckboxProps) {\n            return [];\n        }\n        return this.getFlatData()\n            .filter((item, rowIndex) => this.getCheckboxPropsByItem(item, rowIndex).defaultChecked)\n            .map((record, rowIndex) => this.getRecordKey(record, rowIndex));\n    }\n    getDefaultPagination(props) {\n        const pagination = typeof props.pagination === 'object' ? props.pagination : {};\n        let current;\n        if ('current' in pagination) {\n            current = pagination.current;\n        }\n        else if ('defaultCurrent' in pagination) {\n            current = pagination.defaultCurrent;\n        }\n        let pageSize;\n        if ('pageSize' in pagination) {\n            pageSize = pagination.pageSize;\n        }\n        else if ('defaultPageSize' in pagination) {\n            pageSize = pagination.defaultPageSize;\n        }\n        return this.hasPagination(props)\n            ? Object.assign(Object.assign(Object.assign({}, defaultPagination), pagination), { current: current || 1, pageSize: pageSize || 10 }) : {};\n    }\n    getSortOrderColumns(columns) {\n        return flatFilter(columns || (this.state || {}).columns || [], (column) => 'sortOrder' in column);\n    }\n    getDefaultFilters(columns) {\n        const definedFilters = getFiltersFromColumns(this.state, columns);\n        const defaultFilteredValueColumns = flatFilter(columns || [], (column) => typeof column.defaultFilteredValue !== 'undefined');\n        const defaultFilters = defaultFilteredValueColumns.reduce((soFar, col) => {\n            const colKey = getColumnKey(col);\n            soFar[colKey] = col.defaultFilteredValue;\n            return soFar;\n        }, {});\n        return Object.assign(Object.assign({}, defaultFilters), definedFilters);\n    }\n    getDefaultSortOrder(columns) {\n        const definedSortState = this.getSortStateFromColumns(columns);\n        const defaultSortedColumn = flatFilter(columns || [], (column) => {\n            return column.defaultSortOrder != null;\n        })[0];\n        if (defaultSortedColumn && !definedSortState.sortColumn) {\n            return {\n                sortColumn: defaultSortedColumn,\n                sortOrder: defaultSortedColumn.defaultSortOrder,\n            };\n        }\n        return definedSortState;\n    }\n    getSortStateFromColumns(columns) {\n        // return first column which sortOrder is not falsy\n        const sortedColumn = this.getSortOrderColumns(columns).filter((col) => col.sortOrder)[0];\n        if (sortedColumn) {\n            return {\n                sortColumn: sortedColumn,\n                sortOrder: sortedColumn.sortOrder,\n            };\n        }\n        return {\n            sortColumn: null,\n            sortOrder: null,\n        };\n    }\n    getMaxCurrent(total) {\n        const { pagination: { current, pageSize }, } = this.state;\n        if ((current - 1) * pageSize >= total) {\n            return Math.floor((total - 1) / pageSize) + 1;\n        }\n        return current;\n    }\n    getSorterFn(state) {\n        const { sortOrder, sortColumn } = state || this.state;\n        if (!sortOrder || !sortColumn || typeof sortColumn.sorter !== 'function') {\n            return;\n        }\n        return (a, b) => {\n            const result = sortColumn.sorter(a, b, sortOrder);\n            if (result !== 0) {\n                return sortOrder === 'descend' ? -result : result;\n            }\n            return 0;\n        };\n    }\n    getCurrentPageData() {\n        let data = this.getLocalData();\n        let current;\n        let pageSize;\n        const state = this.state;\n        // 如果没有分页的话，默认全部展示\n        if (!this.hasPagination()) {\n            pageSize = Number.MAX_VALUE;\n            current = 1;\n        }\n        else {\n            pageSize = state.pagination.pageSize;\n            current = this.getMaxCurrent(state.pagination.total || data.length);\n        }\n        // 分页\n        // ---\n        // 当数据量少于等于每页数量时，直接设置数据\n        // 否则进行读取分页数据\n        if (data.length > pageSize || pageSize === Number.MAX_VALUE) {\n            data = data.slice((current - 1) * pageSize, current * pageSize);\n        }\n        return data;\n    }\n    getFlatData() {\n        const { childrenColumnName } = this.props;\n        return flatArray(this.getLocalData(null, false), childrenColumnName);\n    }\n    getFlatCurrentPageData() {\n        const { childrenColumnName } = this.props;\n        return flatArray(this.getCurrentPageData(), childrenColumnName);\n    }\n    getLocalData(state, filter = true) {\n        const currentState = state || this.state;\n        const { dataSource } = this.props;\n        let data = dataSource || [];\n        // 优化本地排序\n        data = data.slice(0);\n        const sorterFn = this.getSorterFn(currentState);\n        if (sorterFn) {\n            data = this.recursiveSort(data, sorterFn);\n        }\n        // 筛选\n        if (filter && currentState.filters) {\n            Object.keys(currentState.filters).forEach(columnKey => {\n                const col = this.findColumn(columnKey);\n                if (!col) {\n                    return;\n                }\n                const values = currentState.filters[columnKey] || [];\n                if (values.length === 0) {\n                    return;\n                }\n                const onFilter = col.onFilter;\n                data = onFilter\n                    ? data.filter(record => {\n                        return values.some(v => onFilter(v, record));\n                    })\n                    : data;\n            });\n        }\n        return data;\n    }\n    setSelectedRowKeys(selectedRowKeys, selectionInfo) {\n        const { selectWay, record, checked, changeRowKeys, nativeEvent } = selectionInfo;\n        const rowSelection = getRowSelection(this.props);\n        if (rowSelection && !('selectedRowKeys' in rowSelection)) {\n            this.props.store.setState({ selectedRowKeys });\n        }\n        const data = this.getFlatData();\n        if (!rowSelection.onChange && !rowSelection[selectWay]) {\n            return;\n        }\n        const selectedRows = data.filter((row, i) => selectedRowKeys.indexOf(this.getRecordKey(row, i)) >= 0);\n        if (rowSelection.onChange) {\n            rowSelection.onChange(selectedRowKeys, selectedRows);\n        }\n        if (selectWay === 'onSelect' && rowSelection.onSelect) {\n            rowSelection.onSelect(record, checked, selectedRows, nativeEvent);\n        }\n        else if (selectWay === 'onSelectMultiple' && rowSelection.onSelectMultiple) {\n            const changeRows = data.filter((row, i) => changeRowKeys.indexOf(this.getRecordKey(row, i)) >= 0);\n            rowSelection.onSelectMultiple(checked, selectedRows, changeRows);\n        }\n        else if (selectWay === 'onSelectAll' && rowSelection.onSelectAll) {\n            const changeRows = data.filter((row, i) => changeRowKeys.indexOf(this.getRecordKey(row, i)) >= 0);\n            rowSelection.onSelectAll(checked, selectedRows, changeRows);\n        }\n        else if (selectWay === 'onSelectInvert' && rowSelection.onSelectInvert) {\n            rowSelection.onSelectInvert(selectedRowKeys);\n        }\n    }\n    toggleSortOrder(column) {\n        const sortDirections = column.sortDirections || this.props.sortDirections;\n        const { sortOrder, sortColumn } = this.state;\n        // 只同时允许一列进行排序，否则会导致排序顺序的逻辑问题\n        let newSortOrder;\n        // 切换另一列时，丢弃 sortOrder 的状态\n        if (isSameColumn(sortColumn, column) && sortOrder !== undefined) {\n            // 按照sortDirections的内容依次切换排序状态\n            const methodIndex = sortDirections.indexOf(sortOrder) + 1;\n            newSortOrder =\n                methodIndex === sortDirections.length ? undefined : sortDirections[methodIndex];\n        }\n        else {\n            newSortOrder = sortDirections[0];\n        }\n        const newState = {\n            sortOrder: newSortOrder,\n            sortColumn: newSortOrder ? column : null,\n        };\n        // Controlled\n        if (this.getSortOrderColumns().length === 0) {\n            this.setState(newState, this.scrollToFirstRow);\n        }\n        const { onChange } = this.props;\n        if (onChange) {\n            onChange.apply(null, this.prepareParamsArguments(Object.assign(Object.assign({}, this.state), newState), column));\n        }\n    }\n    hasPagination(props) {\n        return (props || this.props).pagination !== false;\n    }\n    isSortColumn(column) {\n        const { sortColumn } = this.state;\n        if (!column || !sortColumn) {\n            return false;\n        }\n        return getColumnKey(sortColumn) === getColumnKey(column);\n    }\n    // Get pagination, filters, sorter\n    prepareParamsArguments(state, column) {\n        const pagination = Object.assign({}, state.pagination);\n        // remove useless handle function in Table.onChange\n        delete pagination.onChange;\n        delete pagination.onShowSizeChange;\n        const filters = state.filters;\n        const sorter = {};\n        let currentColumn = column;\n        if (state.sortColumn && state.sortOrder) {\n            currentColumn = state.sortColumn;\n            sorter.column = state.sortColumn;\n            sorter.order = state.sortOrder;\n        }\n        if (currentColumn) {\n            sorter.field = currentColumn.dataIndex;\n            sorter.columnKey = getColumnKey(currentColumn);\n        }\n        const extra = {\n            currentDataSource: this.getLocalData(state),\n        };\n        return [pagination, filters, sorter, extra];\n    }\n    findColumn(myKey) {\n        let column;\n        treeMap(this.state.columns, c => {\n            if (getColumnKey(c) === myKey) {\n                column = c;\n            }\n        });\n        return column;\n    }\n    recursiveSort(data, sorterFn) {\n        const { childrenColumnName = 'children' } = this.props;\n        return data.sort(sorterFn).map((item) => item[childrenColumnName]\n            ? Object.assign(Object.assign({}, item), { [childrenColumnName]: this.recursiveSort(item[childrenColumnName], sorterFn) }) : item);\n    }\n    renderPagination(prefixCls, paginationPosition) {\n        // 强制不需要分页\n        if (!this.hasPagination()) {\n            return null;\n        }\n        let size = 'default';\n        const { pagination } = this.state;\n        if (pagination.size) {\n            size = pagination.size;\n        }\n        else if (this.props.size === 'middle' || this.props.size === 'small') {\n            size = 'small';\n        }\n        const position = pagination.position || 'bottom';\n        const total = pagination.total || this.getLocalData().length;\n        return total > 0 && (position === paginationPosition || position === 'both') ? (<Pagination key={`pagination-${paginationPosition}`} {...pagination} className={classNames(pagination.className, `${prefixCls}-pagination`)} onChange={this.handlePageChange} total={total} size={size} current={this.getMaxCurrent(total)} onShowSizeChange={this.handleShowSizeChange}/>) : null;\n    }\n    renderRowSelection({ prefixCls, locale, getPopupContainer, }) {\n        const { rowSelection } = this.props;\n        const columns = this.state.columns.concat();\n        if (rowSelection) {\n            const data = this.getFlatCurrentPageData().filter((item, index) => {\n                if (rowSelection.getCheckboxProps) {\n                    return !this.getCheckboxPropsByItem(item, index).disabled;\n                }\n                return true;\n            });\n            const selectionColumnClass = classNames(`${prefixCls}-selection-column`, {\n                [`${prefixCls}-selection-column-custom`]: rowSelection.selections,\n            });\n            const selectionColumn = {\n                key: 'selection-column',\n                render: this.renderSelectionBox(rowSelection.type),\n                className: selectionColumnClass,\n                fixed: rowSelection.fixed,\n                width: rowSelection.columnWidth,\n                title: rowSelection.columnTitle,\n                [INTERNAL_COL_DEFINE]: {\n                    className: `${prefixCls}-selection-col`,\n                },\n            };\n            if (rowSelection.type !== 'radio') {\n                const checkboxAllDisabled = data.every((item, index) => this.getCheckboxPropsByItem(item, index).disabled);\n                selectionColumn.title = selectionColumn.title || (<SelectionCheckboxAll store={this.props.store} locale={locale} data={data} getCheckboxPropsByItem={this.getCheckboxPropsByItem} getRecordKey={this.getRecordKey} disabled={checkboxAllDisabled} prefixCls={prefixCls} onSelect={this.handleSelectRow} selections={rowSelection.selections} hideDefaultSelections={rowSelection.hideDefaultSelections} getPopupContainer={this.generatePopupContainerFunc(getPopupContainer)}/>);\n            }\n            if ('fixed' in rowSelection) {\n                selectionColumn.fixed = rowSelection.fixed;\n            }\n            else if (columns.some(column => column.fixed === 'left' || column.fixed === true)) {\n                selectionColumn.fixed = 'left';\n            }\n            if (columns[0] && columns[0].key === 'selection-column') {\n                columns[0] = selectionColumn;\n            }\n            else {\n                columns.unshift(selectionColumn);\n            }\n        }\n        return columns;\n    }\n    renderColumnsDropdown({ prefixCls, dropdownPrefixCls, columns, locale, getPopupContainer, }) {\n        const { sortOrder, filters } = this.state;\n        return treeMap(columns, (column, i) => {\n            const key = getColumnKey(column, i);\n            let filterDropdown;\n            let sortButton;\n            let onHeaderCell = column.onHeaderCell;\n            const isSortColumn = this.isSortColumn(column);\n            if ((column.filters && column.filters.length > 0) || column.filterDropdown) {\n                const colFilters = key in filters ? filters[key] : [];\n                filterDropdown = (<FilterDropdown locale={locale} column={column} selectedKeys={colFilters} confirmFilter={this.handleFilter} prefixCls={`${prefixCls}-filter`} dropdownPrefixCls={dropdownPrefixCls || 'ant-dropdown'} getPopupContainer={this.generatePopupContainerFunc(getPopupContainer)} key=\"filter-dropdown\"/>);\n            }\n            if (column.sorter) {\n                const sortDirections = column.sortDirections || this.props.sortDirections;\n                const isAscend = isSortColumn && sortOrder === 'ascend';\n                const isDescend = isSortColumn && sortOrder === 'descend';\n                const ascend = sortDirections.indexOf('ascend') !== -1 && (<Icon className={`${prefixCls}-column-sorter-up ${isAscend ? 'on' : 'off'}`} type=\"caret-up\" theme=\"filled\"/>);\n                const descend = sortDirections.indexOf('descend') !== -1 && (<Icon className={`${prefixCls}-column-sorter-down ${isDescend ? 'on' : 'off'}`} type=\"caret-down\" theme=\"filled\"/>);\n                sortButton = (<div title={locale.sortTitle} className={classNames(`${prefixCls}-column-sorter-inner`, ascend && descend && `${prefixCls}-column-sorter-inner-full`)} key=\"sorter\">\n            {ascend}\n            {descend}\n          </div>);\n                onHeaderCell = (col) => {\n                    let colProps = {};\n                    // Get original first\n                    if (column.onHeaderCell) {\n                        colProps = Object.assign({}, column.onHeaderCell(col));\n                    }\n                    // Add sorter logic\n                    const onHeaderCellClick = colProps.onClick;\n                    colProps.onClick = (...args) => {\n                        this.toggleSortOrder(column);\n                        if (onHeaderCellClick) {\n                            onHeaderCellClick(...args);\n                        }\n                    };\n                    return colProps;\n                };\n            }\n            return Object.assign(Object.assign({}, column), { className: classNames(column.className, {\n                    [`${prefixCls}-column-has-actions`]: sortButton || filterDropdown,\n                    [`${prefixCls}-column-has-filters`]: filterDropdown,\n                    [`${prefixCls}-column-has-sorters`]: sortButton,\n                    [`${prefixCls}-column-sort`]: isSortColumn && sortOrder,\n                }), title: [\n                    <span key=\"title\" className={`${prefixCls}-header-column`}>\n            <div className={sortButton ? `${prefixCls}-column-sorters` : undefined}>\n              <span className={`${prefixCls}-column-title`}>\n                {this.renderColumnTitle(column.title)}\n              </span>\n              <span className={`${prefixCls}-column-sorter`}>{sortButton}</span>\n            </div>\n          </span>,\n                    filterDropdown,\n                ], onHeaderCell });\n        });\n    }\n    renderColumnTitle(title) {\n        const { filters, sortOrder, sortColumn } = this.state;\n        // https://github.com/ant-design/ant-design/issues/11246#issuecomment-405009167\n        if (title instanceof Function) {\n            return title({\n                filters,\n                sortOrder,\n                sortColumn,\n            });\n        }\n        return title;\n    }\n    render() {\n        return <ConfigConsumer>{this.renderComponent}</ConfigConsumer>;\n    }\n}\nTable.propTypes = {\n    dataSource: PropTypes.array,\n    columns: PropTypes.array,\n    prefixCls: PropTypes.string,\n    useFixedHeader: PropTypes.bool,\n    rowSelection: PropTypes.object,\n    className: PropTypes.string,\n    size: PropTypes.string,\n    loading: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n    bordered: PropTypes.bool,\n    onChange: PropTypes.func,\n    locale: PropTypes.object,\n    dropdownPrefixCls: PropTypes.string,\n    sortDirections: PropTypes.array,\n    getPopupContainer: PropTypes.func,\n};\nTable.defaultProps = {\n    dataSource: [],\n    useFixedHeader: false,\n    className: '',\n    size: 'default',\n    loading: false,\n    bordered: false,\n    indentSize: 20,\n    locale: {},\n    rowKey: 'key',\n    showHeader: true,\n    sortDirections: ['ascend', 'descend'],\n    childrenColumnName: 'children',\n};\npolyfill(Table);\nclass StoreTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.setCheckboxPropsCache = (cache) => (this.CheckboxPropsCache = cache);\n        this.CheckboxPropsCache = {};\n        this.store = createStore({\n            selectedRowKeys: getRowSelection(props).selectedRowKeys || [],\n            selectionDirty: false,\n        });\n    }\n    render() {\n        return (<Table {...this.props} store={this.store} checkboxPropsCache={this.CheckboxPropsCache} setCheckboxPropsCache={this.setCheckboxPropsCache}/>);\n    }\n}\nStoreTable.displayName = 'withStore(Table)';\nStoreTable.Column = Column;\nStoreTable.ColumnGroup = ColumnGroup;\nexport default StoreTable;\n"]},"metadata":{},"sourceType":"module"}