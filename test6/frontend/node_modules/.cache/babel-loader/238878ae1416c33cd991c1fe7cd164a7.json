{"ast":null,"code":"import _defineProperty from\"C:\\\\Users\\\\Son\\\\Desktop\\\\test6\\\\test6\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"C:\\\\Users\\\\Son\\\\Desktop\\\\test6\\\\test6\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"C:\\\\Users\\\\Son\\\\Desktop\\\\test6\\\\test6\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\Son\\\\Desktop\\\\test6\\\\test6\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"C:\\\\Users\\\\Son\\\\Desktop\\\\test6\\\\test6\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"C:\\\\Users\\\\Son\\\\Desktop\\\\test6\\\\test6\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _assertThisInitialized from\"C:\\\\Users\\\\Son\\\\Desktop\\\\test6\\\\test6\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";import _inherits from\"C:\\\\Users\\\\Son\\\\Desktop\\\\test6\\\\test6\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React,{Component,useState}from'react';import{signup,checkUsernameAvailability,checkEmailAvailability}from'../util/APIUtils';import'./SignUp.scss';import axios from'axios';import{Form,Input,Button,notification}from'antd';import{Link}from'react-router-dom';import{NAME_MIN_LENGTH,NAME_MAX_LENGTH,USERNAME_MIN_LENGTH,USERNAME_MAX_LENGTH,EMAIL_MAX_LENGTH,PASSWORD_MIN_LENGTH,PASSWORD_MAX_LENGTH}from'../constants';var Signup=/*#__PURE__*/function(_Component){_inherits(Signup,_Component);function Signup(props){var _this;_classCallCheck(this,Signup);_this=_possibleConstructorReturn(this,_getPrototypeOf(Signup).call(this,props));_this.validateName=function(name){if(name.length<NAME_MIN_LENGTH){return{validateStatus:'error',errorMsg:\"\\uB108\\uBB34 \\uC9E7\\uC2B5\\uB2C8\\uB2E4. \\uCD5C\\uC18C \".concat(NAME_MIN_LENGTH,\" \\uAE00\\uC790 \\uC774\\uC0C1 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\")};}else if(name.length>NAME_MAX_LENGTH){return{validationStatus:'error',errorMsg:\"\\uB108\\uBB34 \\uAE41\\uB2C8\\uB2E4. \\uCD5C\\uB300 \".concat(NAME_MAX_LENGTH,\" \\uAE00\\uC790 \\uC774\\uD558\\uB85C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\")};}else{return{validateStatus:'success',errorMsg:null};}};_this.validateEmail=function(email){if(!email){return{validateStatus:'error',errorMsg:'Email는 비워둘 수 없습니다.'};}var EMAIL_REGEX=RegExp('[^@ ]+@[^@ ]+\\\\.[^@ ]+');if(!EMAIL_REGEX.test(email)){return{validateStatus:'error',errorMsg:'유효한 Email이 아닙니다.'};}if(email.length>EMAIL_MAX_LENGTH){return{validateStatus:'error',errorMsg:\"\\uB108\\uBB34 \\uAE41\\uB2C8\\uB2E4. \\uCD5C\\uB300 (Maximum \".concat(EMAIL_MAX_LENGTH,\" \\uC774\\uD558\\uB85C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\")};}return{validateStatus:null,errorMsg:null};};_this.validateUsername=function(username){if(username.length<USERNAME_MIN_LENGTH){return{validateStatus:'error',errorMsg:\"\\uB108\\uBB34 \\uC9E7\\uC2B5\\uB2C8\\uB2E4. \\uCD5C\\uC18C \".concat(USERNAME_MIN_LENGTH,\" \\uAE00\\uC790 \\uC774\\uC0C1 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\")};}else if(username.length>USERNAME_MAX_LENGTH){return{validationStatus:'error',errorMsg:\"\\uB108\\uBB34 \\uAE41\\uB2C8\\uB2E4. \\uCD5C\\uB300 \".concat(USERNAME_MAX_LENGTH,\" \\uAE00\\uC790 \\uC774\\uD558\\uB85C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\")};}else{return{validateStatus:null,errorMsg:null};}};_this.validatePassword=function(password){if(password.length<PASSWORD_MIN_LENGTH){return{validateStatus:'error',errorMsg:\"\\uB108\\uBB34 \\uC9E7\\uC2B5\\uB2C8\\uB2E4. \\uCD5C\\uC18C \".concat(PASSWORD_MIN_LENGTH,\" \\uAE00\\uC790 \\uC774\\uC0C1 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\")};}else if(password.length>PASSWORD_MAX_LENGTH){return{validationStatus:'error',errorMsg:\"\\uB108\\uBB34 \\uAE41\\uB2C8\\uB2E4. \\uCD5C\\uB300 \".concat(PASSWORD_MAX_LENGTH,\" \\uAE00\\uC790 \\uC774\\uD558\\uB85C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\")};}else{return{validateStatus:'success',errorMsg:null};}};_this.state={name:{value:''},username:{value:''},email:{value:''},password:{value:''}};_this.handleInputChange=_this.handleInputChange.bind(_assertThisInitialized(_this));_this.handleSubmit=_this.handleSubmit.bind(_assertThisInitialized(_this));_this.validateUsernameAvailability=_this.validateUsernameAvailability.bind(_assertThisInitialized(_this));_this.validateEmailAvailability=_this.validateEmailAvailability.bind(_assertThisInitialized(_this));//this.isFormInvalid = this.isFormInvalid.bind(this);\nreturn _this;}_createClass(Signup,[{key:\"handleInputChange\",value:function handleInputChange(event,validationFun){var target=event.target;var inputName=target.name;var inputValue=target.value;this.setState(_defineProperty({},inputName,_objectSpread({value:inputValue},validationFun(inputValue))));}},{key:\"handleSubmit\",value:function handleSubmit(e){var _this2=this;e.preventDefault();var signupRequest={email:this.state.email.value,username:this.state.username.value,password:this.state.password.value};/*\r\n        axios.post(\"http://localhost:5000/api/auth/signup\", {\r\n            \"username\": userInfo.username,\r\n            \"email\": userInfo.email,\r\n            \"password\": userInfo.password\r\n        })*/signup(signupRequest).then(function(res){notification.success({message:'Cheeze Toon',description:\"성공적으로 회원가입되었습니다. 로그인을 해주세요.\"});_this2.props.history.push(\"/login\");},function(error){notification.error({message:'Cheeze Toon',description:error.message||'다시 시도해주세요.'});});}},{key:\"render\",value:function render(){var _this3=this;return React.createElement(\"div\",{className:\"signUpScreen\"},React.createElement(\"div\",{className:\"signUpContainer\"},React.createElement(\"div\",{className:\"signUpTitle\"},\"\\uD68C\\uC6D0\\uAC00\\uC785\"),React.createElement(\"form\",{onSubmit:this.handleSubmit,className:\"signUpForm\"},React.createElement(\"div\",{className:\"signUpFormContainer\"},React.createElement(\"div\",{className:\"signUpSubTitle\"},\"\\uC774\\uB984\"),React.createElement(\"input\",{onChange:function onChange(event){return _this3.handleInputChange(event,_this3.validateName);},type:\"text\",name:\"name\",className:\"signUpSubInput\"})),React.createElement(\"div\",{className:\"signUpFormContainer\"},React.createElement(\"div\",{className:\"signUpSubTitle\"},\"\\uB2C9\\uB124\\uC784\"),React.createElement(\"input\",{onChange:function onChange(event){return _this3.handleInputChange(event,_this3.validateName);},type:\"text\",name:\"username\",className:\"signUpSubInput\"})),React.createElement(\"div\",{className:\"signUpFormContainer\"},React.createElement(\"div\",{className:\"signUpSubTitle\"},\"\\uC774\\uBA54\\uC77C\"),React.createElement(\"input\",{onChange:function onChange(event){return _this3.handleInputChange(event,_this3.validateName);},type:\"text\",name:\"email\",className:\"signUpSubInput\"})),React.createElement(\"div\",{className:\"signUpFormContainer\"},React.createElement(\"div\",{className:\"signUpSubTitle\"},\"\\uBE44\\uBC00\\uBC88\\uD638\"),React.createElement(\"input\",{onChange:function onChange(event){return _this3.handleInputChange(event,_this3.validateName);},type:\"password\",name:\"password\",className:\"signUpSubInput\"})),React.createElement(\"div\",{className:\"signUpButtonContainer\"},React.createElement(\"button\",{type:\"submit\",className:\"signUpButton\"},\"\\uD68C\\uC6D0\\uAC00\\uC785\")))));}// Validation Functions\n},{key:\"validateUsernameAvailability\",value:function validateUsernameAvailability(){var _this4=this;// First check for client side errors in username\nvar usernameValue=this.state.username.value;var usernameValidation=this.validateUsername(usernameValue);if(usernameValidation.validateStatus==='error'){this.setState({username:_objectSpread({value:usernameValue},usernameValidation)});return;}this.setState({username:{value:usernameValue,validateStatus:'validating',errorMsg:null}});checkUsernameAvailability(usernameValue).then(function(response){if(response.available){_this4.setState({username:{value:usernameValue,validateStatus:'success',errorMsg:null}});}else{_this4.setState({username:{value:usernameValue,validateStatus:'error',errorMsg:'이미 존재하는 Username 입니다.'}});}}).catch(function(error){// Marking validateStatus as success, Form will be recchecked at server\n_this4.setState({username:{value:usernameValue,validateStatus:'success',errorMsg:null}});});}},{key:\"validateEmailAvailability\",value:function validateEmailAvailability(){var _this5=this;// First check for client side errors in email\nvar emailValue=this.state.email.value;var emailValidation=this.validateEmail(emailValue);if(emailValidation.validateStatus==='error'){this.setState({email:_objectSpread({value:emailValue},emailValidation)});return;}this.setState({email:{value:emailValue,validateStatus:'validating',errorMsg:null}});checkEmailAvailability(emailValue).then(function(response){if(response.available){_this5.setState({email:{value:emailValue,validateStatus:'success',errorMsg:null}});}else{_this5.setState({email:{value:emailValue,validateStatus:'error',errorMsg:'이미 존재하는 Email 입니다. '}});}}).catch(function(error){// Marking validateStatus as success, Form will be recchecked at server\n_this5.setState({email:{value:emailValue,validateStatus:'success',errorMsg:null}});});}}]);return Signup;}(Component);export default Signup;","map":{"version":3,"sources":["C:/Users/Son/Desktop/test6/test6/frontend/src/signup/SignUp.js"],"names":["React","Component","useState","signup","checkUsernameAvailability","checkEmailAvailability","axios","Form","Input","Button","notification","Link","NAME_MIN_LENGTH","NAME_MAX_LENGTH","USERNAME_MIN_LENGTH","USERNAME_MAX_LENGTH","EMAIL_MAX_LENGTH","PASSWORD_MIN_LENGTH","PASSWORD_MAX_LENGTH","Signup","props","validateName","name","length","validateStatus","errorMsg","validationStatus","validateEmail","email","EMAIL_REGEX","RegExp","test","validateUsername","username","validatePassword","password","state","value","handleInputChange","bind","handleSubmit","validateUsernameAvailability","validateEmailAvailability","event","validationFun","target","inputName","inputValue","setState","e","preventDefault","signupRequest","then","res","success","message","description","history","push","error","usernameValue","usernameValidation","response","available","catch","emailValue","emailValidation"],"mappings":"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","sourcesContent":["import React, {Component, useState} from 'react';\r\nimport { signup, checkUsernameAvailability, checkEmailAvailability } from '../util/APIUtils';\r\nimport './SignUp.scss';\r\nimport axios from 'axios';\r\nimport { Form, Input, Button, notification } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\nimport { \r\n    NAME_MIN_LENGTH, NAME_MAX_LENGTH, \r\n    USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH,\r\n    EMAIL_MAX_LENGTH,\r\n    PASSWORD_MIN_LENGTH, PASSWORD_MAX_LENGTH\r\n} from '../constants';\r\n\r\nclass Signup extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: {\r\n                value: ''\r\n            },\r\n            username: {\r\n                value: ''\r\n            },\r\n            email: {\r\n                value: ''\r\n            },\r\n            password: {\r\n                value: ''\r\n            }\r\n        }\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.validateUsernameAvailability = this.validateUsernameAvailability.bind(this);\r\n        this.validateEmailAvailability = this.validateEmailAvailability.bind(this);\r\n        //this.isFormInvalid = this.isFormInvalid.bind(this);\r\n    }\r\n\r\n    handleInputChange(event, validationFun) {\r\n        const target = event.target;\r\n        const inputName = target.name;        \r\n        const inputValue = target.value;\r\n\r\n        this.setState({\r\n            [inputName] : {\r\n                value: inputValue,\r\n                ...validationFun(inputValue)\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        const signupRequest = {\r\n            email: this.state.email.value,\r\n            username: this.state.username.value,\r\n            password: this.state.password.value\r\n        };\r\n        /*\r\n        axios.post(\"http://localhost:5000/api/auth/signup\", {\r\n            \"username\": userInfo.username,\r\n            \"email\": userInfo.email,\r\n            \"password\": userInfo.password\r\n        })*/\r\n        signup(signupRequest)\r\n            .then(res => {\r\n                notification.success({\r\n                    message: 'Cheeze Toon',\r\n                    description: \"성공적으로 회원가입되었습니다. 로그인을 해주세요.\",\r\n                });          \r\n                this.props.history.push(\"/login\");  \r\n            },(error) => {\r\n                notification.error({\r\n                    message: 'Cheeze Toon',\r\n                    description: error.message || '다시 시도해주세요.'\r\n                });\r\n            });\r\n    }\r\n    render(){\r\n    return (\r\n        <div className='signUpScreen'>\r\n            <div className='signUpContainer'>\r\n                <div className='signUpTitle'>회원가입</div>\r\n                <form onSubmit={this.handleSubmit} className='signUpForm'>\r\n                    <div className='signUpFormContainer'>\r\n                        <div className='signUpSubTitle'>이름</div>\r\n                        <input onChange={(event) => this.handleInputChange(event, this.validateName)} type='text' name='name' className='signUpSubInput'/>\r\n                    </div>\r\n                    <div className='signUpFormContainer'>\r\n                        <div className='signUpSubTitle'>닉네임</div>\r\n                        <input  onChange={(event) => this.handleInputChange(event, this.validateName)} type='text' name='username' className='signUpSubInput'/>\r\n                    </div>\r\n                    <div className='signUpFormContainer'>\r\n                        <div className='signUpSubTitle'>이메일</div>\r\n                        <input  onChange={(event) => this.handleInputChange(event, this.validateName)} type='text' name='email' className='signUpSubInput'/>\r\n                    </div>\r\n                    <div className='signUpFormContainer'>\r\n                        <div className='signUpSubTitle'>비밀번호</div>\r\n                        <input  onChange={(event) => this.handleInputChange(event, this.validateName)} type='password' name='password' className='signUpSubInput'/>\r\n                    </div>\r\n                    <div className='signUpButtonContainer'>\r\n                        <button type='submit' className='signUpButton'>회원가입</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n    }\r\n\r\n     // Validation Functions\r\n\r\n     validateName = (name) => {\r\n        if(name.length < NAME_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `너무 짧습니다. 최소 ${NAME_MIN_LENGTH} 글자 이상 입력해주세요.`\r\n            }\r\n        } else if (name.length > NAME_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `너무 깁니다. 최대 ${NAME_MAX_LENGTH} 글자 이하로 입력해주세요.`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: 'success',\r\n                errorMsg: null,\r\n              };            \r\n        }\r\n    }\r\n\r\n    validateEmail = (email) => {\r\n        if(!email) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: 'Email는 비워둘 수 없습니다.'                \r\n            }\r\n        }\r\n\r\n        const EMAIL_REGEX = RegExp('[^@ ]+@[^@ ]+\\\\.[^@ ]+');\r\n        if(!EMAIL_REGEX.test(email)) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: '유효한 Email이 아닙니다.'\r\n            }\r\n        }\r\n\r\n        if(email.length > EMAIL_MAX_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `너무 깁니다. 최대 (Maximum ${EMAIL_MAX_LENGTH} 이하로 입력해주세요.`\r\n            }\r\n        }\r\n\r\n        return {\r\n            validateStatus: null,\r\n            errorMsg: null\r\n        }\r\n    }\r\n\r\n    validateUsername = (username) => {\r\n        if(username.length < USERNAME_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `너무 짧습니다. 최소 ${USERNAME_MIN_LENGTH} 글자 이상 입력해주세요.`\r\n            }\r\n        } else if (username.length > USERNAME_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `너무 깁니다. 최대 ${USERNAME_MAX_LENGTH} 글자 이하로 입력해주세요.`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: null,\r\n                errorMsg: null\r\n            }\r\n        }\r\n    }\r\n\r\n    validateUsernameAvailability() {\r\n        // First check for client side errors in username\r\n        const usernameValue = this.state.username.value;\r\n        const usernameValidation = this.validateUsername(usernameValue);\r\n\r\n        if(usernameValidation.validateStatus === 'error') {\r\n            this.setState({\r\n                username: {\r\n                    value: usernameValue,\r\n                    ...usernameValidation\r\n                }\r\n            });\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            username: {\r\n                value: usernameValue,\r\n                validateStatus: 'validating',\r\n                errorMsg: null\r\n            }\r\n        });\r\n\r\n        checkUsernameAvailability(usernameValue)\r\n        .then(response => {\r\n            if(response.available) {\r\n                this.setState({\r\n                    username: {\r\n                        value: usernameValue,\r\n                        validateStatus: 'success',\r\n                        errorMsg: null\r\n                    }\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    username: {\r\n                        value: usernameValue,\r\n                        validateStatus: 'error',\r\n                        errorMsg: '이미 존재하는 Username 입니다.'\r\n                    }\r\n                });\r\n            }\r\n        }).catch(error => {\r\n            // Marking validateStatus as success, Form will be recchecked at server\r\n            this.setState({\r\n                username: {\r\n                    value: usernameValue,\r\n                    validateStatus: 'success',\r\n                    errorMsg: null\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    validateEmailAvailability() {\r\n        // First check for client side errors in email\r\n        const emailValue = this.state.email.value;\r\n        const emailValidation = this.validateEmail(emailValue);\r\n\r\n        if(emailValidation.validateStatus === 'error') {\r\n            this.setState({\r\n                email: {\r\n                    value: emailValue,\r\n                    ...emailValidation\r\n                }\r\n            });    \r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            email: {\r\n                value: emailValue,\r\n                validateStatus: 'validating',\r\n                errorMsg: null\r\n            }\r\n        });\r\n\r\n        checkEmailAvailability(emailValue)\r\n        .then(response => {\r\n            if(response.available) {\r\n                this.setState({\r\n                    email: {\r\n                        value: emailValue,\r\n                        validateStatus: 'success',\r\n                        errorMsg: null\r\n                    }\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    email: {\r\n                        value: emailValue,\r\n                        validateStatus: 'error',\r\n                        errorMsg: '이미 존재하는 Email 입니다. '\r\n                    }\r\n                });\r\n            }\r\n        }).catch(error => {\r\n            // Marking validateStatus as success, Form will be recchecked at server\r\n            this.setState({\r\n                email: {\r\n                    value: emailValue,\r\n                    validateStatus: 'success',\r\n                    errorMsg: null\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    validatePassword = (password) => {\r\n        if(password.length < PASSWORD_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `너무 짧습니다. 최소 ${PASSWORD_MIN_LENGTH} 글자 이상 입력해주세요.`\r\n            }\r\n        } else if (password.length > PASSWORD_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `너무 깁니다. 최대 ${PASSWORD_MAX_LENGTH} 글자 이하로 입력해주세요.`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: 'success',\r\n                errorMsg: null,\r\n            };            \r\n        }\r\n    }\r\n\r\n}\r\nexport default Signup;"]},"metadata":{},"sourceType":"module"}